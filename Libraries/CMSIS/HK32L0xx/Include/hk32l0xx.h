/*
 * HKMicroChip Limited (HKMicroChip) is supplying this software for use with Cortex-M0!
 * @file          hk32l0xx.h
 * @brief         CMSIS HeaderFile
 * @version       2.0
 * @datatime      2024-01-11 17:34:20(GMT+8:00)
 * @note          Generated by HkSvdFileCon V1.0.4 from hk32l0xx.svd
 */

#ifndef __HK32L0xx__
#define __HK32L0xx__

#ifdef __cplusplus
extern "C" {
#endif
/*****************************************************************************************
*                              Interrupt Number Definition                               *
*****************************************************************************************/
typedef enum
{
    /*********************** Cortex-M0 Processor Exceptions Numbers  ************************/
    NonMaskableInt_IRQn       = -14, /* 2 Non Maskable Interrupt */
    HardFault_IRQn            = -13, /* 3 Cortex-M0 Hard Fault Interrupt */
    SVC_IRQn                  = -5,  /* 11 Cortex-M0 SV Call Interrupt */
    PendSV_IRQn               = -2,  /* 14 Cortex-M0 Pend SV Interrupt */
    SysTick_IRQn              = -1,  /* 15 Cortex-M0 System Tick Interrupt */

    /************************ HK32L0xx specific Interrupt Numbers  **************************/
    WWDG_IRQn                  = 0,  /* Window Watchdog interrupt */
    PVD_IRQn                   = 1,  /* PVD interrupt */
    RTC_IRQn                   = 2,  /* RTC global interrupt */
    FLASH_IRQn                 = 3,  /* Flash global interrupt */
    RCC_IRQn                   = 4,  /* RCC global interrupt */
    EXTI0_1_IRQn               = 5,  /* EXTI Line[1:0] interrupt */
    EXTI2_3_IRQn               = 6,  /* EXTI Line[3:2] interrupt */
    EXTI4_15_IRQn              = 7,  /* EXTI Line[15:4] interrupt */
    LPUART_IRQn                = 8,  /* LPUART interrupt */
    DMA_CH1_IRQn               = 9,  /* DMA Channel 1 global interrupt */
    DMA_CH2_3_IRQn             = 10, /* DMA Channel 2/3 interrupt */
    DMA_CH4_7_IRQn             = 11, /* DMA Channel4/5/6/7 interrupt */
    ADC_COMP1_2_IRQn           = 12, /* ADC and Comparator1/2 interrupt */
    TIM1_IRQn                  = 13, /* TIM1 global interrupt */
    UART3_4_IRQn               = 14, /* UART3/4 global interrupt */
    TIM2_IRQn                  = 15, /* TIM2 global interrupt */
    TIM3_IRQn                  = 16, /* TIM3 global interrupt */
    DAC_IRQn                   = 17, /* DAC interrupt */
    TIM14_IRQn                 = 19, /* TIM14 global interrupt */
    TIM15_IRQn                 = 20, /* TIM15 global interrupt */
    TIM16_IRQn                 = 21, /* TIM16 global interrupt */
    TIM17_IRQn                 = 22, /* TIM17 global interrupt */
    I2C1_IRQn                  = 23, /* I2C1 global interrupt */
    I2C2_IRQn                  = 24, /* I2C2 global interrupt */
    SPI1_IRQn                  = 25, /* SPI1 global interrupt */
    SPI2_IRQn                  = 26, /* SPI2 global interrupt */
    USART1_IRQn                = 27, /* USART1 global interrupt */
    USART2_IRQn                = 28, /* USART2 global interrupt */
    AES_TRNG_EMACC_IRQn        = 29, /* AES/TRNG/ EMACC global interrupt */
    LCD_CAN_IRQn               = 30, /* LCD and CAN global interrupt */
    USB_DVSQ_IRQn              = 31, /* USB and DVSQ global interrupt */
} IRQn_Type;
/*****************************************************************************************
*                         Processor and Core Peripheral Section                          *
*****************************************************************************************/
#define __CM0_REV                            0x0000                             /* Core Revision */
#define __NVIC_PRIO_BITS                     3                                  /* Number of Bits used for Priority Levels */
#define __Vendor_SysTickConfig               0                                  /* Set to 1 if different SysTick Config is used */
#define __MPU_PRESENT                        0                                  /* MPU present */
#define __FPU_PRESENT                        0                                  /* FPU present */
#define __MCU_ENDIAN                         little                             /* MCU endian */

#include "core_cm0.h"                        /* ARM Cortex-M0 processor and core peripherals */
#include "system_hk32l0xx.h"                 /* hk32l0xx System */

#ifndef __IM                                 /* Fallback for older CMSIS versions */
#define __IM   __I
#endif
#ifndef __OM                                 /* Fallback for older CMSIS versions */
#define __OM   __O
#endif
#ifndef __IOM                                /* Fallback for older CMSIS versions */
#define __IOM  __IO
#endif

/*****************************************************************************************
*                        Start of section using anonymous unions                         *
*****************************************************************************************/
#if defined (__CC_ARM)
#pragma push
#pragma anon_unions
#elif defined (__ICCARM__)
#pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wc11-extensions"
#pragma clang diagnostic ignored "-Wreserved-id-macro"
#pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
#pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
/* anonymous unions are enabled by default */
#elif defined (__TMS470__)
/* anonymous unions are enabled by default */
#elif defined (__TASKING__)
#pragma warning 586
#elif defined (__CSMC__)
/* anonymous unions are enabled by default */
#else
#warning Not supported compiler type
#endif

typedef enum {RESET = 0, SET = !RESET} FlagStatus, ITStatus;
typedef enum {DISABLE = 0, ENABLE = !DISABLE} FunctionalState;
#define IS_FUNCTIONAL_STATE(STATE) (((STATE) == DISABLE) || ((STATE) == ENABLE))
typedef enum {ERROR = 0, SUCCESS = !ERROR} ErrorStatus;

/*****************************************************************************************
*                                    Peripheral FLASH                                    *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t ACR;                    /* ACR */
    __O  uint32_t KEYR;                   /* KEYR */
    __O  uint32_t OPTKEYR;                /* OPTKEYR */
    __IO uint32_t SR;                     /* SR */
    __IO uint32_t CR;                     /* CR */
    __O  uint32_t AR;                     /* AR */
    uint16_t RESERVED1[2];
    __I  uint32_t OBR;                    /* OBR */
    __I  uint32_t WRPR;                   /* WRPR */
    uint16_t RESERVED2[30];
    __I  uint32_t OBR2;                   /* OBR2 */
    uint16_t RESERVED3[6];
    __IO uint32_t ECR;                    /* ECR */
    uint16_t RESERVED4[2];
    __IO uint32_t ENCRY_CTL;              /* ENCRY_CTL */
    __IO uint32_t DECRY_CTL;              /* DECRY_CTL */
    __O  uint32_t UKEY1;                  /* UKEY1 */
    __O  uint32_t UKEY2;                  /* UKEY2 */
    uint16_t RESERVED5[4];
    __IO uint32_t INT_VEC_OFFSET;         /* INT_VEC_OFFSET */
} FLASH_TypeDef;

/************************************* FLASH->ACR  **************************************/
#define FLASH_ACR_PRFTBS_Pos                  ((uint32_t)5)                     /* Prefetch buffer status */
#define FLASH_ACR_PRFTBS_Mask                 (((uint32_t)0x01) << 5)
#define FLASH_ACR_PRFTBS                      FLASH_ACR_PRFTBS_Mask
#define FLASH_ACR_PRFTBE_Pos                  ((uint32_t)4)                     /* Prefetch buffer enable */
#define FLASH_ACR_PRFTBE_Mask                 (((uint32_t)0x01) << 4)
#define FLASH_ACR_PRFTBE                      FLASH_ACR_PRFTBE_Mask
#define FLASH_ACR_LATENCY_Pos                 ((uint32_t)0)                     /* Latency */
#define FLASH_ACR_LATENCY_Mask                (((uint32_t)0x07) << 0)
#define FLASH_ACR_LATENCY                     FLASH_ACR_LATENCY_Mask
#define FLASH_ACR_LATENCY_0                   (((uint32_t)0x1))
#define FLASH_ACR_LATENCY_1                   (((uint32_t)0x2))
#define FLASH_ACR_LATENCY_2                   (((uint32_t)0x4))

/************************************ FLASH->KEYR  **************************************/
#define FLASH_KEYR_FKEY_Pos                   ((uint32_t)0)                     /* Flash key */
#define FLASH_KEYR_FKEY_Mask                  (((uint32_t)0xFFFFFFFF) << 0)
#define FLASH_KEYR_FKEY                       FLASH_KEYR_FKEY_Mask

/*********************************** FLASH->OPTKEYR  ************************************/
#define FLASH_OPTKEYR_OPTKEYR_Pos             ((uint32_t)0)                     /* Option byte key */
#define FLASH_OPTKEYR_OPTKEYR_Mask            (((uint32_t)0xFFFFFFFF) << 0)
#define FLASH_OPTKEYR_OPTKEYR                 FLASH_OPTKEYR_OPTKEYR_Mask

/************************************* FLASH->CR  ***************************************/
#define FLASH_CR_ECC2BIT_ERRIE_Pos            ((uint32_t)18)                    /* ECC detection 2-bit data error interrupt enable */
#define FLASH_CR_ECC2BIT_ERRIE_Mask           (((uint32_t)0x01) << 18)
#define FLASH_CR_ECC2BIT_ERRIE                FLASH_CR_ECC2BIT_ERRIE_Mask
#define FLASH_CR_ECC1BIT_ERRIE_Pos            ((uint32_t)17)                    /* ECC detection 1-bit data error interrupt enable */
#define FLASH_CR_ECC1BIT_ERRIE_Mask           (((uint32_t)0x01) << 17)
#define FLASH_CR_ECC1BIT_ERRIE                FLASH_CR_ECC1BIT_ERRIE_Mask
#define FLASH_CR_ECC_AUTO_CORRECT_Pos         ((uint32_t)16)                    /* ECC automatic error correction */
#define FLASH_CR_ECC_AUTO_CORRECT_Mask        (((uint32_t)0x01) << 16)
#define FLASH_CR_ECC_AUTO_CORRECT             FLASH_CR_ECC_AUTO_CORRECT_Mask
#define FLASH_CR_OBL_LAUNCH_Pos               ((uint32_t)13)                    /* Force option byte loading */
#define FLASH_CR_OBL_LAUNCH_Mask              (((uint32_t)0x01) << 13)
#define FLASH_CR_OBL_LAUNCH                   FLASH_CR_OBL_LAUNCH_Mask
#define FLASH_CR_EOPIE_Pos                    ((uint32_t)12)                    /* End of operation interrupt enable */
#define FLASH_CR_EOPIE_Mask                   (((uint32_t)0x01) << 12)
#define FLASH_CR_EOPIE                        FLASH_CR_EOPIE_Mask
#define FLASH_CR_ERRIE_Pos                    ((uint32_t)10)                    /* Error interrupt enable */
#define FLASH_CR_ERRIE_Mask                   (((uint32_t)0x01) << 10)
#define FLASH_CR_ERRIE                        FLASH_CR_ERRIE_Mask
#define FLASH_CR_OPTWRE_Pos                   ((uint32_t)9)                     /* Option byte write enable */
#define FLASH_CR_OPTWRE_Mask                  (((uint32_t)0x01) << 9)
#define FLASH_CR_OPTWRE                       FLASH_CR_OPTWRE_Mask
#define FLASH_CR_LOCK_Pos                     ((uint32_t)7)                     /* Lock */
#define FLASH_CR_LOCK_Mask                    (((uint32_t)0x01) << 7)
#define FLASH_CR_LOCK                         FLASH_CR_LOCK_Mask
#define FLASH_CR_STRT_Pos                     ((uint32_t)6)                     /* Start */
#define FLASH_CR_STRT_Mask                    (((uint32_t)0x01) << 6)
#define FLASH_CR_STRT                         FLASH_CR_STRT_Mask
#define FLASH_CR_OPTER_Pos                    ((uint32_t)5)                     /* Option byte erase */
#define FLASH_CR_OPTER_Mask                   (((uint32_t)0x01) << 5)
#define FLASH_CR_OPTER                        FLASH_CR_OPTER_Mask
#define FLASH_CR_OPTPG_Pos                    ((uint32_t)4)                     /* Option byte programming */
#define FLASH_CR_OPTPG_Mask                   (((uint32_t)0x01) << 4)
#define FLASH_CR_OPTPG                        FLASH_CR_OPTPG_Mask
#define FLASH_CR_MER_Pos                      ((uint32_t)2)                     /* Mass erase */
#define FLASH_CR_MER_Mask                     (((uint32_t)0x01) << 2)
#define FLASH_CR_MER                          FLASH_CR_MER_Mask
#define FLASH_CR_PER_Pos                      ((uint32_t)1)                     /* Page erase */
#define FLASH_CR_PER_Mask                     (((uint32_t)0x01) << 1)
#define FLASH_CR_PER                          FLASH_CR_PER_Mask
#define FLASH_CR_WPG_Pos                      ((uint32_t)0)                     /* Word programming */
#define FLASH_CR_WPG_Mask                     (((uint32_t)0x01) << 0)
#define FLASH_CR_WPG                          FLASH_CR_WPG_Mask

/************************************* FLASH->SR  ***************************************/
#define FLASH_SR_ECC2BIT_ERR_Pos              ((uint32_t)15)                    /* ECC detection 2-bit data error flag */
#define FLASH_SR_ECC2BIT_ERR_Mask             (((uint32_t)0x01) << 15)
#define FLASH_SR_ECC2BIT_ERR                  FLASH_SR_ECC2BIT_ERR_Mask
#define FLASH_SR_ECC1BIT_ERR_Pos              ((uint32_t)14)                    /* ECC detection 1-bit data error flag */
#define FLASH_SR_ECC1BIT_ERR_Mask             (((uint32_t)0x01) << 14)
#define FLASH_SR_ECC1BIT_ERR                  FLASH_SR_ECC1BIT_ERR_Mask
#define FLASH_SR_SIZEERR_Pos                  ((uint32_t)10)                    /* Size error */
#define FLASH_SR_SIZEERR_Mask                 (((uint32_t)0x01) << 10)
#define FLASH_SR_SIZEERR                      FLASH_SR_SIZEERR_Mask
#define FLASH_SR_EOP_Pos                      ((uint32_t)5)                     /* End of operation */
#define FLASH_SR_EOP_Mask                     (((uint32_t)0x01) << 5)
#define FLASH_SR_EOP                          FLASH_SR_EOP_Mask
#define FLASH_SR_WRPRTERR_Pos                 ((uint32_t)4)                     /* Write protection error */
#define FLASH_SR_WRPRTERR_Mask                (((uint32_t)0x01) << 4)
#define FLASH_SR_WRPRTERR                     FLASH_SR_WRPRTERR_Mask
#define FLASH_SR_PGERR_Pos                    ((uint32_t)2)                     /* Programming error */
#define FLASH_SR_PGERR_Mask                   (((uint32_t)0x01) << 2)
#define FLASH_SR_PGERR                        FLASH_SR_PGERR_Mask
#define FLASH_SR_BSY_Pos                      ((uint32_t)0)                     /* Busy */
#define FLASH_SR_BSY_Mask                     (((uint32_t)0x01) << 0)
#define FLASH_SR_BSY                          FLASH_SR_BSY_Mask

/************************************* FLASH->AR  ***************************************/
#define FLASH_AR_FAR_Pos                      ((uint32_t)0)                     /* Flash Address */
#define FLASH_AR_FAR_Mask                     (((uint32_t)0xFFFFFFFF) << 0)
#define FLASH_AR_FAR                          FLASH_AR_FAR_Mask

/************************************* FLASH->OBR  **************************************/
#define FLASH_OBR_DATA1_Pos                   ((uint32_t)24)                    /* User data */
#define FLASH_OBR_DATA1_Mask                  (((uint32_t)0xFF) << 24)
#define FLASH_OBR_DATA1                       FLASH_OBR_DATA1_Mask
#define FLASH_OBR_DATA1_0                     (((uint32_t)0x1 << FLASH_OBR_DATA1_Pos))
#define FLASH_OBR_DATA1_1                     (((uint32_t)0x2 << FLASH_OBR_DATA1_Pos))
#define FLASH_OBR_DATA1_2                     (((uint32_t)0x4 << FLASH_OBR_DATA1_Pos))
#define FLASH_OBR_DATA1_3                     (((uint32_t)0x8 << FLASH_OBR_DATA1_Pos))
#define FLASH_OBR_DATA1_4                     (((uint32_t)0x10 << FLASH_OBR_DATA1_Pos))
#define FLASH_OBR_DATA1_5                     (((uint32_t)0x20 << FLASH_OBR_DATA1_Pos))
#define FLASH_OBR_DATA1_6                     (((uint32_t)0x40 << FLASH_OBR_DATA1_Pos))
#define FLASH_OBR_DATA1_7                     (((uint32_t)0x80 << FLASH_OBR_DATA1_Pos))
#define FLASH_OBR_DATA0_Pos                   ((uint32_t)16)                    /* User data */
#define FLASH_OBR_DATA0_Mask                  (((uint32_t)0xFF) << 16)
#define FLASH_OBR_DATA0                       FLASH_OBR_DATA0_Mask
#define FLASH_OBR_DATA0_0                     (((uint32_t)0x1 << FLASH_OBR_DATA0_Pos))
#define FLASH_OBR_DATA0_1                     (((uint32_t)0x2 << FLASH_OBR_DATA0_Pos))
#define FLASH_OBR_DATA0_2                     (((uint32_t)0x4 << FLASH_OBR_DATA0_Pos))
#define FLASH_OBR_DATA0_3                     (((uint32_t)0x8 << FLASH_OBR_DATA0_Pos))
#define FLASH_OBR_DATA0_4                     (((uint32_t)0x10 << FLASH_OBR_DATA0_Pos))
#define FLASH_OBR_DATA0_5                     (((uint32_t)0x20 << FLASH_OBR_DATA0_Pos))
#define FLASH_OBR_DATA0_6                     (((uint32_t)0x40 << FLASH_OBR_DATA0_Pos))
#define FLASH_OBR_DATA0_7                     (((uint32_t)0x80 << FLASH_OBR_DATA0_Pos))
#define FLASH_OBR_BOOT_SEL_Pos                ((uint32_t)15)                    /* Boot Select */
#define FLASH_OBR_BOOT_SEL_Mask               (((uint32_t)0x01) << 15)
#define FLASH_OBR_BOOT_SEL                    FLASH_OBR_BOOT_SEL_Mask
#define FLASH_OBR_nBOOT1_Pos                  ((uint32_t)12)                    /* BOOT1 reverse bit */
#define FLASH_OBR_nBOOT1_Mask                 (((uint32_t)0x01) << 12)
#define FLASH_OBR_nBOOT1                      FLASH_OBR_nBOOT1_Mask
#define FLASH_OBR_nBOOT0_Pos                  ((uint32_t)11)                    /* BOOT0 reverse bit */
#define FLASH_OBR_nBOOT0_Mask                 (((uint32_t)0x01) << 11)
#define FLASH_OBR_nBOOT0                      FLASH_OBR_nBOOT0_Mask
#define FLASH_OBR_nRST_STDBY_Pos              ((uint32_t)10)                    /* Generate a reset when entering Standby mode */
#define FLASH_OBR_nRST_STDBY_Mask             (((uint32_t)0x01) << 10)
#define FLASH_OBR_nRST_STDBY                  FLASH_OBR_nRST_STDBY_Mask
#define FLASH_OBR_nRST_STOP_Pos               ((uint32_t)9)                     /* Generate a reset when entering Stop mode */
#define FLASH_OBR_nRST_STOP_Mask              (((uint32_t)0x01) << 9)
#define FLASH_OBR_nRST_STOP                   FLASH_OBR_nRST_STOP_Mask
#define FLASH_OBR_WDG_SW_Pos                  ((uint32_t)8)                     /* Hardware or software watchdog selection */
#define FLASH_OBR_WDG_SW_Mask                 (((uint32_t)0x01) << 8)
#define FLASH_OBR_WDG_SW                      FLASH_OBR_WDG_SW_Mask
#define FLASH_OBR_RDPRT_Pos                   ((uint32_t)1)                     /* Read protection level status */
#define FLASH_OBR_RDPRT_Mask                  (((uint32_t)0x03) << 1)
#define FLASH_OBR_RDPRT                       FLASH_OBR_RDPRT_Mask
#define FLASH_OBR_RDPRT_0                     (((uint32_t)0x1 << FLASH_OBR_RDPRT_Pos))
#define FLASH_OBR_RDPRT_1                     (((uint32_t)0x2 << FLASH_OBR_RDPRT_Pos))
#define FLASH_OBR_OPTERR_Pos                  ((uint32_t)0)                     /* Option byte error */
#define FLASH_OBR_OPTERR_Mask                 (((uint32_t)0x01) << 0)
#define FLASH_OBR_OPTERR                      FLASH_OBR_OPTERR_Mask

/************************************ FLASH->WRPR  **************************************/
#define FLASH_WRPR_WRP_Pos                    ((uint32_t)0)                     /* Write protection */
#define FLASH_WRPR_WRP_Mask                   (((uint32_t)0xFFFFFFFF) << 0)
#define FLASH_WRPR_WRP                        FLASH_WRPR_WRP_Mask

/************************************ FLASH->OBR2  **************************************/
#define FLASH_OBR2_BOR_LEVEL_Pos              ((uint32_t)0)                     /* Brownout reset threshold level */
#define FLASH_OBR2_BOR_LEVEL_Mask             (((uint32_t)0xFF) << 0)
#define FLASH_OBR2_BOR_LEVEL                  FLASH_OBR2_BOR_LEVEL_Mask
#define FLASH_OBR2_BOR_LEVEL_0                (((uint32_t)0x1))
#define FLASH_OBR2_BOR_LEVEL_1                (((uint32_t)0x2))
#define FLASH_OBR2_BOR_LEVEL_2                (((uint32_t)0x4))
#define FLASH_OBR2_BOR_LEVEL_3                (((uint32_t)0x8))
#define FLASH_OBR2_BOR_LEVEL_4                (((uint32_t)0x10))
#define FLASH_OBR2_BOR_LEVEL_5                (((uint32_t)0x20))
#define FLASH_OBR2_BOR_LEVEL_6                (((uint32_t)0x40))
#define FLASH_OBR2_BOR_LEVEL_7                (((uint32_t)0x80))

/************************************* FLASH->ECR  **************************************/
#define FLASH_ECR_LPRDE_Pos                   ((uint32_t)8)                     /* Low power read enable */
#define FLASH_ECR_LPRDE_Mask                  (((uint32_t)0x01) << 8)
#define FLASH_ECR_LPRDE                       FLASH_ECR_LPRDE_Mask
#define FLASH_ECR_PREEMPTDIS_Pos              ((uint32_t)4)                     /* Prefetch preemption */
#define FLASH_ECR_PREEMPTDIS_Mask             (((uint32_t)0x01) << 4)
#define FLASH_ECR_PREEMPTDIS                  FLASH_ECR_PREEMPTDIS_Mask
#define FLASH_ECR_HPER_Pos                    ((uint32_t)0)                     /* Half-page erase */
#define FLASH_ECR_HPER_Mask                   (((uint32_t)0x01) << 0)
#define FLASH_ECR_HPER                        FLASH_ECR_HPER_Mask

/********************************** FLASH->ENCRY_CTL  ***********************************/
#define FLASH_ENCRY_CTL_ENCRY_EN_Pos          ((uint32_t)0)                     /* Encryption enable */
#define FLASH_ENCRY_CTL_ENCRY_EN_Mask         (((uint32_t)0x01) << 0)
#define FLASH_ENCRY_CTL_ENCRY_EN              FLASH_ENCRY_CTL_ENCRY_EN_Mask

/********************************** FLASH->DECRY_CTL  ***********************************/
#define FLASH_DECRY_CTL_DECRY_EN_Pos          ((uint32_t)0)                     /* Decryption enable */
#define FLASH_DECRY_CTL_DECRY_EN_Mask         (((uint32_t)0x01) << 0)
#define FLASH_DECRY_CTL_DECRY_EN              FLASH_DECRY_CTL_DECRY_EN_Mask

/************************************ FLASH->UKEY1  *************************************/
#define FLASH_UKEY1_UKEY_Pos                  ((uint32_t)0)                     /* Low 32 bits for Flash data encryption */
#define FLASH_UKEY1_UKEY_Mask                 (((uint32_t)0xFFFFFFFF) << 0)
#define FLASH_UKEY1_UKEY                      FLASH_UKEY1_UKEY_Mask

/************************************ FLASH->UKEY2  *************************************/
#define FLASH_UKEY2_UKEY_Pos                  ((uint32_t)0)                     /* High 32 bits for Flash data encryption */
#define FLASH_UKEY2_UKEY_Mask                 (((uint32_t)0xFFFFFFFF) << 0)
#define FLASH_UKEY2_UKEY                      FLASH_UKEY2_UKEY_Mask

/******************************* FLASH->INT_VEC_OFFSET  *********************************/
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_Pos  ((uint32_t)0)                  /* Interrupts vector offset */
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_Mask  (((uint32_t)0x7FFF) << 0)
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET   FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_Mask
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_0  (((uint32_t)0x1))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_1  (((uint32_t)0x2))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_2  (((uint32_t)0x4))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_3  (((uint32_t)0x8))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_4  (((uint32_t)0x10))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_5  (((uint32_t)0x20))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_6  (((uint32_t)0x40))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_7  (((uint32_t)0x80))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_8  (((uint32_t)0x100))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_9  (((uint32_t)0x200))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_10  (((uint32_t)0x400))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_11  (((uint32_t)0x800))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_12  (((uint32_t)0x1000))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_13  (((uint32_t)0x2000))
#define FLASH_INT_VEC_OFFSET_INT_VEC_OFFSET_14  (((uint32_t)0x4000))

/*****************************************************************************************
*                                     Peripheral CRC                                     *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t DR;                     /* DR */
    __IO uint32_t IDR;                    /* IDR */
    __IO uint32_t CR;                     /* CR */
    uint16_t RESERVED1[2];
    __IO uint32_t INIT;                   /* INIT */
} CRC_TypeDef;

/************************************** CRC->DR  ****************************************/
#define CRC_DR_DR_Pos                         ((uint32_t)0)                     /* Data register */
#define CRC_DR_DR_Mask                        (((uint32_t)0xFFFFFFFF) << 0)
#define CRC_DR_DR                             CRC_DR_DR_Mask

/************************************** CRC->IDR  ***************************************/
#define CRC_IDR_IDR_Pos                       ((uint32_t)0)                     /* General purpose 8-bit data register */
#define CRC_IDR_IDR_Mask                      (((uint32_t)0xFF) << 0)
#define CRC_IDR_IDR                           CRC_IDR_IDR_Mask
#define CRC_IDR_IDR_0                         (((uint32_t)0x1))
#define CRC_IDR_IDR_1                         (((uint32_t)0x2))
#define CRC_IDR_IDR_2                         (((uint32_t)0x4))
#define CRC_IDR_IDR_3                         (((uint32_t)0x8))
#define CRC_IDR_IDR_4                         (((uint32_t)0x10))
#define CRC_IDR_IDR_5                         (((uint32_t)0x20))
#define CRC_IDR_IDR_6                         (((uint32_t)0x40))
#define CRC_IDR_IDR_7                         (((uint32_t)0x80))

/************************************** CRC->CR  ****************************************/
#define CRC_CR_REV_OUT_Pos                    ((uint32_t)7)                     /* Output data revert */
#define CRC_CR_REV_OUT_Mask                   (((uint32_t)0x01) << 7)
#define CRC_CR_REV_OUT                        CRC_CR_REV_OUT_Mask
#define CRC_CR_REV_IN_Pos                     ((uint32_t)5)                     /* Input data revert */
#define CRC_CR_REV_IN_Mask                    (((uint32_t)0x03) << 5)
#define CRC_CR_REV_IN                         CRC_CR_REV_IN_Mask
#define CRC_CR_REV_IN_0                       (((uint32_t)0x1 << CRC_CR_REV_IN_Pos))
#define CRC_CR_REV_IN_1                       (((uint32_t)0x2 << CRC_CR_REV_IN_Pos))
#define CRC_CR_RESET_Pos                      ((uint32_t)0)                     /* Reset control */
#define CRC_CR_RESET_Mask                     (((uint32_t)0x01) << 0)
#define CRC_CR_RESET                          CRC_CR_RESET_Mask

/************************************* CRC->INIT  ***************************************/
#define CRC_INIT_CRC_INIT_Pos                 ((uint32_t)0)                     /* CRC initiate value */
#define CRC_INIT_CRC_INIT_Mask                (((uint32_t)0xFFFFFFFF) << 0)
#define CRC_INIT_CRC_INIT                     CRC_INIT_CRC_INIT_Mask

/*****************************************************************************************
*                                     Peripheral PWR                                     *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t CR;                     /* CR */
    __IO uint32_t CSR;                    /* CSR */
    uint16_t RESERVED1[22];
    __IO uint32_t WUP_POL;                /* WUP_POL */
    uint16_t RESERVED2[2];
    __IO uint32_t PORPDR_CFG;             /* PORPDR_CFG */
} PWR_TypeDef;

/************************************** PWR->CR  ****************************************/
#define PWR_CR_LPRUN_Pos                      ((uint32_t)14)                    /* Low-power run mode */
#define PWR_CR_LPRUN_Mask                     (((uint32_t)0x01) << 14)
#define PWR_CR_LPRUN                          PWR_CR_LPRUN_Mask
#define PWR_CR_VOS_Pos                        ((uint32_t)11)                    /* Voltage scaling range selection */
#define PWR_CR_VOS_Mask                       (((uint32_t)0x03) << 11)
#define PWR_CR_VOS                            PWR_CR_VOS_Mask
#define PWR_CR_VOS_0                          (((uint32_t)0x1 << PWR_CR_VOS_Pos))
#define PWR_CR_VOS_1                          (((uint32_t)0x2 << PWR_CR_VOS_Pos))
#define PWR_CR_FWU_Pos                        ((uint32_t)10)                    /* Fast wakeup */
#define PWR_CR_FWU_Mask                       (((uint32_t)0x01) << 10)
#define PWR_CR_FWU                            PWR_CR_FWU_Mask
#define PWR_CR_ULP_Pos                        ((uint32_t)9)                     /* Ultra-low-power mode */
#define PWR_CR_ULP_Mask                       (((uint32_t)0x01) << 9)
#define PWR_CR_ULP                            PWR_CR_ULP_Mask
#define PWR_CR_DBP_Pos                        ((uint32_t)8)                     /* Disable backup write protection */
#define PWR_CR_DBP_Mask                       (((uint32_t)0x01) << 8)
#define PWR_CR_DBP                            PWR_CR_DBP_Mask
#define PWR_CR_PLS_Pos                        ((uint32_t)5)                     /* PVD level selection */
#define PWR_CR_PLS_Mask                       (((uint32_t)0x07) << 5)
#define PWR_CR_PLS                            PWR_CR_PLS_Mask
#define PWR_CR_PLS_0                          (((uint32_t)0x1 << PWR_CR_PLS_Pos))
#define PWR_CR_PLS_1                          (((uint32_t)0x2 << PWR_CR_PLS_Pos))
#define PWR_CR_PLS_2                          (((uint32_t)0x4 << PWR_CR_PLS_Pos))
#define PWR_CR_PVDE_Pos                       ((uint32_t)4)                     /* Power voltage detector enable */
#define PWR_CR_PVDE_Mask                      (((uint32_t)0x01) << 4)
#define PWR_CR_PVDE                           PWR_CR_PVDE_Mask
#define PWR_CR_CSBF_Pos                       ((uint32_t)3)                     /* Clear standby flag */
#define PWR_CR_CSBF_Mask                      (((uint32_t)0x01) << 3)
#define PWR_CR_CSBF                           PWR_CR_CSBF_Mask
#define PWR_CR_CWUF_Pos                       ((uint32_t)2)                     /* Clear wakeup flag */
#define PWR_CR_CWUF_Mask                      (((uint32_t)0x01) << 2)
#define PWR_CR_CWUF                           PWR_CR_CWUF_Mask
#define PWR_CR_PDDS_Pos                       ((uint32_t)1)                     /* Power-down deepsleep */
#define PWR_CR_PDDS_Mask                      (((uint32_t)0x01) << 1)
#define PWR_CR_PDDS                           PWR_CR_PDDS_Mask
#define PWR_CR_LPSDSR_Pos                     ((uint32_t)0)                     /* Low-power deepsleep/Sleep/Low-power run */
#define PWR_CR_LPSDSR_Mask                    (((uint32_t)0x01) << 0)
#define PWR_CR_LPSDSR                         PWR_CR_LPSDSR_Mask

/************************************** PWR->CSR  ***************************************/
#define PWR_CSR_EWUP2_Pos                     ((uint32_t)9)                     /* Enable WKUP pin2 */
#define PWR_CSR_EWUP2_Mask                    (((uint32_t)0x01) << 9)
#define PWR_CSR_EWUP2                         PWR_CSR_EWUP2_Mask
#define PWR_CSR_EWUP1_Pos                     ((uint32_t)8)                     /* Enable WKUP pin1 */
#define PWR_CSR_EWUP1_Mask                    (((uint32_t)0x01) << 8)
#define PWR_CSR_EWUP1                         PWR_CSR_EWUP1_Mask
#define PWR_CSR_REGLPF_Pos                    ((uint32_t)5)                     /* Regulator low power flag */
#define PWR_CSR_REGLPF_Mask                   (((uint32_t)0x01) << 5)
#define PWR_CSR_REGLPF                        PWR_CSR_REGLPF_Mask
#define PWR_CSR_VOSF_Pos                      ((uint32_t)4)                     /* Voltage scaling select flag */
#define PWR_CSR_VOSF_Mask                     (((uint32_t)0x01) << 4)
#define PWR_CSR_VOSF                          PWR_CSR_VOSF_Mask
#define PWR_CSR_VREFINTRDYF_Pos               ((uint32_t)3)                     /* Internal voltage reference ready flag */
#define PWR_CSR_VREFINTRDYF_Mask              (((uint32_t)0x01) << 3)
#define PWR_CSR_VREFINTRDYF                   PWR_CSR_VREFINTRDYF_Mask
#define PWR_CSR_PVDO_Pos                      ((uint32_t)2)                     /* PVD output */
#define PWR_CSR_PVDO_Mask                     (((uint32_t)0x01) << 2)
#define PWR_CSR_PVDO                          PWR_CSR_PVDO_Mask
#define PWR_CSR_SBF_Pos                       ((uint32_t)1)                     /* Standby flag */
#define PWR_CSR_SBF_Mask                      (((uint32_t)0x01) << 1)
#define PWR_CSR_SBF                           PWR_CSR_SBF_Mask
#define PWR_CSR_WUF_Pos                       ((uint32_t)0)                     /* Wakeup flag */
#define PWR_CSR_WUF_Mask                      (((uint32_t)0x01) << 0)
#define PWR_CSR_WUF                           PWR_CSR_WUF_Mask

/************************************ PWR->WUP_POL  *************************************/
#define PWR_WUP_POL_WUPOL2_Pos                ((uint32_t)1)                     /* Wakeup pin2 polarity selection */
#define PWR_WUP_POL_WUPOL2_Mask               (((uint32_t)0x01) << 1)
#define PWR_WUP_POL_WUPOL2                    PWR_WUP_POL_WUPOL2_Mask
#define PWR_WUP_POL_WUPOL1_Pos                ((uint32_t)0)                     /* Wakeup pin1 polarity selection */
#define PWR_WUP_POL_WUPOL1_Mask               (((uint32_t)0x01) << 0)
#define PWR_WUP_POL_WUPOL1                    PWR_WUP_POL_WUPOL1_Mask

/********************************** PWR->PORPDR_CFG  ************************************/
#define PWR_PORPDR_CFG_KEY_Pos                ((uint32_t)8)                     /* Key to unlock PDR_PD */
#define PWR_PORPDR_CFG_KEY_Mask               (((uint32_t)0xFF) << 8)
#define PWR_PORPDR_CFG_KEY                    PWR_PORPDR_CFG_KEY_Mask
#define PWR_PORPDR_CFG_KEY_0                  (((uint32_t)0x1 << PWR_PORPDR_CFG_KEY_Pos))
#define PWR_PORPDR_CFG_KEY_1                  (((uint32_t)0x2 << PWR_PORPDR_CFG_KEY_Pos))
#define PWR_PORPDR_CFG_KEY_2                  (((uint32_t)0x4 << PWR_PORPDR_CFG_KEY_Pos))
#define PWR_PORPDR_CFG_KEY_3                  (((uint32_t)0x8 << PWR_PORPDR_CFG_KEY_Pos))
#define PWR_PORPDR_CFG_KEY_4                  (((uint32_t)0x10 << PWR_PORPDR_CFG_KEY_Pos))
#define PWR_PORPDR_CFG_KEY_5                  (((uint32_t)0x20 << PWR_PORPDR_CFG_KEY_Pos))
#define PWR_PORPDR_CFG_KEY_6                  (((uint32_t)0x40 << PWR_PORPDR_CFG_KEY_Pos))
#define PWR_PORPDR_CFG_KEY_7                  (((uint32_t)0x80 << PWR_PORPDR_CFG_KEY_Pos))
#define PWR_PORPDR_CFG_PDR_PD_Pos             ((uint32_t)0)                     /* PDR power-down in Standby/Shutdown mode */
#define PWR_PORPDR_CFG_PDR_PD_Mask            (((uint32_t)0x01) << 0)
#define PWR_PORPDR_CFG_PDR_PD                 PWR_PORPDR_CFG_PDR_PD_Mask

/*****************************************************************************************
*                                     Peripheral RCC                                     *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t CR;                     /* CR */
    __IO uint32_t CFGR;                   /* CFGR */
    __IO uint32_t CIR;                    /* CIR */
    __IO uint32_t APB2RSTR;               /* APB2RSTR */
    __IO uint32_t APB1RSTR;               /* APB1RSTR */
    __IO uint32_t AHBENR;                 /* AHBENR */
    __IO uint32_t APB2ENR;                /* APB2ENR */
    __IO uint32_t APB1ENR;                /* APB1ENR */
    __IO uint32_t BDCR;                   /* BDCR */
    __IO uint32_t CSR;                    /* CSR */
    __IO uint32_t AHBRSTR;                /* AHBRSTR */
    __IO uint32_t CFGR2;                  /* CFGR2 */
    __IO uint32_t CFGR3;                  /* CFGR3 */
    __IO uint32_t CR2;                    /* CR2 */
    uint16_t RESERVED1[84];
    __IO uint32_t HSECTL;                 /* HSECTL */
    __IO uint32_t PLLCTL;                 /* PLLCTL */
    __IO uint32_t CFGR4;                  /* CFGR4 */
} RCC_TypeDef;

/************************************** RCC->CR  ****************************************/
#define RCC_CR_PLLRDY_Pos                     ((uint32_t)25)                    /* PLL clock ready flag */
#define RCC_CR_PLLRDY_Mask                    (((uint32_t)0x01) << 25)
#define RCC_CR_PLLRDY                         RCC_CR_PLLRDY_Mask
#define RCC_CR_PLLON_Pos                      ((uint32_t)24)                    /* PLL enable */
#define RCC_CR_PLLON_Mask                     (((uint32_t)0x01) << 24)
#define RCC_CR_PLLON                          RCC_CR_PLLON_Mask
#define RCC_CR_CSSON_Pos                      ((uint32_t)19)                    /* Clock security system enable */
#define RCC_CR_CSSON_Mask                     (((uint32_t)0x01) << 19)
#define RCC_CR_CSSON                          RCC_CR_CSSON_Mask
#define RCC_CR_HSEBYP_Pos                     ((uint32_t)18)                    /* HSE crystal oscillator bypass */
#define RCC_CR_HSEBYP_Mask                    (((uint32_t)0x01) << 18)
#define RCC_CR_HSEBYP                         RCC_CR_HSEBYP_Mask
#define RCC_CR_HSERDY_Pos                     ((uint32_t)17)                    /* HSE clock ready flag */
#define RCC_CR_HSERDY_Mask                    (((uint32_t)0x01) << 17)
#define RCC_CR_HSERDY                         RCC_CR_HSERDY_Mask
#define RCC_CR_HSEON_Pos                      ((uint32_t)16)                    /* HSE clock enable */
#define RCC_CR_HSEON_Mask                     (((uint32_t)0x01) << 16)
#define RCC_CR_HSEON                          RCC_CR_HSEON_Mask
#define RCC_CR_HSICTRIM_Pos                   ((uint32_t)8)                     /* HSI clock calibration */
#define RCC_CR_HSICTRIM_Mask                  (((uint32_t)0x3F) << 8)
#define RCC_CR_HSICTRIM                       RCC_CR_HSICTRIM_Mask
#define RCC_CR_HSICTRIM_0                     (((uint32_t)0x1 << RCC_CR_HSICTRIM_Pos))
#define RCC_CR_HSICTRIM_1                     (((uint32_t)0x2 << RCC_CR_HSICTRIM_Pos))
#define RCC_CR_HSICTRIM_2                     (((uint32_t)0x4 << RCC_CR_HSICTRIM_Pos))
#define RCC_CR_HSICTRIM_3                     (((uint32_t)0x8 << RCC_CR_HSICTRIM_Pos))
#define RCC_CR_HSICTRIM_4                     (((uint32_t)0x10 << RCC_CR_HSICTRIM_Pos))
#define RCC_CR_HSICTRIM_5                     (((uint32_t)0x20 << RCC_CR_HSICTRIM_Pos))
#define RCC_CR_HSIFTRIM_Pos                   ((uint32_t)2)                     /* HSI clock trimming */
#define RCC_CR_HSIFTRIM_Mask                  (((uint32_t)0x3F) << 2)
#define RCC_CR_HSIFTRIM                       RCC_CR_HSIFTRIM_Mask
#define RCC_CR_HSIFTRIM_0                     (((uint32_t)0x1 << RCC_CR_HSIFTRIM_Pos))
#define RCC_CR_HSIFTRIM_1                     (((uint32_t)0x2 << RCC_CR_HSIFTRIM_Pos))
#define RCC_CR_HSIFTRIM_2                     (((uint32_t)0x4 << RCC_CR_HSIFTRIM_Pos))
#define RCC_CR_HSIFTRIM_3                     (((uint32_t)0x8 << RCC_CR_HSIFTRIM_Pos))
#define RCC_CR_HSIFTRIM_4                     (((uint32_t)0x10 << RCC_CR_HSIFTRIM_Pos))
#define RCC_CR_HSIFTRIM_5                     (((uint32_t)0x20 << RCC_CR_HSIFTRIM_Pos))
#define RCC_CR_HSIRDY_Pos                     ((uint32_t)1)                     /* HSI clock ready flag */
#define RCC_CR_HSIRDY_Mask                    (((uint32_t)0x01) << 1)
#define RCC_CR_HSIRDY                         RCC_CR_HSIRDY_Mask
#define RCC_CR_HSION_Pos                      ((uint32_t)0)                     /* HSI clock enable */
#define RCC_CR_HSION_Mask                     (((uint32_t)0x01) << 0)
#define RCC_CR_HSION                          RCC_CR_HSION_Mask

/************************************* RCC->CFGR  ***************************************/
#define RCC_CFGR_MCOPRE_Pos                   ((uint32_t)28)                    /* Microcontroller clock output prescaler */
#define RCC_CFGR_MCOPRE_Mask                  (((uint32_t)0x07) << 28)
#define RCC_CFGR_MCOPRE                       RCC_CFGR_MCOPRE_Mask
#define RCC_CFGR_MCOPRE_0                     (((uint32_t)0x1 << RCC_CFGR_MCOPRE_Pos))
#define RCC_CFGR_MCOPRE_1                     (((uint32_t)0x2 << RCC_CFGR_MCOPRE_Pos))
#define RCC_CFGR_MCOPRE_2                     (((uint32_t)0x4 << RCC_CFGR_MCOPRE_Pos))
#define RCC_CFGR_MCO_Pos                      ((uint32_t)24)                    /* Microcontroller clock output */
#define RCC_CFGR_MCO_Mask                     (((uint32_t)0x0F) << 24)
#define RCC_CFGR_MCO                          RCC_CFGR_MCO_Mask
#define RCC_CFGR_MCO_0                        (((uint32_t)0x1 << RCC_CFGR_MCO_Pos))
#define RCC_CFGR_MCO_1                        (((uint32_t)0x2 << RCC_CFGR_MCO_Pos))
#define RCC_CFGR_MCO_2                        (((uint32_t)0x4 << RCC_CFGR_MCO_Pos))
#define RCC_CFGR_MCO_3                        (((uint32_t)0x8 << RCC_CFGR_MCO_Pos))
#define RCC_CFGR_PLLMUL_Pos                   ((uint32_t)18)                    /* PLL multiplication factor */
#define RCC_CFGR_PLLMUL_Mask                  (((uint32_t)0x0F) << 18)
#define RCC_CFGR_PLLMUL                       RCC_CFGR_PLLMUL_Mask
#define RCC_CFGR_PLLMUL_0                     (((uint32_t)0x1 << RCC_CFGR_PLLMUL_Pos))
#define RCC_CFGR_PLLMUL_1                     (((uint32_t)0x2 << RCC_CFGR_PLLMUL_Pos))
#define RCC_CFGR_PLLMUL_2                     (((uint32_t)0x4 << RCC_CFGR_PLLMUL_Pos))
#define RCC_CFGR_PLLMUL_3                     (((uint32_t)0x8 << RCC_CFGR_PLLMUL_Pos))
#define RCC_CFGR_PLLXTPRE_Pos                 ((uint32_t)17)                    /* HSE divider for PLL input clock */
#define RCC_CFGR_PLLXTPRE_Mask                (((uint32_t)0x01) << 17)
#define RCC_CFGR_PLLXTPRE                     RCC_CFGR_PLLXTPRE_Mask
#define RCC_CFGR_PLLSRC_Pos                   ((uint32_t)16)                    /* PLL input clock source */
#define RCC_CFGR_PLLSRC_Mask                  (((uint32_t)0x01) << 16)
#define RCC_CFGR_PLLSRC                       RCC_CFGR_PLLSRC_Mask
#define RCC_CFGR_STOPWUCK_Pos                 ((uint32_t)14)                    /* Stop wake up SYSCLK selection */
#define RCC_CFGR_STOPWUCK_Mask                (((uint32_t)0x01) << 14)
#define RCC_CFGR_STOPWUCK                     RCC_CFGR_STOPWUCK_Mask
#define RCC_CFGR_PPRE_Pos                     ((uint32_t)8)                     /* PCLK prescaler */
#define RCC_CFGR_PPRE_Mask                    (((uint32_t)0x07) << 8)
#define RCC_CFGR_PPRE                         RCC_CFGR_PPRE_Mask
#define RCC_CFGR_PPRE_0                       (((uint32_t)0x1 << RCC_CFGR_PPRE_Pos))
#define RCC_CFGR_PPRE_1                       (((uint32_t)0x2 << RCC_CFGR_PPRE_Pos))
#define RCC_CFGR_PPRE_2                       (((uint32_t)0x4 << RCC_CFGR_PPRE_Pos))
#define RCC_CFGR_HPRE_Pos                     ((uint32_t)4)                     /* HCLK prescaler factor */
#define RCC_CFGR_HPRE_Mask                    (((uint32_t)0x0F) << 4)
#define RCC_CFGR_HPRE                         RCC_CFGR_HPRE_Mask
#define RCC_CFGR_HPRE_0                       (((uint32_t)0x1 << RCC_CFGR_HPRE_Pos))
#define RCC_CFGR_HPRE_1                       (((uint32_t)0x2 << RCC_CFGR_HPRE_Pos))
#define RCC_CFGR_HPRE_2                       (((uint32_t)0x4 << RCC_CFGR_HPRE_Pos))
#define RCC_CFGR_HPRE_3                       (((uint32_t)0x8 << RCC_CFGR_HPRE_Pos))
#define RCC_CFGR_SWS_Pos                      ((uint32_t)2)                     /* System clock switch status */
#define RCC_CFGR_SWS_Mask                     (((uint32_t)0x03) << 2)
#define RCC_CFGR_SWS                          RCC_CFGR_SWS_Mask
#define RCC_CFGR_SWS_0                        (((uint32_t)0x1 << RCC_CFGR_SWS_Pos))
#define RCC_CFGR_SWS_1                        (((uint32_t)0x2 << RCC_CFGR_SWS_Pos))
#define RCC_CFGR_SW_Pos                       ((uint32_t)0)                     /* System clock switch */
#define RCC_CFGR_SW_Mask                      (((uint32_t)0x03) << 0)
#define RCC_CFGR_SW                           RCC_CFGR_SW_Mask
#define RCC_CFGR_SW_0                         (((uint32_t)0x1))
#define RCC_CFGR_SW_1                         (((uint32_t)0x2))

/************************************** RCC->CIR  ***************************************/
#define RCC_CIR_CSSLSEC_Pos                   ((uint32_t)31)                    /* Clock security system LSE interrupt flag clear */
#define RCC_CIR_CSSLSEC_Mask                  (((uint32_t)0x01) << 31)
#define RCC_CIR_CSSLSEC                       RCC_CIR_CSSLSEC_Mask
#define RCC_CIR_CSSLSEF_Pos                   ((uint32_t)30)                    /* Clock security system fail */
#define RCC_CIR_CSSLSEF_Mask                  (((uint32_t)0x01) << 30)
#define RCC_CIR_CSSLSEF                       RCC_CIR_CSSLSEF_Mask
#define RCC_CIR_CSSHSEC_Pos                   ((uint32_t)23)                    /* Clock security system HSE interrupt flag clear */
#define RCC_CIR_CSSHSEC_Mask                  (((uint32_t)0x01) << 23)
#define RCC_CIR_CSSHSEC                       RCC_CIR_CSSHSEC_Mask
#define RCC_CIR_MSIRDYC_Pos                   ((uint32_t)22)                    /* MSI ready interrupt clear */
#define RCC_CIR_MSIRDYC_Mask                  (((uint32_t)0x01) << 22)
#define RCC_CIR_MSIRDYC                       RCC_CIR_MSIRDYC_Mask
#define RCC_CIR_HSI16RDYC_Pos                 ((uint32_t)21)                    /* HSI16 ready Interrupt clear */
#define RCC_CIR_HSI16RDYC_Mask                (((uint32_t)0x01) << 21)
#define RCC_CIR_HSI16RDYC                     RCC_CIR_HSI16RDYC_Mask
#define RCC_CIR_PLLRDYC_Pos                   ((uint32_t)20)                    /* PLL ready interrupt clear */
#define RCC_CIR_PLLRDYC_Mask                  (((uint32_t)0x01) << 20)
#define RCC_CIR_PLLRDYC                       RCC_CIR_PLLRDYC_Mask
#define RCC_CIR_HSERDYC_Pos                   ((uint32_t)19)                    /* HSE ready interrupt clear */
#define RCC_CIR_HSERDYC_Mask                  (((uint32_t)0x01) << 19)
#define RCC_CIR_HSERDYC                       RCC_CIR_HSERDYC_Mask
#define RCC_CIR_HSIRDYC_Pos                   ((uint32_t)18)                    /* HSI ready interrupt clear */
#define RCC_CIR_HSIRDYC_Mask                  (((uint32_t)0x01) << 18)
#define RCC_CIR_HSIRDYC                       RCC_CIR_HSIRDYC_Mask
#define RCC_CIR_LSERDYC_Pos                   ((uint32_t)17)                    /* LSE ready interrupt clear */
#define RCC_CIR_LSERDYC_Mask                  (((uint32_t)0x01) << 17)
#define RCC_CIR_LSERDYC                       RCC_CIR_LSERDYC_Mask
#define RCC_CIR_LSIRDYC_Pos                   ((uint32_t)16)                    /* LSI ready interrupt clear */
#define RCC_CIR_LSIRDYC_Mask                  (((uint32_t)0x01) << 16)
#define RCC_CIR_LSIRDYC                       RCC_CIR_LSIRDYC_Mask
#define RCC_CIR_LSEFAILIE_Pos                 ((uint32_t)15)                    /* LSE fail interrupt enable */
#define RCC_CIR_LSEFAILIE_Mask                (((uint32_t)0x01) << 15)
#define RCC_CIR_LSEFAILIE                     RCC_CIR_LSEFAILIE_Mask
#define RCC_CIR_MSIRDYIE_Pos                  ((uint32_t)14)                    /* MSI ready interrupt enable */
#define RCC_CIR_MSIRDYIE_Mask                 (((uint32_t)0x01) << 14)
#define RCC_CIR_MSIRDYIE                      RCC_CIR_MSIRDYIE_Mask
#define RCC_CIR_HSI16RDYIE_Pos                ((uint32_t)13)                    /* HSI16 ready interrupt enable */
#define RCC_CIR_HSI16RDYIE_Mask               (((uint32_t)0x01) << 13)
#define RCC_CIR_HSI16RDYIE                    RCC_CIR_HSI16RDYIE_Mask
#define RCC_CIR_PLLRDYIE_Pos                  ((uint32_t)12)                    /* PLL ready interrupt enable */
#define RCC_CIR_PLLRDYIE_Mask                 (((uint32_t)0x01) << 12)
#define RCC_CIR_PLLRDYIE                      RCC_CIR_PLLRDYIE_Mask
#define RCC_CIR_HSERDYIE_Pos                  ((uint32_t)11)                    /* HSE ready interrupt enable */
#define RCC_CIR_HSERDYIE_Mask                 (((uint32_t)0x01) << 11)
#define RCC_CIR_HSERDYIE                      RCC_CIR_HSERDYIE_Mask
#define RCC_CIR_HSIRDYIE_Pos                  ((uint32_t)10)                    /* HSI ready interrupt enable */
#define RCC_CIR_HSIRDYIE_Mask                 (((uint32_t)0x01) << 10)
#define RCC_CIR_HSIRDYIE                      RCC_CIR_HSIRDYIE_Mask
#define RCC_CIR_LSERDYIE_Pos                  ((uint32_t)9)                     /* LSE ready interrupt enable */
#define RCC_CIR_LSERDYIE_Mask                 (((uint32_t)0x01) << 9)
#define RCC_CIR_LSERDYIE                      RCC_CIR_LSERDYIE_Mask
#define RCC_CIR_LSIRDYIE_Pos                  ((uint32_t)8)                     /* LSI ready interrupt enable */
#define RCC_CIR_LSIRDYIE_Mask                 (((uint32_t)0x01) << 8)
#define RCC_CIR_LSIRDYIE                      RCC_CIR_LSIRDYIE_Mask
#define RCC_CIR_CSSHSEF_Pos                   ((uint32_t)7)                     /* Clock security system HSE interrupt flag */
#define RCC_CIR_CSSHSEF_Mask                  (((uint32_t)0x01) << 7)
#define RCC_CIR_CSSHSEF                       RCC_CIR_CSSHSEF_Mask
#define RCC_CIR_MSIRDYF_Pos                   ((uint32_t)6)                     /* MSI ready interrupt flag */
#define RCC_CIR_MSIRDYF_Mask                  (((uint32_t)0x01) << 6)
#define RCC_CIR_MSIRDYF                       RCC_CIR_MSIRDYF_Mask
#define RCC_CIR_HSI16RDYF_Pos                 ((uint32_t)5)                     /* HSI16 ready interrupt flag */
#define RCC_CIR_HSI16RDYF_Mask                (((uint32_t)0x01) << 5)
#define RCC_CIR_HSI16RDYF                     RCC_CIR_HSI16RDYF_Mask
#define RCC_CIR_PLLRDYF_Pos                   ((uint32_t)4)                     /* PLL ready interrupt flag */
#define RCC_CIR_PLLRDYF_Mask                  (((uint32_t)0x01) << 4)
#define RCC_CIR_PLLRDYF                       RCC_CIR_PLLRDYF_Mask
#define RCC_CIR_HSERDYF_Pos                   ((uint32_t)3)                     /* HSE ready interrupt flag */
#define RCC_CIR_HSERDYF_Mask                  (((uint32_t)0x01) << 3)
#define RCC_CIR_HSERDYF                       RCC_CIR_HSERDYF_Mask
#define RCC_CIR_HSIRDYF_Pos                   ((uint32_t)2)                     /* HSI ready interrupt flag */
#define RCC_CIR_HSIRDYF_Mask                  (((uint32_t)0x01) << 2)
#define RCC_CIR_HSIRDYF                       RCC_CIR_HSIRDYF_Mask
#define RCC_CIR_LSERDYF_Pos                   ((uint32_t)1)                     /* LSE ready interrupt flag */
#define RCC_CIR_LSERDYF_Mask                  (((uint32_t)0x01) << 1)
#define RCC_CIR_LSERDYF                       RCC_CIR_LSERDYF_Mask
#define RCC_CIR_LSIRDYF_Pos                   ((uint32_t)0)                     /* LSI ready interrupt flag */
#define RCC_CIR_LSIRDYF_Mask                  (((uint32_t)0x01) << 0)
#define RCC_CIR_LSIRDYF                       RCC_CIR_LSIRDYF_Mask

/*********************************** RCC->APB2RSTR  *************************************/
#define RCC_APB2RSTR_COMPRST_Pos              ((uint32_t)28)                    /* Comparator reset */
#define RCC_APB2RSTR_COMPRST_Mask             (((uint32_t)0x01) << 28)
#define RCC_APB2RSTR_COMPRST                  RCC_APB2RSTR_COMPRST_Mask
#define RCC_APB2RSTR_OPAMPRST_Pos             ((uint32_t)27)                    /* OAMP reset */
#define RCC_APB2RSTR_OPAMPRST_Mask            (((uint32_t)0x01) << 27)
#define RCC_APB2RSTR_OPAMPRST                 RCC_APB2RSTR_OPAMPRST_Mask
#define RCC_APB2RSTR_BEEPERRST_Pos            ((uint32_t)25)                    /* BEEPER reset */
#define RCC_APB2RSTR_BEEPERRST_Mask           (((uint32_t)0x01) << 25)
#define RCC_APB2RSTR_BEEPERRST                RCC_APB2RSTR_BEEPERRST_Mask
#define RCC_APB2RSTR_DBGRST_Pos               ((uint32_t)22)                    /* DBG reset */
#define RCC_APB2RSTR_DBGRST_Mask              (((uint32_t)0x01) << 22)
#define RCC_APB2RSTR_DBGRST                   RCC_APB2RSTR_DBGRST_Mask
#define RCC_APB2RSTR_TIM17RST_Pos             ((uint32_t)18)                    /* Reset TIM17 */
#define RCC_APB2RSTR_TIM17RST_Mask            (((uint32_t)0x01) << 18)
#define RCC_APB2RSTR_TIM17RST                 RCC_APB2RSTR_TIM17RST_Mask
#define RCC_APB2RSTR_TIM16RST_Pos             ((uint32_t)17)                    /* Reset TIM16 */
#define RCC_APB2RSTR_TIM16RST_Mask            (((uint32_t)0x01) << 17)
#define RCC_APB2RSTR_TIM16RST                 RCC_APB2RSTR_TIM16RST_Mask
#define RCC_APB2RSTR_TIM15RST_Pos             ((uint32_t)16)                    /* Reset TIM15 */
#define RCC_APB2RSTR_TIM15RST_Mask            (((uint32_t)0x01) << 16)
#define RCC_APB2RSTR_TIM15RST                 RCC_APB2RSTR_TIM15RST_Mask
#define RCC_APB2RSTR_USART1RST_Pos            ((uint32_t)14)                    /* Reset USART1 */
#define RCC_APB2RSTR_USART1RST_Mask           (((uint32_t)0x01) << 14)
#define RCC_APB2RSTR_USART1RST                RCC_APB2RSTR_USART1RST_Mask
#define RCC_APB2RSTR_SPI1RST_Pos              ((uint32_t)12)                    /* Reset SPI1 */
#define RCC_APB2RSTR_SPI1RST_Mask             (((uint32_t)0x01) << 12)
#define RCC_APB2RSTR_SPI1RST                  RCC_APB2RSTR_SPI1RST_Mask
#define RCC_APB2RSTR_TIM1RST_Pos              ((uint32_t)11)                    /* Reset TIM1 */
#define RCC_APB2RSTR_TIM1RST_Mask             (((uint32_t)0x01) << 11)
#define RCC_APB2RSTR_TIM1RST                  RCC_APB2RSTR_TIM1RST_Mask
#define RCC_APB2RSTR_ADC1RST_Pos              ((uint32_t)9)                     /* Reset ADC interface */
#define RCC_APB2RSTR_ADC1RST_Mask             (((uint32_t)0x01) << 9)
#define RCC_APB2RSTR_ADC1RST                  RCC_APB2RSTR_ADC1RST_Mask
#define RCC_APB2RSTR_SYSCFGRST_Pos            ((uint32_t)0)                     /* Reset SYSCFG */
#define RCC_APB2RSTR_SYSCFGRST_Mask           (((uint32_t)0x01) << 0)
#define RCC_APB2RSTR_SYSCFGRST                RCC_APB2RSTR_SYSCFGRST_Mask

/*********************************** RCC->APB1RSTR  *************************************/
#define RCC_APB1RSTR_DACRST_Pos               ((uint32_t)29)                    /* Reset DAC interface */
#define RCC_APB1RSTR_DACRST_Mask              (((uint32_t)0x01) << 29)
#define RCC_APB1RSTR_DACRST                   RCC_APB1RSTR_DACRST_Mask
#define RCC_APB1RSTR_PWRRST_Pos               ((uint32_t)28)                    /* Reset Power interface */
#define RCC_APB1RSTR_PWRRST_Mask              (((uint32_t)0x01) << 28)
#define RCC_APB1RSTR_PWRRST                   RCC_APB1RSTR_PWRRST_Mask
#define RCC_APB1RSTR_CANRST_Pos               ((uint32_t)25)                    /* Reset CAN */
#define RCC_APB1RSTR_CANRST_Mask              (((uint32_t)0x01) << 25)
#define RCC_APB1RSTR_CANRST                   RCC_APB1RSTR_CANRST_Mask
#define RCC_APB1RSTR_LPUART1RST_Pos           ((uint32_t)24)                    /* Reset LPUART1 */
#define RCC_APB1RSTR_LPUART1RST_Mask          (((uint32_t)0x01) << 24)
#define RCC_APB1RSTR_LPUART1RST               RCC_APB1RSTR_LPUART1RST_Mask
#define RCC_APB1RSTR_USBRST_Pos               ((uint32_t)23)                    /* Reset USB */
#define RCC_APB1RSTR_USBRST_Mask              (((uint32_t)0x01) << 23)
#define RCC_APB1RSTR_USBRST                   RCC_APB1RSTR_USBRST_Mask
#define RCC_APB1RSTR_I2C2RST_Pos              ((uint32_t)22)                    /* Reset I2C2 */
#define RCC_APB1RSTR_I2C2RST_Mask             (((uint32_t)0x01) << 22)
#define RCC_APB1RSTR_I2C2RST                  RCC_APB1RSTR_I2C2RST_Mask
#define RCC_APB1RSTR_I2C1RST_Pos              ((uint32_t)21)                    /* Reset I2C1 */
#define RCC_APB1RSTR_I2C1RST_Mask             (((uint32_t)0x01) << 21)
#define RCC_APB1RSTR_I2C1RST                  RCC_APB1RSTR_I2C1RST_Mask
#define RCC_APB1RSTR_UART4RST_Pos             ((uint32_t)19)                    /* Reset UART4 */
#define RCC_APB1RSTR_UART4RST_Mask            (((uint32_t)0x01) << 19)
#define RCC_APB1RSTR_UART4RST                 RCC_APB1RSTR_UART4RST_Mask
#define RCC_APB1RSTR_UART3RST_Pos             ((uint32_t)18)                    /* Reset UART3 */
#define RCC_APB1RSTR_UART3RST_Mask            (((uint32_t)0x01) << 18)
#define RCC_APB1RSTR_UART3RST                 RCC_APB1RSTR_UART3RST_Mask
#define RCC_APB1RSTR_USART2RST_Pos            ((uint32_t)17)                    /* Reset USART2 */
#define RCC_APB1RSTR_USART2RST_Mask           (((uint32_t)0x01) << 17)
#define RCC_APB1RSTR_USART2RST                RCC_APB1RSTR_USART2RST_Mask
#define RCC_APB1RSTR_SPI2RST_Pos              ((uint32_t)14)                    /* Reset SPI2 */
#define RCC_APB1RSTR_SPI2RST_Mask             (((uint32_t)0x01) << 14)
#define RCC_APB1RSTR_SPI2RST                  RCC_APB1RSTR_SPI2RST_Mask
#define RCC_APB1RSTR_WWDGRST_Pos              ((uint32_t)11)                    /* Reset WWDG */
#define RCC_APB1RSTR_WWDGRST_Mask             (((uint32_t)0x01) << 11)
#define RCC_APB1RSTR_WWDGRST                  RCC_APB1RSTR_WWDGRST_Mask
#define RCC_APB1RSTR_LCDRST_Pos               ((uint32_t)9)                     /* Reset LCD */
#define RCC_APB1RSTR_LCDRST_Mask              (((uint32_t)0x01) << 9)
#define RCC_APB1RSTR_LCDRST                   RCC_APB1RSTR_LCDRST_Mask
#define RCC_APB1RSTR_TIM14RST_Pos             ((uint32_t)8)                     /* Reset TIM14 */
#define RCC_APB1RSTR_TIM14RST_Mask            (((uint32_t)0x01) << 8)
#define RCC_APB1RSTR_TIM14RST                 RCC_APB1RSTR_TIM14RST_Mask
#define RCC_APB1RSTR_TIM3RST_Pos              ((uint32_t)1)                     /* Reset TIM3 */
#define RCC_APB1RSTR_TIM3RST_Mask             (((uint32_t)0x01) << 1)
#define RCC_APB1RSTR_TIM3RST                  RCC_APB1RSTR_TIM3RST_Mask
#define RCC_APB1RSTR_TIM2RST_Pos              ((uint32_t)0)                     /* Reset TIM2 */
#define RCC_APB1RSTR_TIM2RST_Mask             (((uint32_t)0x01) << 0)
#define RCC_APB1RSTR_TIM2RST                  RCC_APB1RSTR_TIM2RST_Mask

/************************************ RCC->AHBENR  **************************************/
#define RCC_AHBENR_TRNGEN_Pos                 ((uint32_t)25)                    /* True Random Number Generator clock enable */
#define RCC_AHBENR_TRNGEN_Mask                (((uint32_t)0x01) << 25)
#define RCC_AHBENR_TRNGEN                     RCC_AHBENR_TRNGEN_Mask
#define RCC_AHBENR_CRYPTEN_Pos                ((uint32_t)24)                    /* Crypto clock enable */
#define RCC_AHBENR_CRYPTEN_Mask               (((uint32_t)0x01) << 24)
#define RCC_AHBENR_CRYPTEN                    RCC_AHBENR_CRYPTEN_Mask
#define RCC_AHBENR_IOPFEN_Pos                 ((uint32_t)22)                    /* I/O port F clock enable */
#define RCC_AHBENR_IOPFEN_Mask                (((uint32_t)0x01) << 22)
#define RCC_AHBENR_IOPFEN                     RCC_AHBENR_IOPFEN_Mask
#define RCC_AHBENR_IOPDEN_Pos                 ((uint32_t)20)                    /* I/O port D clock enable */
#define RCC_AHBENR_IOPDEN_Mask                (((uint32_t)0x01) << 20)
#define RCC_AHBENR_IOPDEN                     RCC_AHBENR_IOPDEN_Mask
#define RCC_AHBENR_IOPCEN_Pos                 ((uint32_t)19)                    /* I/O port C clock enable */
#define RCC_AHBENR_IOPCEN_Mask                (((uint32_t)0x01) << 19)
#define RCC_AHBENR_IOPCEN                     RCC_AHBENR_IOPCEN_Mask
#define RCC_AHBENR_IOPBEN_Pos                 ((uint32_t)18)                    /* I/O port B clock enable */
#define RCC_AHBENR_IOPBEN_Mask                (((uint32_t)0x01) << 18)
#define RCC_AHBENR_IOPBEN                     RCC_AHBENR_IOPBEN_Mask
#define RCC_AHBENR_IOPAEN_Pos                 ((uint32_t)17)                    /* I/O port A clock enable */
#define RCC_AHBENR_IOPAEN_Mask                (((uint32_t)0x01) << 17)
#define RCC_AHBENR_IOPAEN                     RCC_AHBENR_IOPAEN_Mask
#define RCC_AHBENR_EMACCEN_Pos                ((uint32_t)9)                     /* EMACC clock enable */
#define RCC_AHBENR_EMACCEN_Mask               (((uint32_t)0x01) << 9)
#define RCC_AHBENR_EMACCEN                    RCC_AHBENR_EMACCEN_Mask
#define RCC_AHBENR_DVSQEN_Pos                 ((uint32_t)8)                     /* DVSQ clock enable */
#define RCC_AHBENR_DVSQEN_Mask                (((uint32_t)0x01) << 8)
#define RCC_AHBENR_DVSQEN                     RCC_AHBENR_DVSQEN_Mask
#define RCC_AHBENR_CRCEN_Pos                  ((uint32_t)6)                     /* CRC clock enable */
#define RCC_AHBENR_CRCEN_Mask                 (((uint32_t)0x01) << 6)
#define RCC_AHBENR_CRCEN                      RCC_AHBENR_CRCEN_Mask
#define RCC_AHBENR_FLITFEN_Pos                ((uint32_t)4)                     /* FLITF clock enable */
#define RCC_AHBENR_FLITFEN_Mask               (((uint32_t)0x01) << 4)
#define RCC_AHBENR_FLITFEN                    RCC_AHBENR_FLITFEN_Mask
#define RCC_AHBENR_SRAMEN_Pos                 ((uint32_t)2)                     /* SRAM interface clock enable */
#define RCC_AHBENR_SRAMEN_Mask                (((uint32_t)0x01) << 2)
#define RCC_AHBENR_SRAMEN                     RCC_AHBENR_SRAMEN_Mask
#define RCC_AHBENR_DMAEN_Pos                  ((uint32_t)0)                     /* DMA clock enable */
#define RCC_AHBENR_DMAEN_Mask                 (((uint32_t)0x01) << 0)
#define RCC_AHBENR_DMAEN                      RCC_AHBENR_DMAEN_Mask

/************************************ RCC->APB2ENR  *************************************/
#define RCC_APB2ENR_COMPEN_Pos                ((uint32_t)28)                    /* Comparator Control Module clock enable */
#define RCC_APB2ENR_COMPEN_Mask               (((uint32_t)0x01) << 28)
#define RCC_APB2ENR_COMPEN                    RCC_APB2ENR_COMPEN_Mask
#define RCC_APB2ENR_OPAMPEN_Pos               ((uint32_t)27)                    /* OAMP clock enable */
#define RCC_APB2ENR_OPAMPEN_Mask              (((uint32_t)0x01) << 27)
#define RCC_APB2ENR_OPAMPEN                   RCC_APB2ENR_OPAMPEN_Mask
#define RCC_APB2ENR_BEEPEREN_Pos              ((uint32_t)25)                    /* Beeper clock enable */
#define RCC_APB2ENR_BEEPEREN_Mask             (((uint32_t)0x01) << 25)
#define RCC_APB2ENR_BEEPEREN                  RCC_APB2ENR_BEEPEREN_Mask
#define RCC_APB2ENR_DBGEN_Pos                 ((uint32_t)22)                    /* DBG clock enable */
#define RCC_APB2ENR_DBGEN_Mask                (((uint32_t)0x01) << 22)
#define RCC_APB2ENR_DBGEN                     RCC_APB2ENR_DBGEN_Mask
#define RCC_APB2ENR_TIM17EN_Pos               ((uint32_t)18)                    /* TIM17 clock enable */
#define RCC_APB2ENR_TIM17EN_Mask              (((uint32_t)0x01) << 18)
#define RCC_APB2ENR_TIM17EN                   RCC_APB2ENR_TIM17EN_Mask
#define RCC_APB2ENR_TIM16EN_Pos               ((uint32_t)17)                    /* TIM16 clock enable */
#define RCC_APB2ENR_TIM16EN_Mask              (((uint32_t)0x01) << 17)
#define RCC_APB2ENR_TIM16EN                   RCC_APB2ENR_TIM16EN_Mask
#define RCC_APB2ENR_TIM15EN_Pos               ((uint32_t)16)                    /* TIM15 clock enable */
#define RCC_APB2ENR_TIM15EN_Mask              (((uint32_t)0x01) << 16)
#define RCC_APB2ENR_TIM15EN                   RCC_APB2ENR_TIM15EN_Mask
#define RCC_APB2ENR_USART1EN_Pos              ((uint32_t)14)                    /* USART1 clock enable */
#define RCC_APB2ENR_USART1EN_Mask             (((uint32_t)0x01) << 14)
#define RCC_APB2ENR_USART1EN                  RCC_APB2ENR_USART1EN_Mask
#define RCC_APB2ENR_SPI1EN_Pos                ((uint32_t)12)                    /* SPI1 clock enable */
#define RCC_APB2ENR_SPI1EN_Mask               (((uint32_t)0x01) << 12)
#define RCC_APB2ENR_SPI1EN                    RCC_APB2ENR_SPI1EN_Mask
#define RCC_APB2ENR_TIM1EN_Pos                ((uint32_t)11)                    /* TIM1 clock enable */
#define RCC_APB2ENR_TIM1EN_Mask               (((uint32_t)0x01) << 11)
#define RCC_APB2ENR_TIM1EN                    RCC_APB2ENR_TIM1EN_Mask
#define RCC_APB2ENR_ADCEN_Pos                 ((uint32_t)9)                     /* ADC clock enable */
#define RCC_APB2ENR_ADCEN_Mask                (((uint32_t)0x01) << 9)
#define RCC_APB2ENR_ADCEN                     RCC_APB2ENR_ADCEN_Mask
#define RCC_APB2ENR_SYSCFGEN_Pos              ((uint32_t)0)                     /* System control configuration clock enable */
#define RCC_APB2ENR_SYSCFGEN_Mask             (((uint32_t)0x01) << 0)
#define RCC_APB2ENR_SYSCFGEN                  RCC_APB2ENR_SYSCFGEN_Mask

/************************************ RCC->APB1ENR  *************************************/
#define RCC_APB1ENR_DACEN_Pos                 ((uint32_t)29)                    /* DAC interface clock enable */
#define RCC_APB1ENR_DACEN_Mask                (((uint32_t)0x01) << 29)
#define RCC_APB1ENR_DACEN                     RCC_APB1ENR_DACEN_Mask
#define RCC_APB1ENR_PWREN_Pos                 ((uint32_t)28)                    /* Power interface clock enable */
#define RCC_APB1ENR_PWREN_Mask                (((uint32_t)0x01) << 28)
#define RCC_APB1ENR_PWREN                     RCC_APB1ENR_PWREN_Mask
#define RCC_APB1ENR_CANEN_Pos                 ((uint32_t)25)                    /* CAN clock enable */
#define RCC_APB1ENR_CANEN_Mask                (((uint32_t)0x01) << 25)
#define RCC_APB1ENR_CANEN                     RCC_APB1ENR_CANEN_Mask
#define RCC_APB1ENR_LPUART1EN_Pos             ((uint32_t)24)                    /* LPUART1 clock enable */
#define RCC_APB1ENR_LPUART1EN_Mask            (((uint32_t)0x01) << 24)
#define RCC_APB1ENR_LPUART1EN                 RCC_APB1ENR_LPUART1EN_Mask
#define RCC_APB1ENR_USBEN_Pos                 ((uint32_t)23)                    /* USB clock enable */
#define RCC_APB1ENR_USBEN_Mask                (((uint32_t)0x01) << 23)
#define RCC_APB1ENR_USBEN                     RCC_APB1ENR_USBEN_Mask
#define RCC_APB1ENR_I2C2EN_Pos                ((uint32_t)22)                    /* I2C2 clock enable */
#define RCC_APB1ENR_I2C2EN_Mask               (((uint32_t)0x01) << 22)
#define RCC_APB1ENR_I2C2EN                    RCC_APB1ENR_I2C2EN_Mask
#define RCC_APB1ENR_I2C1EN_Pos                ((uint32_t)21)                    /* I2C1 clock enable */
#define RCC_APB1ENR_I2C1EN_Mask               (((uint32_t)0x01) << 21)
#define RCC_APB1ENR_I2C1EN                    RCC_APB1ENR_I2C1EN_Mask
#define RCC_APB1ENR_UART4EN_Pos               ((uint32_t)19)                    /* UART4 clock enable */
#define RCC_APB1ENR_UART4EN_Mask              (((uint32_t)0x01) << 19)
#define RCC_APB1ENR_UART4EN                   RCC_APB1ENR_UART4EN_Mask
#define RCC_APB1ENR_UART3EN_Pos               ((uint32_t)18)                    /* UART3 clock enable */
#define RCC_APB1ENR_UART3EN_Mask              (((uint32_t)0x01) << 18)
#define RCC_APB1ENR_UART3EN                   RCC_APB1ENR_UART3EN_Mask
#define RCC_APB1ENR_USART2EN_Pos              ((uint32_t)17)                    /* USART2 clock enable */
#define RCC_APB1ENR_USART2EN_Mask             (((uint32_t)0x01) << 17)
#define RCC_APB1ENR_USART2EN                  RCC_APB1ENR_USART2EN_Mask
#define RCC_APB1ENR_SPI2EN_Pos                ((uint32_t)14)                    /* SPI2 clock enable */
#define RCC_APB1ENR_SPI2EN_Mask               (((uint32_t)0x01) << 14)
#define RCC_APB1ENR_SPI2EN                    RCC_APB1ENR_SPI2EN_Mask
#define RCC_APB1ENR_WWDGEN_Pos                ((uint32_t)11)                    /* WWDG clock enable */
#define RCC_APB1ENR_WWDGEN_Mask               (((uint32_t)0x01) << 11)
#define RCC_APB1ENR_WWDGEN                    RCC_APB1ENR_WWDGEN_Mask
#define RCC_APB1ENR_LCDEN_Pos                 ((uint32_t)9)                     /* LCD clock enable */
#define RCC_APB1ENR_LCDEN_Mask                (((uint32_t)0x01) << 9)
#define RCC_APB1ENR_LCDEN                     RCC_APB1ENR_LCDEN_Mask
#define RCC_APB1ENR_TIM14EN_Pos               ((uint32_t)8)                     /* TIM14 clock enable */
#define RCC_APB1ENR_TIM14EN_Mask              (((uint32_t)0x01) << 8)
#define RCC_APB1ENR_TIM14EN                   RCC_APB1ENR_TIM14EN_Mask
#define RCC_APB1ENR_TIM3EN_Pos                ((uint32_t)1)                     /* TIM3 clock enable */
#define RCC_APB1ENR_TIM3EN_Mask               (((uint32_t)0x01) << 1)
#define RCC_APB1ENR_TIM3EN                    RCC_APB1ENR_TIM3EN_Mask
#define RCC_APB1ENR_TIM2EN_Pos                ((uint32_t)0)                     /* TIM2 clock enable */
#define RCC_APB1ENR_TIM2EN_Mask               (((uint32_t)0x01) << 0)
#define RCC_APB1ENR_TIM2EN                    RCC_APB1ENR_TIM2EN_Mask

/************************************* RCC->BDCR  ***************************************/
#define RCC_BDCR_LCDPUMPDRV_Pos               ((uint32_t)24)                    /* LCD PUMP driver capability selection */
#define RCC_BDCR_LCDPUMPDRV_Mask              (((uint32_t)0x07) << 24)
#define RCC_BDCR_LCDPUMPDRV                   RCC_BDCR_LCDPUMPDRV_Mask
#define RCC_BDCR_LCDPUMPDRV_0                 (((uint32_t)0x1 << RCC_BDCR_LCDPUMPDRV_Pos))
#define RCC_BDCR_LCDPUMPDRV_1                 (((uint32_t)0x2 << RCC_BDCR_LCDPUMPDRV_Pos))
#define RCC_BDCR_LCDPUMPDRV_2                 (((uint32_t)0x4 << RCC_BDCR_LCDPUMPDRV_Pos))
#define RCC_BDCR_BDRST_Pos                    ((uint32_t)16)                    /* Backup domain software reset */
#define RCC_BDCR_BDRST_Mask                   (((uint32_t)0x01) << 16)
#define RCC_BDCR_BDRST                        RCC_BDCR_BDRST_Mask
#define RCC_BDCR_RTCEN_Pos                    ((uint32_t)15)                    /* RTC clock enable */
#define RCC_BDCR_RTCEN_Mask                   (((uint32_t)0x01) << 15)
#define RCC_BDCR_RTCEN                        RCC_BDCR_RTCEN_Mask
#define RCC_BDCR_RTC_SEL_Pos                  ((uint32_t)8)                     /* RTC clock source selection */
#define RCC_BDCR_RTC_SEL_Mask                 (((uint32_t)0x07) << 8)
#define RCC_BDCR_RTC_SEL                      RCC_BDCR_RTC_SEL_Mask
#define RCC_BDCR_RTC_SEL_0                    (((uint32_t)0x1 << RCC_BDCR_RTC_SEL_Pos))
#define RCC_BDCR_RTC_SEL_1                    (((uint32_t)0x2 << RCC_BDCR_RTC_SEL_Pos))
#define RCC_BDCR_RTC_SEL_2                    (((uint32_t)0x4 << RCC_BDCR_RTC_SEL_Pos))
#define RCC_BDCR_LSEDRV_Pos                   ((uint32_t)3)                     /* LSE oscillator drive capability */
#define RCC_BDCR_LSEDRV_Mask                  (((uint32_t)0x03) << 3)
#define RCC_BDCR_LSEDRV                       RCC_BDCR_LSEDRV_Mask
#define RCC_BDCR_LSEDRV_0                     (((uint32_t)0x1 << RCC_BDCR_LSEDRV_Pos))
#define RCC_BDCR_LSEDRV_1                     (((uint32_t)0x2 << RCC_BDCR_LSEDRV_Pos))
#define RCC_BDCR_LSEBYP_Pos                   ((uint32_t)2)                     /* LSE oscillator bypass */
#define RCC_BDCR_LSEBYP_Mask                  (((uint32_t)0x01) << 2)
#define RCC_BDCR_LSEBYP                       RCC_BDCR_LSEBYP_Mask
#define RCC_BDCR_LSERDY_Pos                   ((uint32_t)1)                     /* LSE oscillator ready */
#define RCC_BDCR_LSERDY_Mask                  (((uint32_t)0x01) << 1)
#define RCC_BDCR_LSERDY                       RCC_BDCR_LSERDY_Mask
#define RCC_BDCR_LSEON_Pos                    ((uint32_t)0)                     /* LSE oscillator enable */
#define RCC_BDCR_LSEON_Mask                   (((uint32_t)0x01) << 0)
#define RCC_BDCR_LSEON                        RCC_BDCR_LSEON_Mask

/************************************** RCC->CSR  ***************************************/
#define RCC_CSR_LPWRRSTF_Pos                  ((uint32_t)31)                    /* Low-power reset flag */
#define RCC_CSR_LPWRRSTF_Mask                 (((uint32_t)0x01) << 31)
#define RCC_CSR_LPWRRSTF                      RCC_CSR_LPWRRSTF_Mask
#define RCC_CSR_WWDGRSTF_Pos                  ((uint32_t)30)                    /* Window watchdog reset flag */
#define RCC_CSR_WWDGRSTF_Mask                 (((uint32_t)0x01) << 30)
#define RCC_CSR_WWDGRSTF                      RCC_CSR_WWDGRSTF_Mask
#define RCC_CSR_IWDGRSTF_Pos                  ((uint32_t)29)                    /* Independent watchdog reset flag */
#define RCC_CSR_IWDGRSTF_Mask                 (((uint32_t)0x01) << 29)
#define RCC_CSR_IWDGRSTF                      RCC_CSR_IWDGRSTF_Mask
#define RCC_CSR_SFTRSTF_Pos                   ((uint32_t)28)                    /* Software reset flag */
#define RCC_CSR_SFTRSTF_Mask                  (((uint32_t)0x01) << 28)
#define RCC_CSR_SFTRSTF                       RCC_CSR_SFTRSTF_Mask
#define RCC_CSR_PORRSTF_Pos                   ((uint32_t)27)                    /* POR/PDR reset flag */
#define RCC_CSR_PORRSTF_Mask                  (((uint32_t)0x01) << 27)
#define RCC_CSR_PORRSTF                       RCC_CSR_PORRSTF_Mask
#define RCC_CSR_PINRSTF_Pos                   ((uint32_t)26)                    /* NRST pin reset flag */
#define RCC_CSR_PINRSTF_Mask                  (((uint32_t)0x01) << 26)
#define RCC_CSR_PINRSTF                       RCC_CSR_PINRSTF_Mask
#define RCC_CSR_OBLRSTF_Pos                   ((uint32_t)25)                    /* Option byte loader reset flag */
#define RCC_CSR_OBLRSTF_Mask                  (((uint32_t)0x01) << 25)
#define RCC_CSR_OBLRSTF                       RCC_CSR_OBLRSTF_Mask
#define RCC_CSR_RMVF_Pos                      ((uint32_t)24)                    /* Remove reset flag */
#define RCC_CSR_RMVF_Mask                     (((uint32_t)0x01) << 24)
#define RCC_CSR_RMVF                          RCC_CSR_RMVF_Mask
#define RCC_CSR_VCPURSTF_Pos                  ((uint32_t)23)                    /* Reset flag of the VCore domain */
#define RCC_CSR_VCPURSTF_Mask                 (((uint32_t)0x01) << 23)
#define RCC_CSR_VCPURSTF                      RCC_CSR_VCPURSTF_Mask
#define RCC_CSR_MSION_Pos                     ((uint32_t)14)                    /* MSI clock enable */
#define RCC_CSR_MSION_Mask                    (((uint32_t)0x01) << 14)
#define RCC_CSR_MSION                         RCC_CSR_MSION_Mask
#define RCC_CSR_LSICTRIM_Pos                  ((uint32_t)6)                     /* LSI clock calibration */
#define RCC_CSR_LSICTRIM_Mask                 (((uint32_t)0x3F) << 6)
#define RCC_CSR_LSICTRIM                      RCC_CSR_LSICTRIM_Mask
#define RCC_CSR_LSICTRIM_0                    (((uint32_t)0x1 << RCC_CSR_LSICTRIM_Pos))
#define RCC_CSR_LSICTRIM_1                    (((uint32_t)0x2 << RCC_CSR_LSICTRIM_Pos))
#define RCC_CSR_LSICTRIM_2                    (((uint32_t)0x4 << RCC_CSR_LSICTRIM_Pos))
#define RCC_CSR_LSICTRIM_3                    (((uint32_t)0x8 << RCC_CSR_LSICTRIM_Pos))
#define RCC_CSR_LSICTRIM_4                    (((uint32_t)0x10 << RCC_CSR_LSICTRIM_Pos))
#define RCC_CSR_LSICTRIM_5                    (((uint32_t)0x20 << RCC_CSR_LSICTRIM_Pos))
#define RCC_CSR_LSIFTRIM_Pos                  ((uint32_t)2)                     /* LSI clock trimming */
#define RCC_CSR_LSIFTRIM_Mask                 (((uint32_t)0x0F) << 2)
#define RCC_CSR_LSIFTRIM                      RCC_CSR_LSIFTRIM_Mask
#define RCC_CSR_LSIFTRIM_0                    (((uint32_t)0x1 << RCC_CSR_LSIFTRIM_Pos))
#define RCC_CSR_LSIFTRIM_1                    (((uint32_t)0x2 << RCC_CSR_LSIFTRIM_Pos))
#define RCC_CSR_LSIFTRIM_2                    (((uint32_t)0x4 << RCC_CSR_LSIFTRIM_Pos))
#define RCC_CSR_LSIFTRIM_3                    (((uint32_t)0x8 << RCC_CSR_LSIFTRIM_Pos))
#define RCC_CSR_LSIRDY_Pos                    ((uint32_t)1)                     /* LSI oscillator ready */
#define RCC_CSR_LSIRDY_Mask                   (((uint32_t)0x01) << 1)
#define RCC_CSR_LSIRDY                        RCC_CSR_LSIRDY_Mask
#define RCC_CSR_LSION_Pos                     ((uint32_t)0)                     /* LSI oscillator enable */
#define RCC_CSR_LSION_Mask                    (((uint32_t)0x01) << 0)
#define RCC_CSR_LSION                         RCC_CSR_LSION_Mask

/************************************ RCC->AHBRSTR  *************************************/
#define RCC_AHBRSTR_TRNGRST_Pos               ((uint32_t)25)                    /* True Random Number Generator module reset */
#define RCC_AHBRSTR_TRNGRST_Mask              (((uint32_t)0x01) << 25)
#define RCC_AHBRSTR_TRNGRST                   RCC_AHBRSTR_TRNGRST_Mask
#define RCC_AHBRSTR_CRYPTRST_Pos              ((uint32_t)24)                    /* Encryption module reset */
#define RCC_AHBRSTR_CRYPTRST_Mask             (((uint32_t)0x01) << 24)
#define RCC_AHBRSTR_CRYPTRST                  RCC_AHBRSTR_CRYPTRST_Mask
#define RCC_AHBRSTR_IOPFRST_Pos               ((uint32_t)22)                    /* Reset I/O port F */
#define RCC_AHBRSTR_IOPFRST_Mask              (((uint32_t)0x01) << 22)
#define RCC_AHBRSTR_IOPFRST                   RCC_AHBRSTR_IOPFRST_Mask
#define RCC_AHBRSTR_IOPDRST_Pos               ((uint32_t)20)                    /* Reset I/O port D */
#define RCC_AHBRSTR_IOPDRST_Mask              (((uint32_t)0x01) << 20)
#define RCC_AHBRSTR_IOPDRST                   RCC_AHBRSTR_IOPDRST_Mask
#define RCC_AHBRSTR_IOPCRST_Pos               ((uint32_t)19)                    /* Reset I/O port C */
#define RCC_AHBRSTR_IOPCRST_Mask              (((uint32_t)0x01) << 19)
#define RCC_AHBRSTR_IOPCRST                   RCC_AHBRSTR_IOPCRST_Mask
#define RCC_AHBRSTR_IOPBRST_Pos               ((uint32_t)18)                    /* Reset I/O port B */
#define RCC_AHBRSTR_IOPBRST_Mask              (((uint32_t)0x01) << 18)
#define RCC_AHBRSTR_IOPBRST                   RCC_AHBRSTR_IOPBRST_Mask
#define RCC_AHBRSTR_IOPARST_Pos               ((uint32_t)17)                    /* Reset I/O port A */
#define RCC_AHBRSTR_IOPARST_Mask              (((uint32_t)0x01) << 17)
#define RCC_AHBRSTR_IOPARST                   RCC_AHBRSTR_IOPARST_Mask
#define RCC_AHBRSTR_EMACCRST_Pos              ((uint32_t)9)                     /* Reset EMACC */
#define RCC_AHBRSTR_EMACCRST_Mask             (((uint32_t)0x01) << 9)
#define RCC_AHBRSTR_EMACCRST                  RCC_AHBRSTR_EMACCRST_Mask
#define RCC_AHBRSTR_DVSQRST_Pos               ((uint32_t)8)                     /* DVSQ reset */
#define RCC_AHBRSTR_DVSQRST_Mask              (((uint32_t)0x01) << 8)
#define RCC_AHBRSTR_DVSQRST                   RCC_AHBRSTR_DVSQRST_Mask
#define RCC_AHBRSTR_CRCRST_Pos                ((uint32_t)6)                     /* Reset CRC */
#define RCC_AHBRSTR_CRCRST_Mask               (((uint32_t)0x01) << 6)
#define RCC_AHBRSTR_CRCRST                    RCC_AHBRSTR_CRCRST_Mask
#define RCC_AHBRSTR_DMARST_Pos                ((uint32_t)0)                     /* Reset DMA */
#define RCC_AHBRSTR_DMARST_Mask               (((uint32_t)0x01) << 0)
#define RCC_AHBRSTR_DMARST                    RCC_AHBRSTR_DMARST_Mask

/************************************* RCC->CFGR2  **************************************/
#define RCC_CFGR2_PREDIV_Pos                  ((uint32_t)0)                     /* PREDIV division factor */
#define RCC_CFGR2_PREDIV_Mask                 (((uint32_t)0x0F) << 0)
#define RCC_CFGR2_PREDIV                      RCC_CFGR2_PREDIV_Mask
#define RCC_CFGR2_PREDIV_0                    (((uint32_t)0x1))
#define RCC_CFGR2_PREDIV_1                    (((uint32_t)0x2))
#define RCC_CFGR2_PREDIV_2                    (((uint32_t)0x4))
#define RCC_CFGR2_PREDIV_3                    (((uint32_t)0x8))

/************************************* RCC->CFGR3  **************************************/
#define RCC_CFGR3_LPUART1SW_Pos               ((uint32_t)16)                    /* LPUART1clock source selection */
#define RCC_CFGR3_LPUART1SW_Mask              (((uint32_t)0x07) << 16)
#define RCC_CFGR3_LPUART1SW                   RCC_CFGR3_LPUART1SW_Mask
#define RCC_CFGR3_LPUART1SW_0                 (((uint32_t)0x1 << RCC_CFGR3_LPUART1SW_Pos))
#define RCC_CFGR3_LPUART1SW_1                 (((uint32_t)0x2 << RCC_CFGR3_LPUART1SW_Pos))
#define RCC_CFGR3_LPUART1SW_2                 (((uint32_t)0x4 << RCC_CFGR3_LPUART1SW_Pos))
#define RCC_CFGR3_USBSEL_Pos                  ((uint32_t)15)                    /* USB clock source selection */
#define RCC_CFGR3_USBSEL_Mask                 (((uint32_t)0x01) << 15)
#define RCC_CFGR3_USBSEL                      RCC_CFGR3_USBSEL_Mask
#define RCC_CFGR3_UART4SW_Pos                 ((uint32_t)9)                     /* UART4 clock source selection */
#define RCC_CFGR3_UART4SW_Mask                (((uint32_t)0x07) << 9)
#define RCC_CFGR3_UART4SW                     RCC_CFGR3_UART4SW_Mask
#define RCC_CFGR3_UART4SW_0                   (((uint32_t)0x1 << RCC_CFGR3_UART4SW_Pos))
#define RCC_CFGR3_UART4SW_1                   (((uint32_t)0x2 << RCC_CFGR3_UART4SW_Pos))
#define RCC_CFGR3_UART4SW_2                   (((uint32_t)0x4 << RCC_CFGR3_UART4SW_Pos))
#define RCC_CFGR3_UART3SW_Pos                 ((uint32_t)6)                     /* UART3 clock source selection */
#define RCC_CFGR3_UART3SW_Mask                (((uint32_t)0x07) << 6)
#define RCC_CFGR3_UART3SW                     RCC_CFGR3_UART3SW_Mask
#define RCC_CFGR3_UART3SW_0                   (((uint32_t)0x1 << RCC_CFGR3_UART3SW_Pos))
#define RCC_CFGR3_UART3SW_1                   (((uint32_t)0x2 << RCC_CFGR3_UART3SW_Pos))
#define RCC_CFGR3_UART3SW_2                   (((uint32_t)0x4 << RCC_CFGR3_UART3SW_Pos))
#define RCC_CFGR3_USART2SW_Pos                ((uint32_t)3)                     /* USART2 clock source selection */
#define RCC_CFGR3_USART2SW_Mask               (((uint32_t)0x07) << 3)
#define RCC_CFGR3_USART2SW                    RCC_CFGR3_USART2SW_Mask
#define RCC_CFGR3_USART2SW_0                  (((uint32_t)0x1 << RCC_CFGR3_USART2SW_Pos))
#define RCC_CFGR3_USART2SW_1                  (((uint32_t)0x2 << RCC_CFGR3_USART2SW_Pos))
#define RCC_CFGR3_USART2SW_2                  (((uint32_t)0x4 << RCC_CFGR3_USART2SW_Pos))
#define RCC_CFGR3_USART1SW_Pos                ((uint32_t)0)                     /* USART1 clock source selection */
#define RCC_CFGR3_USART1SW_Mask               (((uint32_t)0x07) << 0)
#define RCC_CFGR3_USART1SW                    RCC_CFGR3_USART1SW_Mask
#define RCC_CFGR3_USART1SW_0                  (((uint32_t)0x1))
#define RCC_CFGR3_USART1SW_1                  (((uint32_t)0x2))
#define RCC_CFGR3_USART1SW_2                  (((uint32_t)0x4))

/************************************** RCC->CR2  ***************************************/
#define RCC_CR2_MSIRANGE_Pos                  ((uint32_t)16)                    /* MSI frequency selection */
#define RCC_CR2_MSIRANGE_Mask                 (((uint32_t)0x07) << 16)
#define RCC_CR2_MSIRANGE                      RCC_CR2_MSIRANGE_Mask
#define RCC_CR2_MSIRANGE_0                    (((uint32_t)0x1 << RCC_CR2_MSIRANGE_Pos))
#define RCC_CR2_MSIRANGE_1                    (((uint32_t)0x2 << RCC_CR2_MSIRANGE_Pos))
#define RCC_CR2_MSIRANGE_2                    (((uint32_t)0x4 << RCC_CR2_MSIRANGE_Pos))
#define RCC_CR2_MSIRDY_Pos                    ((uint32_t)9)                     /* MSI clock ready flag */
#define RCC_CR2_MSIRDY_Mask                   (((uint32_t)0x01) << 9)
#define RCC_CR2_MSIRDY                        RCC_CR2_MSIRDY_Mask
#define RCC_CR2_HSI48RDY_Pos                  ((uint32_t)4)                     /* HSI48 clock ready flag */
#define RCC_CR2_HSI48RDY_Mask                 (((uint32_t)0x01) << 4)
#define RCC_CR2_HSI48RDY                      RCC_CR2_HSI48RDY_Mask
#define RCC_CR2_HSI48ON_Pos                   ((uint32_t)3)                     /* HSI48 clock enable */
#define RCC_CR2_HSI48ON_Mask                  (((uint32_t)0x01) << 3)
#define RCC_CR2_HSI48ON                       RCC_CR2_HSI48ON_Mask
#define RCC_CR2_HSI16DIS_Pos                  ((uint32_t)2)                     /* HSI16 clock enable */
#define RCC_CR2_HSI16DIS_Mask                 (((uint32_t)0x01) << 2)
#define RCC_CR2_HSI16DIS                      RCC_CR2_HSI16DIS_Mask
#define RCC_CR2_HSI16RDY_Pos                  ((uint32_t)1)                     /* HSI16 clock ready flag */
#define RCC_CR2_HSI16RDY_Mask                 (((uint32_t)0x01) << 1)
#define RCC_CR2_HSI16RDY                      RCC_CR2_HSI16RDY_Mask
#define RCC_CR2_HSI16ON_Pos                   ((uint32_t)0)                     /* HSI16 clock enable */
#define RCC_CR2_HSI16ON_Mask                  (((uint32_t)0x01) << 0)
#define RCC_CR2_HSI16ON                       RCC_CR2_HSI16ON_Mask

/************************************ RCC->HSECTL  **************************************/
#define RCC_HSECTL_CSS_THRESHOLD_Pos          ((uint32_t)25)                    /* CSS counter threshold control */
#define RCC_HSECTL_CSS_THRESHOLD_Mask         (((uint32_t)0x7F) << 25)
#define RCC_HSECTL_CSS_THRESHOLD              RCC_HSECTL_CSS_THRESHOLD_Mask
#define RCC_HSECTL_CSS_THRESHOLD_0            (((uint32_t)0x1 << RCC_HSECTL_CSS_THRESHOLD_Pos))
#define RCC_HSECTL_CSS_THRESHOLD_1            (((uint32_t)0x2 << RCC_HSECTL_CSS_THRESHOLD_Pos))
#define RCC_HSECTL_CSS_THRESHOLD_2            (((uint32_t)0x4 << RCC_HSECTL_CSS_THRESHOLD_Pos))
#define RCC_HSECTL_CSS_THRESHOLD_3            (((uint32_t)0x8 << RCC_HSECTL_CSS_THRESHOLD_Pos))
#define RCC_HSECTL_CSS_THRESHOLD_4            (((uint32_t)0x10 << RCC_HSECTL_CSS_THRESHOLD_Pos))
#define RCC_HSECTL_CSS_THRESHOLD_5            (((uint32_t)0x20 << RCC_HSECTL_CSS_THRESHOLD_Pos))
#define RCC_HSECTL_CSS_THRESHOLD_6            (((uint32_t)0x40 << RCC_HSECTL_CSS_THRESHOLD_Pos))
#define RCC_HSECTL_HSENF_BYP_Pos              ((uint32_t)15)                    /* HSE noise filter bypass */
#define RCC_HSECTL_HSENF_BYP_Mask             (((uint32_t)0x01) << 15)
#define RCC_HSECTL_HSENF_BYP                  RCC_HSECTL_HSENF_BYP_Mask
#define RCC_HSECTL_HSEWT_Pos                  ((uint32_t)0)                     /* HSE stabilize wait time setting */
#define RCC_HSECTL_HSEWT_Mask                 (((uint32_t)0x0FFF) << 0)
#define RCC_HSECTL_HSEWT                      RCC_HSECTL_HSEWT_Mask
#define RCC_HSECTL_HSEWT_0                    (((uint32_t)0x1))
#define RCC_HSECTL_HSEWT_1                    (((uint32_t)0x2))
#define RCC_HSECTL_HSEWT_2                    (((uint32_t)0x4))
#define RCC_HSECTL_HSEWT_3                    (((uint32_t)0x8))
#define RCC_HSECTL_HSEWT_4                    (((uint32_t)0x10))
#define RCC_HSECTL_HSEWT_5                    (((uint32_t)0x20))
#define RCC_HSECTL_HSEWT_6                    (((uint32_t)0x40))
#define RCC_HSECTL_HSEWT_7                    (((uint32_t)0x80))
#define RCC_HSECTL_HSEWT_8                    (((uint32_t)0x100))
#define RCC_HSECTL_HSEWT_9                    (((uint32_t)0x200))
#define RCC_HSECTL_HSEWT_10                   (((uint32_t)0x400))
#define RCC_HSECTL_HSEWT_11                   (((uint32_t)0x800))

/************************************ RCC->PLLCTL  **************************************/
#define RCC_PLLCTL_PLLWT_Pos                  ((uint32_t)27)                    /* PLL stabilize wait time setting */
#define RCC_PLLCTL_PLLWT_Mask                 (((uint32_t)0x1F) << 27)
#define RCC_PLLCTL_PLLWT                      RCC_PLLCTL_PLLWT_Mask
#define RCC_PLLCTL_PLLWT_0                    (((uint32_t)0x1 << RCC_PLLCTL_PLLWT_Pos))
#define RCC_PLLCTL_PLLWT_1                    (((uint32_t)0x2 << RCC_PLLCTL_PLLWT_Pos))
#define RCC_PLLCTL_PLLWT_2                    (((uint32_t)0x4 << RCC_PLLCTL_PLLWT_Pos))
#define RCC_PLLCTL_PLLWT_3                    (((uint32_t)0x8 << RCC_PLLCTL_PLLWT_Pos))
#define RCC_PLLCTL_PLLWT_4                    (((uint32_t)0x10 << RCC_PLLCTL_PLLWT_Pos))

/************************************* RCC->CFGR4  **************************************/
#define RCC_CFGR4_BEEPER_SW_Pos               ((uint32_t)24)                    /* BEEPER clock source selection */
#define RCC_CFGR4_BEEPER_SW_Mask              (((uint32_t)0x03) << 24)
#define RCC_CFGR4_BEEPER_SW                   RCC_CFGR4_BEEPER_SW_Mask
#define RCC_CFGR4_BEEPER_SW_0                 (((uint32_t)0x1 << RCC_CFGR4_BEEPER_SW_Pos))
#define RCC_CFGR4_BEEPER_SW_1                 (((uint32_t)0x2 << RCC_CFGR4_BEEPER_SW_Pos))
#define RCC_CFGR4_I2C2CLK_SW_Pos              ((uint32_t)18)                    /* I2C2 clock source selection */
#define RCC_CFGR4_I2C2CLK_SW_Mask             (((uint32_t)0x03) << 18)
#define RCC_CFGR4_I2C2CLK_SW                  RCC_CFGR4_I2C2CLK_SW_Mask
#define RCC_CFGR4_I2C2CLK_SW_0                (((uint32_t)0x1 << RCC_CFGR4_I2C2CLK_SW_Pos))
#define RCC_CFGR4_I2C2CLK_SW_1                (((uint32_t)0x2 << RCC_CFGR4_I2C2CLK_SW_Pos))
#define RCC_CFGR4_I2C1CLK_SW_Pos              ((uint32_t)16)                    /* I2C1 clock source selection */
#define RCC_CFGR4_I2C1CLK_SW_Mask             (((uint32_t)0x03) << 16)
#define RCC_CFGR4_I2C1CLK_SW                  RCC_CFGR4_I2C1CLK_SW_Mask
#define RCC_CFGR4_I2C1CLK_SW_0                (((uint32_t)0x1 << RCC_CFGR4_I2C1CLK_SW_Pos))
#define RCC_CFGR4_I2C1CLK_SW_1                (((uint32_t)0x2 << RCC_CFGR4_I2C1CLK_SW_Pos))
#define RCC_CFGR4_PPSS_Pos                    ((uint32_t)14)                    /* Pll PREDIV clock source select */
#define RCC_CFGR4_PPSS_Mask                   (((uint32_t)0x03) << 14)
#define RCC_CFGR4_PPSS                        RCC_CFGR4_PPSS_Mask
#define RCC_CFGR4_PPSS_0                      (((uint32_t)0x1 << RCC_CFGR4_PPSS_Pos))
#define RCC_CFGR4_PPSS_1                      (((uint32_t)0x2 << RCC_CFGR4_PPSS_Pos))
#define RCC_CFGR4_EXTCLK_SEL_Pos              ((uint32_t)12)                    /* External GPIO clock pin selection */
#define RCC_CFGR4_EXTCLK_SEL_Mask             (((uint32_t)0x03) << 12)
#define RCC_CFGR4_EXTCLK_SEL                  RCC_CFGR4_EXTCLK_SEL_Mask
#define RCC_CFGR4_EXTCLK_SEL_0                (((uint32_t)0x1 << RCC_CFGR4_EXTCLK_SEL_Pos))
#define RCC_CFGR4_EXTCLK_SEL_1                (((uint32_t)0x2 << RCC_CFGR4_EXTCLK_SEL_Pos))
#define RCC_CFGR4_FLITFCLK_PRE_Pos            ((uint32_t)10)                    /* Flash interface clock prescale */
#define RCC_CFGR4_FLITFCLK_PRE_Mask           (((uint32_t)0x03) << 10)
#define RCC_CFGR4_FLITFCLK_PRE                RCC_CFGR4_FLITFCLK_PRE_Mask
#define RCC_CFGR4_FLITFCLK_PRE_0              (((uint32_t)0x1 << RCC_CFGR4_FLITFCLK_PRE_Pos))
#define RCC_CFGR4_FLITFCLK_PRE_1              (((uint32_t)0x2 << RCC_CFGR4_FLITFCLK_PRE_Pos))
#define RCC_CFGR4_FLITFCLK_SEL_Pos            ((uint32_t)8)                     /* Flash interface clock selection */
#define RCC_CFGR4_FLITFCLK_SEL_Mask           (((uint32_t)0x03) << 8)
#define RCC_CFGR4_FLITFCLK_SEL                RCC_CFGR4_FLITFCLK_SEL_Mask
#define RCC_CFGR4_FLITFCLK_SEL_0              (((uint32_t)0x1 << RCC_CFGR4_FLITFCLK_SEL_Pos))
#define RCC_CFGR4_FLITFCLK_SEL_1              (((uint32_t)0x2 << RCC_CFGR4_FLITFCLK_SEL_Pos))
#define RCC_CFGR4_ESSS_Pos                    ((uint32_t)7)                     /* SYSCLK setting bit selection */
#define RCC_CFGR4_ESSS_Mask                   (((uint32_t)0x01) << 7)
#define RCC_CFGR4_ESSS                        RCC_CFGR4_ESSS_Mask
#define RCC_CFGR4_ESWS_Pos                    ((uint32_t)3)                     /* SYSCLK clock source status */
#define RCC_CFGR4_ESWS_Mask                   (((uint32_t)0x07) << 3)
#define RCC_CFGR4_ESWS                        RCC_CFGR4_ESWS_Mask
#define RCC_CFGR4_ESWS_0                      (((uint32_t)0x1 << RCC_CFGR4_ESWS_Pos))
#define RCC_CFGR4_ESWS_1                      (((uint32_t)0x2 << RCC_CFGR4_ESWS_Pos))
#define RCC_CFGR4_ESWS_2                      (((uint32_t)0x4 << RCC_CFGR4_ESWS_Pos))
#define RCC_CFGR4_ESW_Pos                     ((uint32_t)0)                     /* SYSCLK clock source selection */
#define RCC_CFGR4_ESW_Mask                    (((uint32_t)0x07) << 0)
#define RCC_CFGR4_ESW                         RCC_CFGR4_ESW_Mask
#define RCC_CFGR4_ESW_0                       (((uint32_t)0x1))
#define RCC_CFGR4_ESW_1                       (((uint32_t)0x2))
#define RCC_CFGR4_ESW_2                       (((uint32_t)0x4))

/*****************************************************************************************
*                                    Peripheral SYSCFG                                   *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t CFGR1;                  /* CFGR1 */
    uint16_t RESERVED1[2];
    __IO uint32_t EXTICR1;                /* EXTICR1 */
    __IO uint32_t EXTICR2;                /* EXTICR2 */
    __IO uint32_t EXTICR3;                /* EXTICR3 */
    __IO uint32_t EXTICR4;                /* EXTICR4 */
    __IO uint32_t CFGR2;                  /* CFGR2 */
    uint16_t RESERVED2[2];
    __IO uint32_t CFGR3;                  /* CFGR3 */
} SYSCFG_TypeDef;

/*********************************** SYSCFG->CFGR1  *************************************/
#define SYSCFG_CFGR1_I2C1_PA10_FMP_Pos        ((uint32_t)23)                    /* I2C1 Fast Mode Plus driving capability activation bit for PA10 */
#define SYSCFG_CFGR1_I2C1_PA10_FMP_Mask       (((uint32_t)0x01) << 23)
#define SYSCFG_CFGR1_I2C1_PA10_FMP            SYSCFG_CFGR1_I2C1_PA10_FMP_Mask
#define SYSCFG_CFGR1_I2C1_PA9_FMP_Pos         ((uint32_t)22)                    /* I2C1 Fast Mode Plus driving capability activation bit for PA9 */
#define SYSCFG_CFGR1_I2C1_PA9_FMP_Mask        (((uint32_t)0x01) << 22)
#define SYSCFG_CFGR1_I2C1_PA9_FMP             SYSCFG_CFGR1_I2C1_PA9_FMP_Mask
#define SYSCFG_CFGR1_I2C1_FMP_Pos             ((uint32_t)20)                    /* FM+ driving capability activation for I2C1 */
#define SYSCFG_CFGR1_I2C1_FMP_Mask            (((uint32_t)0x01) << 20)
#define SYSCFG_CFGR1_I2C1_FMP                 SYSCFG_CFGR1_I2C1_FMP_Mask
#define SYSCFG_CFGR1_I2C1_PB9_FMP_Pos         ((uint32_t)19)                    /* I2C1 Fast Mode Plus driving capability activation bit for PB9 */
#define SYSCFG_CFGR1_I2C1_PB9_FMP_Mask        (((uint32_t)0x01) << 19)
#define SYSCFG_CFGR1_I2C1_PB9_FMP             SYSCFG_CFGR1_I2C1_PB9_FMP_Mask
#define SYSCFG_CFGR1_I2C1_PB8_FMP_Pos         ((uint32_t)18)                    /* I2C1 Fast Mode Plus driving capability activation bit for PB8 */
#define SYSCFG_CFGR1_I2C1_PB8_FMP_Mask        (((uint32_t)0x01) << 18)
#define SYSCFG_CFGR1_I2C1_PB8_FMP             SYSCFG_CFGR1_I2C1_PB8_FMP_Mask
#define SYSCFG_CFGR1_I2C1_PB7_FMP_Pos         ((uint32_t)17)                    /* I2C1 Fast Mode Plus driving capability activation bit for PB7 */
#define SYSCFG_CFGR1_I2C1_PB7_FMP_Mask        (((uint32_t)0x01) << 17)
#define SYSCFG_CFGR1_I2C1_PB7_FMP             SYSCFG_CFGR1_I2C1_PB7_FMP_Mask
#define SYSCFG_CFGR1_I2C1_PB6_FMP_Pos         ((uint32_t)16)                    /* I2C1 Fast Mode Plus driving capability activation bit for PB6 */
#define SYSCFG_CFGR1_I2C1_PB6_FMP_Mask        (((uint32_t)0x01) << 16)
#define SYSCFG_CFGR1_I2C1_PB6_FMP             SYSCFG_CFGR1_I2C1_PB6_FMP_Mask
#define SYSCFG_CFGR1_PA9_10_PA11_12_REMAP_Pos  ((uint32_t)15)                   /* PA9/PA10 function remap to PA11/PA12 in 20/28 pins package */
#define SYSCFG_CFGR1_PA9_10_PA11_12_REMAP_Mask  (((uint32_t)0x01) << 15)
#define SYSCFG_CFGR1_PA9_10_PA11_12_REMAP     SYSCFG_CFGR1_PA9_10_PA11_12_REMAP_Mask
#define SYSCFG_CFGR1_LCD_CAPA_Pos             ((uint32_t)2)                     /* LCD Capacitance */
#define SYSCFG_CFGR1_LCD_CAPA_Mask            (((uint32_t)0x1F) << 2)
#define SYSCFG_CFGR1_LCD_CAPA                 SYSCFG_CFGR1_LCD_CAPA_Mask
#define SYSCFG_CFGR1_LCD_CAPA_0               (((uint32_t)0x1 << SYSCFG_CFGR1_LCD_CAPA_Pos))
#define SYSCFG_CFGR1_LCD_CAPA_1               (((uint32_t)0x2 << SYSCFG_CFGR1_LCD_CAPA_Pos))
#define SYSCFG_CFGR1_LCD_CAPA_2               (((uint32_t)0x4 << SYSCFG_CFGR1_LCD_CAPA_Pos))
#define SYSCFG_CFGR1_LCD_CAPA_3               (((uint32_t)0x8 << SYSCFG_CFGR1_LCD_CAPA_Pos))
#define SYSCFG_CFGR1_LCD_CAPA_4               (((uint32_t)0x10 << SYSCFG_CFGR1_LCD_CAPA_Pos))
#define SYSCFG_CFGR1_MEM_MODE_Pos             ((uint32_t)0)                     /* Memory mapping selection */
#define SYSCFG_CFGR1_MEM_MODE_Mask            (((uint32_t)0x03) << 0)
#define SYSCFG_CFGR1_MEM_MODE                 SYSCFG_CFGR1_MEM_MODE_Mask
#define SYSCFG_CFGR1_MEM_MODE_0               (((uint32_t)0x1))
#define SYSCFG_CFGR1_MEM_MODE_1               (((uint32_t)0x2))

/********************************** SYSCFG->EXTICR1  ************************************/
#define SYSCFG_EXTICR1_EXTI0_Pos              ((uint32_t)0)                     /* EXTIy external interrupt source input selection */
#define SYSCFG_EXTICR1_EXTI0_Mask             (((uint32_t)0x0F) << 0)
#define SYSCFG_EXTICR1_EXTI0                  SYSCFG_EXTICR1_EXTI0_Mask
#define SYSCFG_EXTICR1_EXTI0_0                (((uint32_t)0x1))
#define SYSCFG_EXTICR1_EXTI0_1                (((uint32_t)0x2))
#define SYSCFG_EXTICR1_EXTI0_2                (((uint32_t)0x4))
#define SYSCFG_EXTICR1_EXTI0_3                (((uint32_t)0x8))
#define SYSCFG_EXTICR1_EXTI1_Pos              ((uint32_t)4)                     /* EXTIy external interrupt source input selection */
#define SYSCFG_EXTICR1_EXTI1_Mask             (((uint32_t)0x0F) << 4)
#define SYSCFG_EXTICR1_EXTI1                  SYSCFG_EXTICR1_EXTI1_Mask
#define SYSCFG_EXTICR1_EXTI1_0                (((uint32_t)0x1 << SYSCFG_EXTICR1_EXTI1_Pos))
#define SYSCFG_EXTICR1_EXTI1_1                (((uint32_t)0x2 << SYSCFG_EXTICR1_EXTI1_Pos))
#define SYSCFG_EXTICR1_EXTI1_2                (((uint32_t)0x4 << SYSCFG_EXTICR1_EXTI1_Pos))
#define SYSCFG_EXTICR1_EXTI1_3                (((uint32_t)0x8 << SYSCFG_EXTICR1_EXTI1_Pos))
#define SYSCFG_EXTICR1_EXTI2_Pos              ((uint32_t)8)                     /* EXTIy external interrupt source input selection */
#define SYSCFG_EXTICR1_EXTI2_Mask             (((uint32_t)0x0F) << 8)
#define SYSCFG_EXTICR1_EXTI2                  SYSCFG_EXTICR1_EXTI2_Mask
#define SYSCFG_EXTICR1_EXTI2_0                (((uint32_t)0x1 << SYSCFG_EXTICR1_EXTI2_Pos))
#define SYSCFG_EXTICR1_EXTI2_1                (((uint32_t)0x2 << SYSCFG_EXTICR1_EXTI2_Pos))
#define SYSCFG_EXTICR1_EXTI2_2                (((uint32_t)0x4 << SYSCFG_EXTICR1_EXTI2_Pos))
#define SYSCFG_EXTICR1_EXTI2_3                (((uint32_t)0x8 << SYSCFG_EXTICR1_EXTI2_Pos))
#define SYSCFG_EXTICR1_EXTI3_Pos              ((uint32_t)12)                    /* EXTIy external interrupt source input selection */
#define SYSCFG_EXTICR1_EXTI3_Mask             (((uint32_t)0x0F) << 12)
#define SYSCFG_EXTICR1_EXTI3                  SYSCFG_EXTICR1_EXTI3_Mask
#define SYSCFG_EXTICR1_EXTI3_0                (((uint32_t)0x1 << SYSCFG_EXTICR1_EXTI3_Pos))
#define SYSCFG_EXTICR1_EXTI3_1                (((uint32_t)0x2 << SYSCFG_EXTICR1_EXTI3_Pos))
#define SYSCFG_EXTICR1_EXTI3_2                (((uint32_t)0x4 << SYSCFG_EXTICR1_EXTI3_Pos))
#define SYSCFG_EXTICR1_EXTI3_3                (((uint32_t)0x8 << SYSCFG_EXTICR1_EXTI3_Pos))

/********************************** SYSCFG->EXTICR2  ************************************/
#define SYSCFG_EXTICR2_EXTI4_Pos              ((uint32_t)0)                     /* EXTIy external interrupt source input selection */
#define SYSCFG_EXTICR2_EXTI4_Mask             (((uint32_t)0x0F) << 0)
#define SYSCFG_EXTICR2_EXTI4                  SYSCFG_EXTICR2_EXTI4_Mask
#define SYSCFG_EXTICR2_EXTI4_0                (((uint32_t)0x1))
#define SYSCFG_EXTICR2_EXTI4_1                (((uint32_t)0x2))
#define SYSCFG_EXTICR2_EXTI4_2                (((uint32_t)0x4))
#define SYSCFG_EXTICR2_EXTI4_3                (((uint32_t)0x8))
#define SYSCFG_EXTICR2_EXTI5_Pos              ((uint32_t)4)                     /* EXTIy external interrupt source input selection */
#define SYSCFG_EXTICR2_EXTI5_Mask             (((uint32_t)0x0F) << 4)
#define SYSCFG_EXTICR2_EXTI5                  SYSCFG_EXTICR2_EXTI5_Mask
#define SYSCFG_EXTICR2_EXTI5_0                (((uint32_t)0x1 << SYSCFG_EXTICR2_EXTI5_Pos))
#define SYSCFG_EXTICR2_EXTI5_1                (((uint32_t)0x2 << SYSCFG_EXTICR2_EXTI5_Pos))
#define SYSCFG_EXTICR2_EXTI5_2                (((uint32_t)0x4 << SYSCFG_EXTICR2_EXTI5_Pos))
#define SYSCFG_EXTICR2_EXTI5_3                (((uint32_t)0x8 << SYSCFG_EXTICR2_EXTI5_Pos))
#define SYSCFG_EXTICR2_EXTI6_Pos              ((uint32_t)8)                     /* EXTIy external interrupt source input selection */
#define SYSCFG_EXTICR2_EXTI6_Mask             (((uint32_t)0x0F) << 8)
#define SYSCFG_EXTICR2_EXTI6                  SYSCFG_EXTICR2_EXTI6_Mask
#define SYSCFG_EXTICR2_EXTI6_0                (((uint32_t)0x1 << SYSCFG_EXTICR2_EXTI6_Pos))
#define SYSCFG_EXTICR2_EXTI6_1                (((uint32_t)0x2 << SYSCFG_EXTICR2_EXTI6_Pos))
#define SYSCFG_EXTICR2_EXTI6_2                (((uint32_t)0x4 << SYSCFG_EXTICR2_EXTI6_Pos))
#define SYSCFG_EXTICR2_EXTI6_3                (((uint32_t)0x8 << SYSCFG_EXTICR2_EXTI6_Pos))
#define SYSCFG_EXTICR2_EXTI7_Pos              ((uint32_t)12)                    /* EXTIy external interrupt source input selection */
#define SYSCFG_EXTICR2_EXTI7_Mask             (((uint32_t)0x0F) << 12)
#define SYSCFG_EXTICR2_EXTI7                  SYSCFG_EXTICR2_EXTI7_Mask
#define SYSCFG_EXTICR2_EXTI7_0                (((uint32_t)0x1 << SYSCFG_EXTICR2_EXTI7_Pos))
#define SYSCFG_EXTICR2_EXTI7_1                (((uint32_t)0x2 << SYSCFG_EXTICR2_EXTI7_Pos))
#define SYSCFG_EXTICR2_EXTI7_2                (((uint32_t)0x4 << SYSCFG_EXTICR2_EXTI7_Pos))
#define SYSCFG_EXTICR2_EXTI7_3                (((uint32_t)0x8 << SYSCFG_EXTICR2_EXTI7_Pos))

/********************************** SYSCFG->EXTICR3  ************************************/
#define SYSCFG_EXTICR3_EXTI8_Pos              ((uint32_t)0)                     /* EXTIy external interrupt source input selection */
#define SYSCFG_EXTICR3_EXTI8_Mask             (((uint32_t)0x0F) << 0)
#define SYSCFG_EXTICR3_EXTI8                  SYSCFG_EXTICR3_EXTI8_Mask
#define SYSCFG_EXTICR3_EXTI8_0                (((uint32_t)0x1))
#define SYSCFG_EXTICR3_EXTI8_1                (((uint32_t)0x2))
#define SYSCFG_EXTICR3_EXTI8_2                (((uint32_t)0x4))
#define SYSCFG_EXTICR3_EXTI8_3                (((uint32_t)0x8))
#define SYSCFG_EXTICR3_EXTI9_Pos              ((uint32_t)4)                     /* EXTIy external interrupt source input selection */
#define SYSCFG_EXTICR3_EXTI9_Mask             (((uint32_t)0x0F) << 4)
#define SYSCFG_EXTICR3_EXTI9                  SYSCFG_EXTICR3_EXTI9_Mask
#define SYSCFG_EXTICR3_EXTI9_0                (((uint32_t)0x1 << SYSCFG_EXTICR3_EXTI9_Pos))
#define SYSCFG_EXTICR3_EXTI9_1                (((uint32_t)0x2 << SYSCFG_EXTICR3_EXTI9_Pos))
#define SYSCFG_EXTICR3_EXTI9_2                (((uint32_t)0x4 << SYSCFG_EXTICR3_EXTI9_Pos))
#define SYSCFG_EXTICR3_EXTI9_3                (((uint32_t)0x8 << SYSCFG_EXTICR3_EXTI9_Pos))
#define SYSCFG_EXTICR3_EXTI10_Pos             ((uint32_t)8)                     /* EXTIy external interrupt source input selection */
#define SYSCFG_EXTICR3_EXTI10_Mask            (((uint32_t)0x0F) << 8)
#define SYSCFG_EXTICR3_EXTI10                 SYSCFG_EXTICR3_EXTI10_Mask
#define SYSCFG_EXTICR3_EXTI10_0               (((uint32_t)0x1 << SYSCFG_EXTICR3_EXTI10_Pos))
#define SYSCFG_EXTICR3_EXTI10_1               (((uint32_t)0x2 << SYSCFG_EXTICR3_EXTI10_Pos))
#define SYSCFG_EXTICR3_EXTI10_2               (((uint32_t)0x4 << SYSCFG_EXTICR3_EXTI10_Pos))
#define SYSCFG_EXTICR3_EXTI10_3               (((uint32_t)0x8 << SYSCFG_EXTICR3_EXTI10_Pos))
#define SYSCFG_EXTICR3_EXTI11_Pos             ((uint32_t)12)                    /* EXTIy external interrupt source input selection */
#define SYSCFG_EXTICR3_EXTI11_Mask            (((uint32_t)0x0F) << 12)
#define SYSCFG_EXTICR3_EXTI11                 SYSCFG_EXTICR3_EXTI11_Mask
#define SYSCFG_EXTICR3_EXTI11_0               (((uint32_t)0x1 << SYSCFG_EXTICR3_EXTI11_Pos))
#define SYSCFG_EXTICR3_EXTI11_1               (((uint32_t)0x2 << SYSCFG_EXTICR3_EXTI11_Pos))
#define SYSCFG_EXTICR3_EXTI11_2               (((uint32_t)0x4 << SYSCFG_EXTICR3_EXTI11_Pos))
#define SYSCFG_EXTICR3_EXTI11_3               (((uint32_t)0x8 << SYSCFG_EXTICR3_EXTI11_Pos))

/********************************** SYSCFG->EXTICR4  ************************************/
#define SYSCFG_EXTICR4_EXTI12_Pos             ((uint32_t)0)                     /* EXTIy external interrupt source input selection */
#define SYSCFG_EXTICR4_EXTI12_Mask            (((uint32_t)0x0F) << 0)
#define SYSCFG_EXTICR4_EXTI12                 SYSCFG_EXTICR4_EXTI12_Mask
#define SYSCFG_EXTICR4_EXTI12_0               (((uint32_t)0x1))
#define SYSCFG_EXTICR4_EXTI12_1               (((uint32_t)0x2))
#define SYSCFG_EXTICR4_EXTI12_2               (((uint32_t)0x4))
#define SYSCFG_EXTICR4_EXTI12_3               (((uint32_t)0x8))
#define SYSCFG_EXTICR4_EXTI13_Pos             ((uint32_t)4)                     /* EXTIy external interrupt source input selection */
#define SYSCFG_EXTICR4_EXTI13_Mask            (((uint32_t)0x0F) << 4)
#define SYSCFG_EXTICR4_EXTI13                 SYSCFG_EXTICR4_EXTI13_Mask
#define SYSCFG_EXTICR4_EXTI13_0               (((uint32_t)0x1 << SYSCFG_EXTICR4_EXTI13_Pos))
#define SYSCFG_EXTICR4_EXTI13_1               (((uint32_t)0x2 << SYSCFG_EXTICR4_EXTI13_Pos))
#define SYSCFG_EXTICR4_EXTI13_2               (((uint32_t)0x4 << SYSCFG_EXTICR4_EXTI13_Pos))
#define SYSCFG_EXTICR4_EXTI13_3               (((uint32_t)0x8 << SYSCFG_EXTICR4_EXTI13_Pos))
#define SYSCFG_EXTICR4_EXTI14_Pos             ((uint32_t)8)                     /* EXTIy external interrupt source input selection */
#define SYSCFG_EXTICR4_EXTI14_Mask            (((uint32_t)0x0F) << 8)
#define SYSCFG_EXTICR4_EXTI14                 SYSCFG_EXTICR4_EXTI14_Mask
#define SYSCFG_EXTICR4_EXTI14_0               (((uint32_t)0x1 << SYSCFG_EXTICR4_EXTI14_Pos))
#define SYSCFG_EXTICR4_EXTI14_1               (((uint32_t)0x2 << SYSCFG_EXTICR4_EXTI14_Pos))
#define SYSCFG_EXTICR4_EXTI14_2               (((uint32_t)0x4 << SYSCFG_EXTICR4_EXTI14_Pos))
#define SYSCFG_EXTICR4_EXTI14_3               (((uint32_t)0x8 << SYSCFG_EXTICR4_EXTI14_Pos))
#define SYSCFG_EXTICR4_EXTI15_Pos             ((uint32_t)12)                    /* EXTIy external interrupt source input selection */
#define SYSCFG_EXTICR4_EXTI15_Mask            (((uint32_t)0x0F) << 12)
#define SYSCFG_EXTICR4_EXTI15                 SYSCFG_EXTICR4_EXTI15_Mask
#define SYSCFG_EXTICR4_EXTI15_0               (((uint32_t)0x1 << SYSCFG_EXTICR4_EXTI15_Pos))
#define SYSCFG_EXTICR4_EXTI15_1               (((uint32_t)0x2 << SYSCFG_EXTICR4_EXTI15_Pos))
#define SYSCFG_EXTICR4_EXTI15_2               (((uint32_t)0x4 << SYSCFG_EXTICR4_EXTI15_Pos))
#define SYSCFG_EXTICR4_EXTI15_3               (((uint32_t)0x8 << SYSCFG_EXTICR4_EXTI15_Pos))

/*********************************** SYSCFG->CFGR2  *************************************/
#define SYSCFG_CFGR2_TIM3_CH4_REMAP_Pos       ((uint32_t)16)                    /* TIM3 channel4 remapping */
#define SYSCFG_CFGR2_TIM3_CH4_REMAP_Mask      (((uint32_t)0x07) << 16)
#define SYSCFG_CFGR2_TIM3_CH4_REMAP           SYSCFG_CFGR2_TIM3_CH4_REMAP_Mask
#define SYSCFG_CFGR2_TIM3_CH4_REMAP_0         (((uint32_t)0x1 << SYSCFG_CFGR2_TIM3_CH4_REMAP_Pos))
#define SYSCFG_CFGR2_TIM3_CH4_REMAP_1         (((uint32_t)0x2 << SYSCFG_CFGR2_TIM3_CH4_REMAP_Pos))
#define SYSCFG_CFGR2_TIM3_CH4_REMAP_2         (((uint32_t)0x4 << SYSCFG_CFGR2_TIM3_CH4_REMAP_Pos))
#define SYSCFG_CFGR2_PVD_LOCK_Pos             ((uint32_t)2)                     /* PVD lock enable bit */
#define SYSCFG_CFGR2_PVD_LOCK_Mask            (((uint32_t)0x01) << 2)
#define SYSCFG_CFGR2_PVD_LOCK                 SYSCFG_CFGR2_PVD_LOCK_Mask
#define SYSCFG_CFGR2_LOCKUP_LOCK_Pos          ((uint32_t)0)                     /* Cortex-M0 LOCKUP bit enable bit */
#define SYSCFG_CFGR2_LOCKUP_LOCK_Mask         (((uint32_t)0x01) << 0)
#define SYSCFG_CFGR2_LOCKUP_LOCK              SYSCFG_CFGR2_LOCKUP_LOCK_Mask

/*********************************** SYSCFG->CFGR3  *************************************/
#define SYSCFG_CFGR3_REF_LOCK_Pos             ((uint32_t)31)                    /* SYSCFG_CFGR3 Register lock */
#define SYSCFG_CFGR3_REF_LOCK_Mask            (((uint32_t)0x01) << 31)
#define SYSCFG_CFGR3_REF_LOCK                 SYSCFG_CFGR3_REF_LOCK_Mask
#define SYSCFG_CFGR3_VREFINT_RDYF_Pos         ((uint32_t)30)                    /* VREFINT read flag */
#define SYSCFG_CFGR3_VREFINT_RDYF_Mask        (((uint32_t)0x01) << 30)
#define SYSCFG_CFGR3_VREFINT_RDYF             SYSCFG_CFGR3_VREFINT_RDYF_Mask
#define SYSCFG_CFGR3_EN_BUF_AIN19_Pos         ((uint32_t)23)                    /* Enable buffer of ADC AIN19 */
#define SYSCFG_CFGR3_EN_BUF_AIN19_Mask        (((uint32_t)0x01) << 23)
#define SYSCFG_CFGR3_EN_BUF_AIN19             SYSCFG_CFGR3_EN_BUF_AIN19_Mask
#define SYSCFG_CFGR3_EN_SW_AIN19_Pos          ((uint32_t)21)                    /* Enable switch of ADC AIN19 weak in */
#define SYSCFG_CFGR3_EN_SW_AIN19_Mask         (((uint32_t)0x01) << 21)
#define SYSCFG_CFGR3_EN_SW_AIN19              SYSCFG_CFGR3_EN_SW_AIN19_Mask
#define SYSCFG_CFGR3_ENBUF_VREFINT_COMP1_2_Pos  ((uint32_t)12)                  /* VREFINT reference for COMP1 and COMP2 scaler enable bit */
#define SYSCFG_CFGR3_ENBUF_VREFINT_COMP1_2_Mask  (((uint32_t)0x01) << 12)
#define SYSCFG_CFGR3_ENBUF_VREFINT_COMP1_2    SYSCFG_CFGR3_ENBUF_VREFINT_COMP1_2_Mask
#define SYSCFG_CFGR3_ENBUF_SENSOR_OUT_Pos     ((uint32_t)10)                    /* Enable switch of sensor out */
#define SYSCFG_CFGR3_ENBUF_SENSOR_OUT_Mask    (((uint32_t)0x01) << 10)
#define SYSCFG_CFGR3_ENBUF_SENSOR_OUT         SYSCFG_CFGR3_ENBUF_SENSOR_OUT_Mask
#define SYSCFG_CFGR3_ENBUF_VREFINT_ADC_Pos    ((uint32_t)8)                     /* VREFINT reference for ADC enable bit */
#define SYSCFG_CFGR3_ENBUF_VREFINT_ADC_Mask   (((uint32_t)0x01) << 8)
#define SYSCFG_CFGR3_ENBUF_VREFINT_ADC        SYSCFG_CFGR3_ENBUF_VREFINT_ADC_Mask
#define SYSCFG_CFGR3_SEL_VREF_OUT_Pos         ((uint32_t)4)                     /* VREFINT_ADC connection bit */
#define SYSCFG_CFGR3_SEL_VREF_OUT_Mask        (((uint32_t)0x07) << 4)
#define SYSCFG_CFGR3_SEL_VREF_OUT             SYSCFG_CFGR3_SEL_VREF_OUT_Mask
#define SYSCFG_CFGR3_SEL_VREF_OUT_0           (((uint32_t)0x1 << SYSCFG_CFGR3_SEL_VREF_OUT_Pos))
#define SYSCFG_CFGR3_SEL_VREF_OUT_1           (((uint32_t)0x2 << SYSCFG_CFGR3_SEL_VREF_OUT_Pos))
#define SYSCFG_CFGR3_SEL_VREF_OUT_2           (((uint32_t)0x4 << SYSCFG_CFGR3_SEL_VREF_OUT_Pos))
#define SYSCFG_CFGR3_EN_VREFINT_Pos           ((uint32_t)0)                     /* Scaler for COMP1 and COMP2 enable bit */
#define SYSCFG_CFGR3_EN_VREFINT_Mask          (((uint32_t)0x01) << 0)
#define SYSCFG_CFGR3_EN_VREFINT               SYSCFG_CFGR3_EN_VREFINT_Mask

/*****************************************************************************************
*                                     Peripheral GPIO                                    *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t MODER;                  /* MODER */
    __IO uint32_t OTYPER;                 /* OTYPER */
    __IO uint32_t OSPEEDR;                /* OSPEEDR */
    __IO uint32_t PUPDR;                  /* PUPDR */
    __I  uint32_t IDR;                    /* IDR */
    __IO uint32_t ODR;                    /* ODR */
    __O  uint32_t BSRR;                   /* BSRR */
    __IO uint32_t LCKR;                   /* LCKR */
    __IO uint32_t AFRL;                   /* AFRL */
    __IO uint32_t AFRH;                   /* AFRH */
    __O  uint32_t BRR;                    /* BRR */
    uint16_t RESERVED1[2];
    __IO uint32_t IOSR;                   /* IOSR */
} GPIO_TypeDef;

/************************************ GPIO->MODER  **************************************/
#define GPIO_MODER_MODER0_Pos                 ((uint32_t)0)                     /* Port x pin y mode bits */
#define GPIO_MODER_MODER0_Mask                (((uint32_t)0x03) << 0)
#define GPIO_MODER_MODER0                     GPIO_MODER_MODER0_Mask
#define GPIO_MODER_MODER0_0                   (((uint32_t)0x1))
#define GPIO_MODER_MODER0_1                   (((uint32_t)0x2))
#define GPIO_MODER_MODER1_Pos                 ((uint32_t)2)                     /* Port x pin y mode bits */
#define GPIO_MODER_MODER1_Mask                (((uint32_t)0x03) << 2)
#define GPIO_MODER_MODER1                     GPIO_MODER_MODER1_Mask
#define GPIO_MODER_MODER1_0                   (((uint32_t)0x1 << GPIO_MODER_MODER1_Pos))
#define GPIO_MODER_MODER1_1                   (((uint32_t)0x2 << GPIO_MODER_MODER1_Pos))
#define GPIO_MODER_MODER2_Pos                 ((uint32_t)4)                     /* Port x pin y mode bits */
#define GPIO_MODER_MODER2_Mask                (((uint32_t)0x03) << 4)
#define GPIO_MODER_MODER2                     GPIO_MODER_MODER2_Mask
#define GPIO_MODER_MODER2_0                   (((uint32_t)0x1 << GPIO_MODER_MODER2_Pos))
#define GPIO_MODER_MODER2_1                   (((uint32_t)0x2 << GPIO_MODER_MODER2_Pos))
#define GPIO_MODER_MODER3_Pos                 ((uint32_t)6)                     /* Port x pin y mode bits */
#define GPIO_MODER_MODER3_Mask                (((uint32_t)0x03) << 6)
#define GPIO_MODER_MODER3                     GPIO_MODER_MODER3_Mask
#define GPIO_MODER_MODER3_0                   (((uint32_t)0x1 << GPIO_MODER_MODER3_Pos))
#define GPIO_MODER_MODER3_1                   (((uint32_t)0x2 << GPIO_MODER_MODER3_Pos))
#define GPIO_MODER_MODER4_Pos                 ((uint32_t)8)                     /* Port x pin y mode bits */
#define GPIO_MODER_MODER4_Mask                (((uint32_t)0x03) << 8)
#define GPIO_MODER_MODER4                     GPIO_MODER_MODER4_Mask
#define GPIO_MODER_MODER4_0                   (((uint32_t)0x1 << GPIO_MODER_MODER4_Pos))
#define GPIO_MODER_MODER4_1                   (((uint32_t)0x2 << GPIO_MODER_MODER4_Pos))
#define GPIO_MODER_MODER5_Pos                 ((uint32_t)10)                    /* Port x pin y mode bits */
#define GPIO_MODER_MODER5_Mask                (((uint32_t)0x03) << 10)
#define GPIO_MODER_MODER5                     GPIO_MODER_MODER5_Mask
#define GPIO_MODER_MODER5_0                   (((uint32_t)0x1 << GPIO_MODER_MODER5_Pos))
#define GPIO_MODER_MODER5_1                   (((uint32_t)0x2 << GPIO_MODER_MODER5_Pos))
#define GPIO_MODER_MODER6_Pos                 ((uint32_t)12)                    /* Port x pin y mode bits */
#define GPIO_MODER_MODER6_Mask                (((uint32_t)0x03) << 12)
#define GPIO_MODER_MODER6                     GPIO_MODER_MODER6_Mask
#define GPIO_MODER_MODER6_0                   (((uint32_t)0x1 << GPIO_MODER_MODER6_Pos))
#define GPIO_MODER_MODER6_1                   (((uint32_t)0x2 << GPIO_MODER_MODER6_Pos))
#define GPIO_MODER_MODER7_Pos                 ((uint32_t)14)                    /* Port x pin y mode bits */
#define GPIO_MODER_MODER7_Mask                (((uint32_t)0x03) << 14)
#define GPIO_MODER_MODER7                     GPIO_MODER_MODER7_Mask
#define GPIO_MODER_MODER7_0                   (((uint32_t)0x1 << GPIO_MODER_MODER7_Pos))
#define GPIO_MODER_MODER7_1                   (((uint32_t)0x2 << GPIO_MODER_MODER7_Pos))
#define GPIO_MODER_MODER8_Pos                 ((uint32_t)16)                    /* Port x pin y mode bits */
#define GPIO_MODER_MODER8_Mask                (((uint32_t)0x03) << 16)
#define GPIO_MODER_MODER8                     GPIO_MODER_MODER8_Mask
#define GPIO_MODER_MODER8_0                   (((uint32_t)0x1 << GPIO_MODER_MODER8_Pos))
#define GPIO_MODER_MODER8_1                   (((uint32_t)0x2 << GPIO_MODER_MODER8_Pos))
#define GPIO_MODER_MODER9_Pos                 ((uint32_t)18)                    /* Port x pin y mode bits */
#define GPIO_MODER_MODER9_Mask                (((uint32_t)0x03) << 18)
#define GPIO_MODER_MODER9                     GPIO_MODER_MODER9_Mask
#define GPIO_MODER_MODER9_0                   (((uint32_t)0x1 << GPIO_MODER_MODER9_Pos))
#define GPIO_MODER_MODER9_1                   (((uint32_t)0x2 << GPIO_MODER_MODER9_Pos))
#define GPIO_MODER_MODER10_Pos                ((uint32_t)20)                    /* Port x pin y mode bits */
#define GPIO_MODER_MODER10_Mask               (((uint32_t)0x03) << 20)
#define GPIO_MODER_MODER10                    GPIO_MODER_MODER10_Mask
#define GPIO_MODER_MODER10_0                  (((uint32_t)0x1 << GPIO_MODER_MODER10_Pos))
#define GPIO_MODER_MODER10_1                  (((uint32_t)0x2 << GPIO_MODER_MODER10_Pos))
#define GPIO_MODER_MODER11_Pos                ((uint32_t)22)                    /* Port x pin y mode bits */
#define GPIO_MODER_MODER11_Mask               (((uint32_t)0x03) << 22)
#define GPIO_MODER_MODER11                    GPIO_MODER_MODER11_Mask
#define GPIO_MODER_MODER11_0                  (((uint32_t)0x1 << GPIO_MODER_MODER11_Pos))
#define GPIO_MODER_MODER11_1                  (((uint32_t)0x2 << GPIO_MODER_MODER11_Pos))
#define GPIO_MODER_MODER12_Pos                ((uint32_t)24)                    /* Port x pin y mode bits */
#define GPIO_MODER_MODER12_Mask               (((uint32_t)0x03) << 24)
#define GPIO_MODER_MODER12                    GPIO_MODER_MODER12_Mask
#define GPIO_MODER_MODER12_0                  (((uint32_t)0x1 << GPIO_MODER_MODER12_Pos))
#define GPIO_MODER_MODER12_1                  (((uint32_t)0x2 << GPIO_MODER_MODER12_Pos))
#define GPIO_MODER_MODER13_Pos                ((uint32_t)26)                    /* Port x pin y mode bits */
#define GPIO_MODER_MODER13_Mask               (((uint32_t)0x03) << 26)
#define GPIO_MODER_MODER13                    GPIO_MODER_MODER13_Mask
#define GPIO_MODER_MODER13_0                  (((uint32_t)0x1 << GPIO_MODER_MODER13_Pos))
#define GPIO_MODER_MODER13_1                  (((uint32_t)0x2 << GPIO_MODER_MODER13_Pos))
#define GPIO_MODER_MODER14_Pos                ((uint32_t)28)                    /* Port x pin y mode bits */
#define GPIO_MODER_MODER14_Mask               (((uint32_t)0x03) << 28)
#define GPIO_MODER_MODER14                    GPIO_MODER_MODER14_Mask
#define GPIO_MODER_MODER14_0                  (((uint32_t)0x1 << GPIO_MODER_MODER14_Pos))
#define GPIO_MODER_MODER14_1                  (((uint32_t)0x2 << GPIO_MODER_MODER14_Pos))
#define GPIO_MODER_MODER15_Pos                ((uint32_t)30)                    /* Port x pin y mode bits */
#define GPIO_MODER_MODER15_Mask               (((uint32_t)0x03) << 30)
#define GPIO_MODER_MODER15                    GPIO_MODER_MODER15_Mask
#define GPIO_MODER_MODER15_0                  (((uint32_t)0x1 << GPIO_MODER_MODER15_Pos))
#define GPIO_MODER_MODER15_1                  (((uint32_t)0x2 << GPIO_MODER_MODER15_Pos))

/************************************ GPIO->OTYPER  *************************************/
#define GPIO_OTYPER_OT0_Pos                   ((uint32_t)0)                     /* Port x pin y output type bit */
#define GPIO_OTYPER_OT0_Mask                  (((uint32_t)0x01) << 0)
#define GPIO_OTYPER_OT0                       GPIO_OTYPER_OT0_Mask
#define GPIO_OTYPER_OT1_Pos                   ((uint32_t)1)                     /* Port x pin y output type bit */
#define GPIO_OTYPER_OT1_Mask                  (((uint32_t)0x01) << 1)
#define GPIO_OTYPER_OT1                       GPIO_OTYPER_OT1_Mask
#define GPIO_OTYPER_OT2_Pos                   ((uint32_t)2)                     /* Port x pin y output type bit */
#define GPIO_OTYPER_OT2_Mask                  (((uint32_t)0x01) << 2)
#define GPIO_OTYPER_OT2                       GPIO_OTYPER_OT2_Mask
#define GPIO_OTYPER_OT3_Pos                   ((uint32_t)3)                     /* Port x pin y output type bit */
#define GPIO_OTYPER_OT3_Mask                  (((uint32_t)0x01) << 3)
#define GPIO_OTYPER_OT3                       GPIO_OTYPER_OT3_Mask
#define GPIO_OTYPER_OT4_Pos                   ((uint32_t)4)                     /* Port x pin y output type bit */
#define GPIO_OTYPER_OT4_Mask                  (((uint32_t)0x01) << 4)
#define GPIO_OTYPER_OT4                       GPIO_OTYPER_OT4_Mask
#define GPIO_OTYPER_OT5_Pos                   ((uint32_t)5)                     /* Port x pin y output type bit */
#define GPIO_OTYPER_OT5_Mask                  (((uint32_t)0x01) << 5)
#define GPIO_OTYPER_OT5                       GPIO_OTYPER_OT5_Mask
#define GPIO_OTYPER_OT6_Pos                   ((uint32_t)6)                     /* Port x pin y output type bit */
#define GPIO_OTYPER_OT6_Mask                  (((uint32_t)0x01) << 6)
#define GPIO_OTYPER_OT6                       GPIO_OTYPER_OT6_Mask
#define GPIO_OTYPER_OT7_Pos                   ((uint32_t)7)                     /* Port x pin y output type bit */
#define GPIO_OTYPER_OT7_Mask                  (((uint32_t)0x01) << 7)
#define GPIO_OTYPER_OT7                       GPIO_OTYPER_OT7_Mask
#define GPIO_OTYPER_OT8_Pos                   ((uint32_t)8)                     /* Port x pin y output type bit */
#define GPIO_OTYPER_OT8_Mask                  (((uint32_t)0x01) << 8)
#define GPIO_OTYPER_OT8                       GPIO_OTYPER_OT8_Mask
#define GPIO_OTYPER_OT9_Pos                   ((uint32_t)9)                     /* Port x pin y output type bit */
#define GPIO_OTYPER_OT9_Mask                  (((uint32_t)0x01) << 9)
#define GPIO_OTYPER_OT9                       GPIO_OTYPER_OT9_Mask
#define GPIO_OTYPER_OT10_Pos                  ((uint32_t)10)                    /* Port x pin y output type bit */
#define GPIO_OTYPER_OT10_Mask                 (((uint32_t)0x01) << 10)
#define GPIO_OTYPER_OT10                      GPIO_OTYPER_OT10_Mask
#define GPIO_OTYPER_OT11_Pos                  ((uint32_t)11)                    /* Port x pin y output type bit */
#define GPIO_OTYPER_OT11_Mask                 (((uint32_t)0x01) << 11)
#define GPIO_OTYPER_OT11                      GPIO_OTYPER_OT11_Mask
#define GPIO_OTYPER_OT12_Pos                  ((uint32_t)12)                    /* Port x pin y output type bit */
#define GPIO_OTYPER_OT12_Mask                 (((uint32_t)0x01) << 12)
#define GPIO_OTYPER_OT12                      GPIO_OTYPER_OT12_Mask
#define GPIO_OTYPER_OT13_Pos                  ((uint32_t)13)                    /* Port x pin y output type bit */
#define GPIO_OTYPER_OT13_Mask                 (((uint32_t)0x01) << 13)
#define GPIO_OTYPER_OT13                      GPIO_OTYPER_OT13_Mask
#define GPIO_OTYPER_OT14_Pos                  ((uint32_t)14)                    /* Port x pin y output type bit */
#define GPIO_OTYPER_OT14_Mask                 (((uint32_t)0x01) << 14)
#define GPIO_OTYPER_OT14                      GPIO_OTYPER_OT14_Mask
#define GPIO_OTYPER_OT15_Pos                  ((uint32_t)15)                    /* Port x pin y output type bit */
#define GPIO_OTYPER_OT15_Mask                 (((uint32_t)0x01) << 15)
#define GPIO_OTYPER_OT15                      GPIO_OTYPER_OT15_Mask

/*********************************** GPIO->OSPEEDR  *************************************/
#define GPIO_OSPEEDR_OSPEED0_Pos              ((uint32_t)0)                     /* Port x pin y output speed bits */
#define GPIO_OSPEEDR_OSPEED0_Mask             (((uint32_t)0x03) << 0)
#define GPIO_OSPEEDR_OSPEED0                  GPIO_OSPEEDR_OSPEED0_Mask
#define GPIO_OSPEEDR_OSPEED0_0                (((uint32_t)0x1))
#define GPIO_OSPEEDR_OSPEED0_1                (((uint32_t)0x2))
#define GPIO_OSPEEDR_OSPEED1_Pos              ((uint32_t)2)                     /* Port x pin y output speed bits */
#define GPIO_OSPEEDR_OSPEED1_Mask             (((uint32_t)0x03) << 2)
#define GPIO_OSPEEDR_OSPEED1                  GPIO_OSPEEDR_OSPEED1_Mask
#define GPIO_OSPEEDR_OSPEED1_0                (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEED1_Pos))
#define GPIO_OSPEEDR_OSPEED1_1                (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEED1_Pos))
#define GPIO_OSPEEDR_OSPEED2_Pos              ((uint32_t)4)                     /* Port x pin y output speed bits */
#define GPIO_OSPEEDR_OSPEED2_Mask             (((uint32_t)0x03) << 4)
#define GPIO_OSPEEDR_OSPEED2                  GPIO_OSPEEDR_OSPEED2_Mask
#define GPIO_OSPEEDR_OSPEED2_0                (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEED2_Pos))
#define GPIO_OSPEEDR_OSPEED2_1                (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEED2_Pos))
#define GPIO_OSPEEDR_OSPEED3_Pos              ((uint32_t)6)                     /* Port x pin y output speed bits */
#define GPIO_OSPEEDR_OSPEED3_Mask             (((uint32_t)0x03) << 6)
#define GPIO_OSPEEDR_OSPEED3                  GPIO_OSPEEDR_OSPEED3_Mask
#define GPIO_OSPEEDR_OSPEED3_0                (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEED3_Pos))
#define GPIO_OSPEEDR_OSPEED3_1                (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEED3_Pos))
#define GPIO_OSPEEDR_OSPEED4_Pos              ((uint32_t)8)                     /* Port x pin y output speed bits */
#define GPIO_OSPEEDR_OSPEED4_Mask             (((uint32_t)0x03) << 8)
#define GPIO_OSPEEDR_OSPEED4                  GPIO_OSPEEDR_OSPEED4_Mask
#define GPIO_OSPEEDR_OSPEED4_0                (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEED4_Pos))
#define GPIO_OSPEEDR_OSPEED4_1                (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEED4_Pos))
#define GPIO_OSPEEDR_OSPEED5_Pos              ((uint32_t)10)                    /* Port x pin y output speed bits */
#define GPIO_OSPEEDR_OSPEED5_Mask             (((uint32_t)0x03) << 10)
#define GPIO_OSPEEDR_OSPEED5                  GPIO_OSPEEDR_OSPEED5_Mask
#define GPIO_OSPEEDR_OSPEED5_0                (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEED5_Pos))
#define GPIO_OSPEEDR_OSPEED5_1                (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEED5_Pos))
#define GPIO_OSPEEDR_OSPEED6_Pos              ((uint32_t)12)                    /* Port x pin y output speed bits */
#define GPIO_OSPEEDR_OSPEED6_Mask             (((uint32_t)0x03) << 12)
#define GPIO_OSPEEDR_OSPEED6                  GPIO_OSPEEDR_OSPEED6_Mask
#define GPIO_OSPEEDR_OSPEED6_0                (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEED6_Pos))
#define GPIO_OSPEEDR_OSPEED6_1                (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEED6_Pos))
#define GPIO_OSPEEDR_OSPEED7_Pos              ((uint32_t)14)                    /* Port x pin y output speed bits */
#define GPIO_OSPEEDR_OSPEED7_Mask             (((uint32_t)0x03) << 14)
#define GPIO_OSPEEDR_OSPEED7                  GPIO_OSPEEDR_OSPEED7_Mask
#define GPIO_OSPEEDR_OSPEED7_0                (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEED7_Pos))
#define GPIO_OSPEEDR_OSPEED7_1                (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEED7_Pos))
#define GPIO_OSPEEDR_OSPEED8_Pos              ((uint32_t)16)                    /* Port x pin y output speed bits */
#define GPIO_OSPEEDR_OSPEED8_Mask             (((uint32_t)0x03) << 16)
#define GPIO_OSPEEDR_OSPEED8                  GPIO_OSPEEDR_OSPEED8_Mask
#define GPIO_OSPEEDR_OSPEED8_0                (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEED8_Pos))
#define GPIO_OSPEEDR_OSPEED8_1                (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEED8_Pos))
#define GPIO_OSPEEDR_OSPEED9_Pos              ((uint32_t)18)                    /* Port x pin y output speed bits */
#define GPIO_OSPEEDR_OSPEED9_Mask             (((uint32_t)0x03) << 18)
#define GPIO_OSPEEDR_OSPEED9                  GPIO_OSPEEDR_OSPEED9_Mask
#define GPIO_OSPEEDR_OSPEED9_0                (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEED9_Pos))
#define GPIO_OSPEEDR_OSPEED9_1                (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEED9_Pos))
#define GPIO_OSPEEDR_OSPEED10_Pos             ((uint32_t)20)                    /* Port x pin y output speed bits */
#define GPIO_OSPEEDR_OSPEED10_Mask            (((uint32_t)0x03) << 20)
#define GPIO_OSPEEDR_OSPEED10                 GPIO_OSPEEDR_OSPEED10_Mask
#define GPIO_OSPEEDR_OSPEED10_0               (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEED10_Pos))
#define GPIO_OSPEEDR_OSPEED10_1               (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEED10_Pos))
#define GPIO_OSPEEDR_OSPEED11_Pos             ((uint32_t)22)                    /* Port x pin y output speed bits */
#define GPIO_OSPEEDR_OSPEED11_Mask            (((uint32_t)0x03) << 22)
#define GPIO_OSPEEDR_OSPEED11                 GPIO_OSPEEDR_OSPEED11_Mask
#define GPIO_OSPEEDR_OSPEED11_0               (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEED11_Pos))
#define GPIO_OSPEEDR_OSPEED11_1               (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEED11_Pos))
#define GPIO_OSPEEDR_OSPEED12_Pos             ((uint32_t)24)                    /* Port x pin y output speed bits */
#define GPIO_OSPEEDR_OSPEED12_Mask            (((uint32_t)0x03) << 24)
#define GPIO_OSPEEDR_OSPEED12                 GPIO_OSPEEDR_OSPEED12_Mask
#define GPIO_OSPEEDR_OSPEED12_0               (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEED12_Pos))
#define GPIO_OSPEEDR_OSPEED12_1               (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEED12_Pos))
#define GPIO_OSPEEDR_OSPEED13_Pos             ((uint32_t)26)                    /* Port x pin y output speed bits */
#define GPIO_OSPEEDR_OSPEED13_Mask            (((uint32_t)0x03) << 26)
#define GPIO_OSPEEDR_OSPEED13                 GPIO_OSPEEDR_OSPEED13_Mask
#define GPIO_OSPEEDR_OSPEED13_0               (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEED13_Pos))
#define GPIO_OSPEEDR_OSPEED13_1               (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEED13_Pos))
#define GPIO_OSPEEDR_OSPEED14_Pos             ((uint32_t)28)                    /* Port x pin y output speed bits */
#define GPIO_OSPEEDR_OSPEED14_Mask            (((uint32_t)0x03) << 28)
#define GPIO_OSPEEDR_OSPEED14                 GPIO_OSPEEDR_OSPEED14_Mask
#define GPIO_OSPEEDR_OSPEED14_0               (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEED14_Pos))
#define GPIO_OSPEEDR_OSPEED14_1               (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEED14_Pos))
#define GPIO_OSPEEDR_OSPEED15_Pos             ((uint32_t)30)                    /* Port x pin y output speed bits */
#define GPIO_OSPEEDR_OSPEED15_Mask            (((uint32_t)0x03) << 30)
#define GPIO_OSPEEDR_OSPEED15                 GPIO_OSPEEDR_OSPEED15_Mask
#define GPIO_OSPEEDR_OSPEED15_0               (((uint32_t)0x1 << GPIO_OSPEEDR_OSPEED15_Pos))
#define GPIO_OSPEEDR_OSPEED15_1               (((uint32_t)0x2 << GPIO_OSPEEDR_OSPEED15_Pos))

/************************************ GPIO->PUPDR  **************************************/
#define GPIO_PUPDR_PUPD0_Pos                  ((uint32_t)0)                     /* Port x pin y pull -up/-down bits */
#define GPIO_PUPDR_PUPD0_Mask                 (((uint32_t)0x03) << 0)
#define GPIO_PUPDR_PUPD0                      GPIO_PUPDR_PUPD0_Mask
#define GPIO_PUPDR_PUPD0_0                    (((uint32_t)0x1))
#define GPIO_PUPDR_PUPD0_1                    (((uint32_t)0x2))
#define GPIO_PUPDR_PUPD1_Pos                  ((uint32_t)2)                     /* Port x pin y pull -up/-down bits */
#define GPIO_PUPDR_PUPD1_Mask                 (((uint32_t)0x03) << 2)
#define GPIO_PUPDR_PUPD1                      GPIO_PUPDR_PUPD1_Mask
#define GPIO_PUPDR_PUPD1_0                    (((uint32_t)0x1 << GPIO_PUPDR_PUPD1_Pos))
#define GPIO_PUPDR_PUPD1_1                    (((uint32_t)0x2 << GPIO_PUPDR_PUPD1_Pos))
#define GPIO_PUPDR_PUPD2_Pos                  ((uint32_t)4)                     /* Port x pin y pull -up/-down bits */
#define GPIO_PUPDR_PUPD2_Mask                 (((uint32_t)0x03) << 4)
#define GPIO_PUPDR_PUPD2                      GPIO_PUPDR_PUPD2_Mask
#define GPIO_PUPDR_PUPD2_0                    (((uint32_t)0x1 << GPIO_PUPDR_PUPD2_Pos))
#define GPIO_PUPDR_PUPD2_1                    (((uint32_t)0x2 << GPIO_PUPDR_PUPD2_Pos))
#define GPIO_PUPDR_PUPD3_Pos                  ((uint32_t)6)                     /* Port x pin y pull -up/-down bits */
#define GPIO_PUPDR_PUPD3_Mask                 (((uint32_t)0x03) << 6)
#define GPIO_PUPDR_PUPD3                      GPIO_PUPDR_PUPD3_Mask
#define GPIO_PUPDR_PUPD3_0                    (((uint32_t)0x1 << GPIO_PUPDR_PUPD3_Pos))
#define GPIO_PUPDR_PUPD3_1                    (((uint32_t)0x2 << GPIO_PUPDR_PUPD3_Pos))
#define GPIO_PUPDR_PUPD4_Pos                  ((uint32_t)8)                     /* Port x pin y pull -up/-down bits */
#define GPIO_PUPDR_PUPD4_Mask                 (((uint32_t)0x03) << 8)
#define GPIO_PUPDR_PUPD4                      GPIO_PUPDR_PUPD4_Mask
#define GPIO_PUPDR_PUPD4_0                    (((uint32_t)0x1 << GPIO_PUPDR_PUPD4_Pos))
#define GPIO_PUPDR_PUPD4_1                    (((uint32_t)0x2 << GPIO_PUPDR_PUPD4_Pos))
#define GPIO_PUPDR_PUPD5_Pos                  ((uint32_t)10)                    /* Port x pin y pull -up/-down bits */
#define GPIO_PUPDR_PUPD5_Mask                 (((uint32_t)0x03) << 10)
#define GPIO_PUPDR_PUPD5                      GPIO_PUPDR_PUPD5_Mask
#define GPIO_PUPDR_PUPD5_0                    (((uint32_t)0x1 << GPIO_PUPDR_PUPD5_Pos))
#define GPIO_PUPDR_PUPD5_1                    (((uint32_t)0x2 << GPIO_PUPDR_PUPD5_Pos))
#define GPIO_PUPDR_PUPD6_Pos                  ((uint32_t)12)                    /* Port x pin y pull -up/-down bits */
#define GPIO_PUPDR_PUPD6_Mask                 (((uint32_t)0x03) << 12)
#define GPIO_PUPDR_PUPD6                      GPIO_PUPDR_PUPD6_Mask
#define GPIO_PUPDR_PUPD6_0                    (((uint32_t)0x1 << GPIO_PUPDR_PUPD6_Pos))
#define GPIO_PUPDR_PUPD6_1                    (((uint32_t)0x2 << GPIO_PUPDR_PUPD6_Pos))
#define GPIO_PUPDR_PUPD7_Pos                  ((uint32_t)14)                    /* Port x pin y pull -up/-down bits */
#define GPIO_PUPDR_PUPD7_Mask                 (((uint32_t)0x03) << 14)
#define GPIO_PUPDR_PUPD7                      GPIO_PUPDR_PUPD7_Mask
#define GPIO_PUPDR_PUPD7_0                    (((uint32_t)0x1 << GPIO_PUPDR_PUPD7_Pos))
#define GPIO_PUPDR_PUPD7_1                    (((uint32_t)0x2 << GPIO_PUPDR_PUPD7_Pos))
#define GPIO_PUPDR_PUPD8_Pos                  ((uint32_t)16)                    /* Port x pin y pull -up/-down bits */
#define GPIO_PUPDR_PUPD8_Mask                 (((uint32_t)0x03) << 16)
#define GPIO_PUPDR_PUPD8                      GPIO_PUPDR_PUPD8_Mask
#define GPIO_PUPDR_PUPD8_0                    (((uint32_t)0x1 << GPIO_PUPDR_PUPD8_Pos))
#define GPIO_PUPDR_PUPD8_1                    (((uint32_t)0x2 << GPIO_PUPDR_PUPD8_Pos))
#define GPIO_PUPDR_PUPD9_Pos                  ((uint32_t)18)                    /* Port x pin y pull -up/-down bits */
#define GPIO_PUPDR_PUPD9_Mask                 (((uint32_t)0x03) << 18)
#define GPIO_PUPDR_PUPD9                      GPIO_PUPDR_PUPD9_Mask
#define GPIO_PUPDR_PUPD9_0                    (((uint32_t)0x1 << GPIO_PUPDR_PUPD9_Pos))
#define GPIO_PUPDR_PUPD9_1                    (((uint32_t)0x2 << GPIO_PUPDR_PUPD9_Pos))
#define GPIO_PUPDR_PUPD10_Pos                 ((uint32_t)20)                    /* Port x pin y pull -up/-down bits */
#define GPIO_PUPDR_PUPD10_Mask                (((uint32_t)0x03) << 20)
#define GPIO_PUPDR_PUPD10                     GPIO_PUPDR_PUPD10_Mask
#define GPIO_PUPDR_PUPD10_0                   (((uint32_t)0x1 << GPIO_PUPDR_PUPD10_Pos))
#define GPIO_PUPDR_PUPD10_1                   (((uint32_t)0x2 << GPIO_PUPDR_PUPD10_Pos))
#define GPIO_PUPDR_PUPD11_Pos                 ((uint32_t)22)                    /* Port x pin y pull -up/-down bits */
#define GPIO_PUPDR_PUPD11_Mask                (((uint32_t)0x03) << 22)
#define GPIO_PUPDR_PUPD11                     GPIO_PUPDR_PUPD11_Mask
#define GPIO_PUPDR_PUPD11_0                   (((uint32_t)0x1 << GPIO_PUPDR_PUPD11_Pos))
#define GPIO_PUPDR_PUPD11_1                   (((uint32_t)0x2 << GPIO_PUPDR_PUPD11_Pos))
#define GPIO_PUPDR_PUPD12_Pos                 ((uint32_t)24)                    /* Port x pin y pull -up/-down bits */
#define GPIO_PUPDR_PUPD12_Mask                (((uint32_t)0x03) << 24)
#define GPIO_PUPDR_PUPD12                     GPIO_PUPDR_PUPD12_Mask
#define GPIO_PUPDR_PUPD12_0                   (((uint32_t)0x1 << GPIO_PUPDR_PUPD12_Pos))
#define GPIO_PUPDR_PUPD12_1                   (((uint32_t)0x2 << GPIO_PUPDR_PUPD12_Pos))
#define GPIO_PUPDR_PUPD13_Pos                 ((uint32_t)26)                    /* Port x pin y pull -up/-down bits */
#define GPIO_PUPDR_PUPD13_Mask                (((uint32_t)0x03) << 26)
#define GPIO_PUPDR_PUPD13                     GPIO_PUPDR_PUPD13_Mask
#define GPIO_PUPDR_PUPD13_0                   (((uint32_t)0x1 << GPIO_PUPDR_PUPD13_Pos))
#define GPIO_PUPDR_PUPD13_1                   (((uint32_t)0x2 << GPIO_PUPDR_PUPD13_Pos))
#define GPIO_PUPDR_PUPD14_Pos                 ((uint32_t)28)                    /* Port x pin y pull -up/-down bits */
#define GPIO_PUPDR_PUPD14_Mask                (((uint32_t)0x03) << 28)
#define GPIO_PUPDR_PUPD14                     GPIO_PUPDR_PUPD14_Mask
#define GPIO_PUPDR_PUPD14_0                   (((uint32_t)0x1 << GPIO_PUPDR_PUPD14_Pos))
#define GPIO_PUPDR_PUPD14_1                   (((uint32_t)0x2 << GPIO_PUPDR_PUPD14_Pos))
#define GPIO_PUPDR_PUPD15_Pos                 ((uint32_t)30)                    /* Port x pin y pull -up/-down bits */
#define GPIO_PUPDR_PUPD15_Mask                (((uint32_t)0x03) << 30)
#define GPIO_PUPDR_PUPD15                     GPIO_PUPDR_PUPD15_Mask
#define GPIO_PUPDR_PUPD15_0                   (((uint32_t)0x1 << GPIO_PUPDR_PUPD15_Pos))
#define GPIO_PUPDR_PUPD15_1                   (((uint32_t)0x2 << GPIO_PUPDR_PUPD15_Pos))

/************************************* GPIO->IDR  ***************************************/
#define GPIO_IDR_ID0_Pos                      ((uint32_t)0)                     /* Port x pin y input data bit */
#define GPIO_IDR_ID0_Mask                     (((uint32_t)0x01) << 0)
#define GPIO_IDR_ID0                          GPIO_IDR_ID0_Mask
#define GPIO_IDR_ID1_Pos                      ((uint32_t)1)                     /* Port x pin y input data bit */
#define GPIO_IDR_ID1_Mask                     (((uint32_t)0x01) << 1)
#define GPIO_IDR_ID1                          GPIO_IDR_ID1_Mask
#define GPIO_IDR_ID2_Pos                      ((uint32_t)2)                     /* Port x pin y input data bit */
#define GPIO_IDR_ID2_Mask                     (((uint32_t)0x01) << 2)
#define GPIO_IDR_ID2                          GPIO_IDR_ID2_Mask
#define GPIO_IDR_ID3_Pos                      ((uint32_t)3)                     /* Port x pin y input data bit */
#define GPIO_IDR_ID3_Mask                     (((uint32_t)0x01) << 3)
#define GPIO_IDR_ID3                          GPIO_IDR_ID3_Mask
#define GPIO_IDR_ID4_Pos                      ((uint32_t)4)                     /* Port x pin y input data bit */
#define GPIO_IDR_ID4_Mask                     (((uint32_t)0x01) << 4)
#define GPIO_IDR_ID4                          GPIO_IDR_ID4_Mask
#define GPIO_IDR_ID5_Pos                      ((uint32_t)5)                     /* Port x pin y input data bit */
#define GPIO_IDR_ID5_Mask                     (((uint32_t)0x01) << 5)
#define GPIO_IDR_ID5                          GPIO_IDR_ID5_Mask
#define GPIO_IDR_ID6_Pos                      ((uint32_t)6)                     /* Port x pin y input data bit */
#define GPIO_IDR_ID6_Mask                     (((uint32_t)0x01) << 6)
#define GPIO_IDR_ID6                          GPIO_IDR_ID6_Mask
#define GPIO_IDR_ID7_Pos                      ((uint32_t)7)                     /* Port x pin y input data bit */
#define GPIO_IDR_ID7_Mask                     (((uint32_t)0x01) << 7)
#define GPIO_IDR_ID7                          GPIO_IDR_ID7_Mask
#define GPIO_IDR_ID8_Pos                      ((uint32_t)8)                     /* Port x pin y input data bit */
#define GPIO_IDR_ID8_Mask                     (((uint32_t)0x01) << 8)
#define GPIO_IDR_ID8                          GPIO_IDR_ID8_Mask
#define GPIO_IDR_ID9_Pos                      ((uint32_t)9)                     /* Port x pin y input data bit */
#define GPIO_IDR_ID9_Mask                     (((uint32_t)0x01) << 9)
#define GPIO_IDR_ID9                          GPIO_IDR_ID9_Mask
#define GPIO_IDR_ID10_Pos                     ((uint32_t)10)                    /* Port x pin y input data bit */
#define GPIO_IDR_ID10_Mask                    (((uint32_t)0x01) << 10)
#define GPIO_IDR_ID10                         GPIO_IDR_ID10_Mask
#define GPIO_IDR_ID11_Pos                     ((uint32_t)11)                    /* Port x pin y input data bit */
#define GPIO_IDR_ID11_Mask                    (((uint32_t)0x01) << 11)
#define GPIO_IDR_ID11                         GPIO_IDR_ID11_Mask
#define GPIO_IDR_ID12_Pos                     ((uint32_t)12)                    /* Port x pin y input data bit */
#define GPIO_IDR_ID12_Mask                    (((uint32_t)0x01) << 12)
#define GPIO_IDR_ID12                         GPIO_IDR_ID12_Mask
#define GPIO_IDR_ID13_Pos                     ((uint32_t)13)                    /* Port x pin y input data bit */
#define GPIO_IDR_ID13_Mask                    (((uint32_t)0x01) << 13)
#define GPIO_IDR_ID13                         GPIO_IDR_ID13_Mask
#define GPIO_IDR_ID14_Pos                     ((uint32_t)14)                    /* Port x pin y input data bit */
#define GPIO_IDR_ID14_Mask                    (((uint32_t)0x01) << 14)
#define GPIO_IDR_ID14                         GPIO_IDR_ID14_Mask
#define GPIO_IDR_ID15_Pos                     ((uint32_t)15)                    /* Port x pin y input data bit */
#define GPIO_IDR_ID15_Mask                    (((uint32_t)0x01) << 15)
#define GPIO_IDR_ID15                         GPIO_IDR_ID15_Mask

/************************************* GPIO->ODR  ***************************************/
#define GPIO_ODR_OD0_Pos                      ((uint32_t)0)                     /* Port x pin y output data bit */
#define GPIO_ODR_OD0_Mask                     (((uint32_t)0x01) << 0)
#define GPIO_ODR_OD0                          GPIO_ODR_OD0_Mask
#define GPIO_ODR_OD1_Pos                      ((uint32_t)1)                     /* Port x pin y output data bit */
#define GPIO_ODR_OD1_Mask                     (((uint32_t)0x01) << 1)
#define GPIO_ODR_OD1                          GPIO_ODR_OD1_Mask
#define GPIO_ODR_OD2_Pos                      ((uint32_t)2)                     /* Port x pin y output data bit */
#define GPIO_ODR_OD2_Mask                     (((uint32_t)0x01) << 2)
#define GPIO_ODR_OD2                          GPIO_ODR_OD2_Mask
#define GPIO_ODR_OD3_Pos                      ((uint32_t)3)                     /* Port x pin y output data bit */
#define GPIO_ODR_OD3_Mask                     (((uint32_t)0x01) << 3)
#define GPIO_ODR_OD3                          GPIO_ODR_OD3_Mask
#define GPIO_ODR_OD4_Pos                      ((uint32_t)4)                     /* Port x pin y output data bit */
#define GPIO_ODR_OD4_Mask                     (((uint32_t)0x01) << 4)
#define GPIO_ODR_OD4                          GPIO_ODR_OD4_Mask
#define GPIO_ODR_OD5_Pos                      ((uint32_t)5)                     /* Port x pin y output data bit */
#define GPIO_ODR_OD5_Mask                     (((uint32_t)0x01) << 5)
#define GPIO_ODR_OD5                          GPIO_ODR_OD5_Mask
#define GPIO_ODR_OD6_Pos                      ((uint32_t)6)                     /* Port x pin y output data bit */
#define GPIO_ODR_OD6_Mask                     (((uint32_t)0x01) << 6)
#define GPIO_ODR_OD6                          GPIO_ODR_OD6_Mask
#define GPIO_ODR_OD7_Pos                      ((uint32_t)7)                     /* Port x pin y output data bit */
#define GPIO_ODR_OD7_Mask                     (((uint32_t)0x01) << 7)
#define GPIO_ODR_OD7                          GPIO_ODR_OD7_Mask
#define GPIO_ODR_OD8_Pos                      ((uint32_t)8)                     /* Port x pin y output data bit */
#define GPIO_ODR_OD8_Mask                     (((uint32_t)0x01) << 8)
#define GPIO_ODR_OD8                          GPIO_ODR_OD8_Mask
#define GPIO_ODR_OD9_Pos                      ((uint32_t)9)                     /* Port x pin y output data bit */
#define GPIO_ODR_OD9_Mask                     (((uint32_t)0x01) << 9)
#define GPIO_ODR_OD9                          GPIO_ODR_OD9_Mask
#define GPIO_ODR_OD10_Pos                     ((uint32_t)10)                    /* Port x pin y output data bit */
#define GPIO_ODR_OD10_Mask                    (((uint32_t)0x01) << 10)
#define GPIO_ODR_OD10                         GPIO_ODR_OD10_Mask
#define GPIO_ODR_OD11_Pos                     ((uint32_t)11)                    /* Port x pin y output data bit */
#define GPIO_ODR_OD11_Mask                    (((uint32_t)0x01) << 11)
#define GPIO_ODR_OD11                         GPIO_ODR_OD11_Mask
#define GPIO_ODR_OD12_Pos                     ((uint32_t)12)                    /* Port x pin y output data bit */
#define GPIO_ODR_OD12_Mask                    (((uint32_t)0x01) << 12)
#define GPIO_ODR_OD12                         GPIO_ODR_OD12_Mask
#define GPIO_ODR_OD13_Pos                     ((uint32_t)13)                    /* Port x pin y output data bit */
#define GPIO_ODR_OD13_Mask                    (((uint32_t)0x01) << 13)
#define GPIO_ODR_OD13                         GPIO_ODR_OD13_Mask
#define GPIO_ODR_OD14_Pos                     ((uint32_t)14)                    /* Port x pin y output data bit */
#define GPIO_ODR_OD14_Mask                    (((uint32_t)0x01) << 14)
#define GPIO_ODR_OD14                         GPIO_ODR_OD14_Mask
#define GPIO_ODR_OD15_Pos                     ((uint32_t)15)                    /* Port x pin y output data bit */
#define GPIO_ODR_OD15_Mask                    (((uint32_t)0x01) << 15)
#define GPIO_ODR_OD15                         GPIO_ODR_OD15_Mask

/************************************* GPIO->BSRR  **************************************/
#define GPIO_BSRR_BR0_Pos                     ((uint32_t)16)                    /* Port x pin y reset bit */
#define GPIO_BSRR_BR0_Mask                    (((uint32_t)0x01) << 16)
#define GPIO_BSRR_BR0                         GPIO_BSRR_BR0_Mask
#define GPIO_BSRR_BR1_Pos                     ((uint32_t)17)                    /* Port x pin y reset bit */
#define GPIO_BSRR_BR1_Mask                    (((uint32_t)0x01) << 17)
#define GPIO_BSRR_BR1                         GPIO_BSRR_BR1_Mask
#define GPIO_BSRR_BR2_Pos                     ((uint32_t)18)                    /* Port x pin y reset bit */
#define GPIO_BSRR_BR2_Mask                    (((uint32_t)0x01) << 18)
#define GPIO_BSRR_BR2                         GPIO_BSRR_BR2_Mask
#define GPIO_BSRR_BR3_Pos                     ((uint32_t)19)                    /* Port x pin y reset bit */
#define GPIO_BSRR_BR3_Mask                    (((uint32_t)0x01) << 19)
#define GPIO_BSRR_BR3                         GPIO_BSRR_BR3_Mask
#define GPIO_BSRR_BR4_Pos                     ((uint32_t)20)                    /* Port x pin y reset bit */
#define GPIO_BSRR_BR4_Mask                    (((uint32_t)0x01) << 20)
#define GPIO_BSRR_BR4                         GPIO_BSRR_BR4_Mask
#define GPIO_BSRR_BR5_Pos                     ((uint32_t)21)                    /* Port x pin y reset bit */
#define GPIO_BSRR_BR5_Mask                    (((uint32_t)0x01) << 21)
#define GPIO_BSRR_BR5                         GPIO_BSRR_BR5_Mask
#define GPIO_BSRR_BR6_Pos                     ((uint32_t)22)                    /* Port x pin y reset bit */
#define GPIO_BSRR_BR6_Mask                    (((uint32_t)0x01) << 22)
#define GPIO_BSRR_BR6                         GPIO_BSRR_BR6_Mask
#define GPIO_BSRR_BR7_Pos                     ((uint32_t)23)                    /* Port x pin y reset bit */
#define GPIO_BSRR_BR7_Mask                    (((uint32_t)0x01) << 23)
#define GPIO_BSRR_BR7                         GPIO_BSRR_BR7_Mask
#define GPIO_BSRR_BR8_Pos                     ((uint32_t)24)                    /* Port x pin y reset bit */
#define GPIO_BSRR_BR8_Mask                    (((uint32_t)0x01) << 24)
#define GPIO_BSRR_BR8                         GPIO_BSRR_BR8_Mask
#define GPIO_BSRR_BR9_Pos                     ((uint32_t)25)                    /* Port x pin y reset bit */
#define GPIO_BSRR_BR9_Mask                    (((uint32_t)0x01) << 25)
#define GPIO_BSRR_BR9                         GPIO_BSRR_BR9_Mask
#define GPIO_BSRR_BR10_Pos                    ((uint32_t)26)                    /* Port x pin y reset bit */
#define GPIO_BSRR_BR10_Mask                   (((uint32_t)0x01) << 26)
#define GPIO_BSRR_BR10                        GPIO_BSRR_BR10_Mask
#define GPIO_BSRR_BR11_Pos                    ((uint32_t)27)                    /* Port x pin y reset bit */
#define GPIO_BSRR_BR11_Mask                   (((uint32_t)0x01) << 27)
#define GPIO_BSRR_BR11                        GPIO_BSRR_BR11_Mask
#define GPIO_BSRR_BR12_Pos                    ((uint32_t)28)                    /* Port x pin y reset bit */
#define GPIO_BSRR_BR12_Mask                   (((uint32_t)0x01) << 28)
#define GPIO_BSRR_BR12                        GPIO_BSRR_BR12_Mask
#define GPIO_BSRR_BR13_Pos                    ((uint32_t)29)                    /* Port x pin y reset bit */
#define GPIO_BSRR_BR13_Mask                   (((uint32_t)0x01) << 29)
#define GPIO_BSRR_BR13                        GPIO_BSRR_BR13_Mask
#define GPIO_BSRR_BR14_Pos                    ((uint32_t)30)                    /* Port x pin y reset bit */
#define GPIO_BSRR_BR14_Mask                   (((uint32_t)0x01) << 30)
#define GPIO_BSRR_BR14                        GPIO_BSRR_BR14_Mask
#define GPIO_BSRR_BR15_Pos                    ((uint32_t)31)                    /* Port x pin y reset bit */
#define GPIO_BSRR_BR15_Mask                   (((uint32_t)0x01) << 31)
#define GPIO_BSRR_BR15                        GPIO_BSRR_BR15_Mask
#define GPIO_BSRR_BS0_Pos                     ((uint32_t)0)                     /* Port x pin y set bit */
#define GPIO_BSRR_BS0_Mask                    (((uint32_t)0x01) << 0)
#define GPIO_BSRR_BS0                         GPIO_BSRR_BS0_Mask
#define GPIO_BSRR_BS1_Pos                     ((uint32_t)1)                     /* Port x pin y set bit */
#define GPIO_BSRR_BS1_Mask                    (((uint32_t)0x01) << 1)
#define GPIO_BSRR_BS1                         GPIO_BSRR_BS1_Mask
#define GPIO_BSRR_BS2_Pos                     ((uint32_t)2)                     /* Port x pin y set bit */
#define GPIO_BSRR_BS2_Mask                    (((uint32_t)0x01) << 2)
#define GPIO_BSRR_BS2                         GPIO_BSRR_BS2_Mask
#define GPIO_BSRR_BS3_Pos                     ((uint32_t)3)                     /* Port x pin y set bit */
#define GPIO_BSRR_BS3_Mask                    (((uint32_t)0x01) << 3)
#define GPIO_BSRR_BS3                         GPIO_BSRR_BS3_Mask
#define GPIO_BSRR_BS4_Pos                     ((uint32_t)4)                     /* Port x pin y set bit */
#define GPIO_BSRR_BS4_Mask                    (((uint32_t)0x01) << 4)
#define GPIO_BSRR_BS4                         GPIO_BSRR_BS4_Mask
#define GPIO_BSRR_BS5_Pos                     ((uint32_t)5)                     /* Port x pin y set bit */
#define GPIO_BSRR_BS5_Mask                    (((uint32_t)0x01) << 5)
#define GPIO_BSRR_BS5                         GPIO_BSRR_BS5_Mask
#define GPIO_BSRR_BS6_Pos                     ((uint32_t)6)                     /* Port x pin y set bit */
#define GPIO_BSRR_BS6_Mask                    (((uint32_t)0x01) << 6)
#define GPIO_BSRR_BS6                         GPIO_BSRR_BS6_Mask
#define GPIO_BSRR_BS7_Pos                     ((uint32_t)7)                     /* Port x pin y set bit */
#define GPIO_BSRR_BS7_Mask                    (((uint32_t)0x01) << 7)
#define GPIO_BSRR_BS7                         GPIO_BSRR_BS7_Mask
#define GPIO_BSRR_BS8_Pos                     ((uint32_t)8)                     /* Port x pin y set bit */
#define GPIO_BSRR_BS8_Mask                    (((uint32_t)0x01) << 8)
#define GPIO_BSRR_BS8                         GPIO_BSRR_BS8_Mask
#define GPIO_BSRR_BS9_Pos                     ((uint32_t)9)                     /* Port x pin y set bit */
#define GPIO_BSRR_BS9_Mask                    (((uint32_t)0x01) << 9)
#define GPIO_BSRR_BS9                         GPIO_BSRR_BS9_Mask
#define GPIO_BSRR_BS10_Pos                    ((uint32_t)10)                    /* Port x pin y set bit */
#define GPIO_BSRR_BS10_Mask                   (((uint32_t)0x01) << 10)
#define GPIO_BSRR_BS10                        GPIO_BSRR_BS10_Mask
#define GPIO_BSRR_BS11_Pos                    ((uint32_t)11)                    /* Port x pin y set bit */
#define GPIO_BSRR_BS11_Mask                   (((uint32_t)0x01) << 11)
#define GPIO_BSRR_BS11                        GPIO_BSRR_BS11_Mask
#define GPIO_BSRR_BS12_Pos                    ((uint32_t)12)                    /* Port x pin y set bit */
#define GPIO_BSRR_BS12_Mask                   (((uint32_t)0x01) << 12)
#define GPIO_BSRR_BS12                        GPIO_BSRR_BS12_Mask
#define GPIO_BSRR_BS13_Pos                    ((uint32_t)13)                    /* Port x pin y set bit */
#define GPIO_BSRR_BS13_Mask                   (((uint32_t)0x01) << 13)
#define GPIO_BSRR_BS13                        GPIO_BSRR_BS13_Mask
#define GPIO_BSRR_BS14_Pos                    ((uint32_t)14)                    /* Port x pin y set bit */
#define GPIO_BSRR_BS14_Mask                   (((uint32_t)0x01) << 14)
#define GPIO_BSRR_BS14                        GPIO_BSRR_BS14_Mask
#define GPIO_BSRR_BS15_Pos                    ((uint32_t)15)                    /* Port x pin y set bit */
#define GPIO_BSRR_BS15_Mask                   (((uint32_t)0x01) << 15)
#define GPIO_BSRR_BS15                        GPIO_BSRR_BS15_Mask

/************************************* GPIO->LCKR  **************************************/
#define GPIO_LCKR_LCKK_Pos                    ((uint32_t)16)                    /* Lock key */
#define GPIO_LCKR_LCKK_Mask                   (((uint32_t)0x01) << 16)
#define GPIO_LCKR_LCKK                        GPIO_LCKR_LCKK_Mask
#define GPIO_LCKR_LCK0_Pos                    ((uint32_t)0)                     /* Port x pin y lock bit */
#define GPIO_LCKR_LCK0_Mask                   (((uint32_t)0x01) << 0)
#define GPIO_LCKR_LCK0                        GPIO_LCKR_LCK0_Mask
#define GPIO_LCKR_LCK1_Pos                    ((uint32_t)1)                     /* Port x pin y lock bit */
#define GPIO_LCKR_LCK1_Mask                   (((uint32_t)0x01) << 1)
#define GPIO_LCKR_LCK1                        GPIO_LCKR_LCK1_Mask
#define GPIO_LCKR_LCK2_Pos                    ((uint32_t)2)                     /* Port x pin y lock bit */
#define GPIO_LCKR_LCK2_Mask                   (((uint32_t)0x01) << 2)
#define GPIO_LCKR_LCK2                        GPIO_LCKR_LCK2_Mask
#define GPIO_LCKR_LCK3_Pos                    ((uint32_t)3)                     /* Port x pin y lock bit */
#define GPIO_LCKR_LCK3_Mask                   (((uint32_t)0x01) << 3)
#define GPIO_LCKR_LCK3                        GPIO_LCKR_LCK3_Mask
#define GPIO_LCKR_LCK4_Pos                    ((uint32_t)4)                     /* Port x pin y lock bit */
#define GPIO_LCKR_LCK4_Mask                   (((uint32_t)0x01) << 4)
#define GPIO_LCKR_LCK4                        GPIO_LCKR_LCK4_Mask
#define GPIO_LCKR_LCK5_Pos                    ((uint32_t)5)                     /* Port x pin y lock bit */
#define GPIO_LCKR_LCK5_Mask                   (((uint32_t)0x01) << 5)
#define GPIO_LCKR_LCK5                        GPIO_LCKR_LCK5_Mask
#define GPIO_LCKR_LCK6_Pos                    ((uint32_t)6)                     /* Port x pin y lock bit */
#define GPIO_LCKR_LCK6_Mask                   (((uint32_t)0x01) << 6)
#define GPIO_LCKR_LCK6                        GPIO_LCKR_LCK6_Mask
#define GPIO_LCKR_LCK7_Pos                    ((uint32_t)7)                     /* Port x pin y lock bit */
#define GPIO_LCKR_LCK7_Mask                   (((uint32_t)0x01) << 7)
#define GPIO_LCKR_LCK7                        GPIO_LCKR_LCK7_Mask
#define GPIO_LCKR_LCK8_Pos                    ((uint32_t)8)                     /* Port x pin y lock bit */
#define GPIO_LCKR_LCK8_Mask                   (((uint32_t)0x01) << 8)
#define GPIO_LCKR_LCK8                        GPIO_LCKR_LCK8_Mask
#define GPIO_LCKR_LCK9_Pos                    ((uint32_t)9)                     /* Port x pin y lock bit */
#define GPIO_LCKR_LCK9_Mask                   (((uint32_t)0x01) << 9)
#define GPIO_LCKR_LCK9                        GPIO_LCKR_LCK9_Mask
#define GPIO_LCKR_LCK10_Pos                   ((uint32_t)10)                    /* Port x pin y lock bit */
#define GPIO_LCKR_LCK10_Mask                  (((uint32_t)0x01) << 10)
#define GPIO_LCKR_LCK10                       GPIO_LCKR_LCK10_Mask
#define GPIO_LCKR_LCK11_Pos                   ((uint32_t)11)                    /* Port x pin y lock bit */
#define GPIO_LCKR_LCK11_Mask                  (((uint32_t)0x01) << 11)
#define GPIO_LCKR_LCK11                       GPIO_LCKR_LCK11_Mask
#define GPIO_LCKR_LCK12_Pos                   ((uint32_t)12)                    /* Port x pin y lock bit */
#define GPIO_LCKR_LCK12_Mask                  (((uint32_t)0x01) << 12)
#define GPIO_LCKR_LCK12                       GPIO_LCKR_LCK12_Mask
#define GPIO_LCKR_LCK13_Pos                   ((uint32_t)13)                    /* Port x pin y lock bit */
#define GPIO_LCKR_LCK13_Mask                  (((uint32_t)0x01) << 13)
#define GPIO_LCKR_LCK13                       GPIO_LCKR_LCK13_Mask
#define GPIO_LCKR_LCK14_Pos                   ((uint32_t)14)                    /* Port x pin y lock bit */
#define GPIO_LCKR_LCK14_Mask                  (((uint32_t)0x01) << 14)
#define GPIO_LCKR_LCK14                       GPIO_LCKR_LCK14_Mask
#define GPIO_LCKR_LCK15_Pos                   ((uint32_t)15)                    /* Port x pin y lock bit */
#define GPIO_LCKR_LCK15_Mask                  (((uint32_t)0x01) << 15)
#define GPIO_LCKR_LCK15                       GPIO_LCKR_LCK15_Mask

/************************************* GPIO->AFRL  **************************************/
#define GPIO_AFRL_AFSEL0_Pos                  ((uint32_t)0)                     /* Alternate function selection low bits of port x pin y */
#define GPIO_AFRL_AFSEL0_Mask                 (((uint32_t)0x0F) << 0)
#define GPIO_AFRL_AFSEL0                      GPIO_AFRL_AFSEL0_Mask
#define GPIO_AFRL_AFSEL0_0                    (((uint32_t)0x1))
#define GPIO_AFRL_AFSEL0_1                    (((uint32_t)0x2))
#define GPIO_AFRL_AFSEL0_2                    (((uint32_t)0x4))
#define GPIO_AFRL_AFSEL0_3                    (((uint32_t)0x8))
#define GPIO_AFRL_AFSEL1_Pos                  ((uint32_t)4)                     /* Alternate function selection low bits of port x pin y */
#define GPIO_AFRL_AFSEL1_Mask                 (((uint32_t)0x0F) << 4)
#define GPIO_AFRL_AFSEL1                      GPIO_AFRL_AFSEL1_Mask
#define GPIO_AFRL_AFSEL1_0                    (((uint32_t)0x1 << GPIO_AFRL_AFSEL1_Pos))
#define GPIO_AFRL_AFSEL1_1                    (((uint32_t)0x2 << GPIO_AFRL_AFSEL1_Pos))
#define GPIO_AFRL_AFSEL1_2                    (((uint32_t)0x4 << GPIO_AFRL_AFSEL1_Pos))
#define GPIO_AFRL_AFSEL1_3                    (((uint32_t)0x8 << GPIO_AFRL_AFSEL1_Pos))
#define GPIO_AFRL_AFSEL2_Pos                  ((uint32_t)8)                     /* Alternate function selection low bits of port x pin y */
#define GPIO_AFRL_AFSEL2_Mask                 (((uint32_t)0x0F) << 8)
#define GPIO_AFRL_AFSEL2                      GPIO_AFRL_AFSEL2_Mask
#define GPIO_AFRL_AFSEL2_0                    (((uint32_t)0x1 << GPIO_AFRL_AFSEL2_Pos))
#define GPIO_AFRL_AFSEL2_1                    (((uint32_t)0x2 << GPIO_AFRL_AFSEL2_Pos))
#define GPIO_AFRL_AFSEL2_2                    (((uint32_t)0x4 << GPIO_AFRL_AFSEL2_Pos))
#define GPIO_AFRL_AFSEL2_3                    (((uint32_t)0x8 << GPIO_AFRL_AFSEL2_Pos))
#define GPIO_AFRL_AFSEL3_Pos                  ((uint32_t)12)                    /* Alternate function selection low bits of port x pin y */
#define GPIO_AFRL_AFSEL3_Mask                 (((uint32_t)0x0F) << 12)
#define GPIO_AFRL_AFSEL3                      GPIO_AFRL_AFSEL3_Mask
#define GPIO_AFRL_AFSEL3_0                    (((uint32_t)0x1 << GPIO_AFRL_AFSEL3_Pos))
#define GPIO_AFRL_AFSEL3_1                    (((uint32_t)0x2 << GPIO_AFRL_AFSEL3_Pos))
#define GPIO_AFRL_AFSEL3_2                    (((uint32_t)0x4 << GPIO_AFRL_AFSEL3_Pos))
#define GPIO_AFRL_AFSEL3_3                    (((uint32_t)0x8 << GPIO_AFRL_AFSEL3_Pos))
#define GPIO_AFRL_AFSEL4_Pos                  ((uint32_t)16)                    /* Alternate function selection low bits of port x pin y */
#define GPIO_AFRL_AFSEL4_Mask                 (((uint32_t)0x0F) << 16)
#define GPIO_AFRL_AFSEL4                      GPIO_AFRL_AFSEL4_Mask
#define GPIO_AFRL_AFSEL4_0                    (((uint32_t)0x1 << GPIO_AFRL_AFSEL4_Pos))
#define GPIO_AFRL_AFSEL4_1                    (((uint32_t)0x2 << GPIO_AFRL_AFSEL4_Pos))
#define GPIO_AFRL_AFSEL4_2                    (((uint32_t)0x4 << GPIO_AFRL_AFSEL4_Pos))
#define GPIO_AFRL_AFSEL4_3                    (((uint32_t)0x8 << GPIO_AFRL_AFSEL4_Pos))
#define GPIO_AFRL_AFSEL5_Pos                  ((uint32_t)20)                    /* Alternate function selection low bits of port x pin y */
#define GPIO_AFRL_AFSEL5_Mask                 (((uint32_t)0x0F) << 20)
#define GPIO_AFRL_AFSEL5                      GPIO_AFRL_AFSEL5_Mask
#define GPIO_AFRL_AFSEL5_0                    (((uint32_t)0x1 << GPIO_AFRL_AFSEL5_Pos))
#define GPIO_AFRL_AFSEL5_1                    (((uint32_t)0x2 << GPIO_AFRL_AFSEL5_Pos))
#define GPIO_AFRL_AFSEL5_2                    (((uint32_t)0x4 << GPIO_AFRL_AFSEL5_Pos))
#define GPIO_AFRL_AFSEL5_3                    (((uint32_t)0x8 << GPIO_AFRL_AFSEL5_Pos))
#define GPIO_AFRL_AFSEL6_Pos                  ((uint32_t)24)                    /* Alternate function selection low bits of port x pin y */
#define GPIO_AFRL_AFSEL6_Mask                 (((uint32_t)0x0F) << 24)
#define GPIO_AFRL_AFSEL6                      GPIO_AFRL_AFSEL6_Mask
#define GPIO_AFRL_AFSEL6_0                    (((uint32_t)0x1 << GPIO_AFRL_AFSEL6_Pos))
#define GPIO_AFRL_AFSEL6_1                    (((uint32_t)0x2 << GPIO_AFRL_AFSEL6_Pos))
#define GPIO_AFRL_AFSEL6_2                    (((uint32_t)0x4 << GPIO_AFRL_AFSEL6_Pos))
#define GPIO_AFRL_AFSEL6_3                    (((uint32_t)0x8 << GPIO_AFRL_AFSEL6_Pos))
#define GPIO_AFRL_AFSEL7_Pos                  ((uint32_t)28)                    /* Alternate function selection low bits of port x pin y */
#define GPIO_AFRL_AFSEL7_Mask                 (((uint32_t)0x0F) << 28)
#define GPIO_AFRL_AFSEL7                      GPIO_AFRL_AFSEL7_Mask
#define GPIO_AFRL_AFSEL7_0                    (((uint32_t)0x1 << GPIO_AFRL_AFSEL7_Pos))
#define GPIO_AFRL_AFSEL7_1                    (((uint32_t)0x2 << GPIO_AFRL_AFSEL7_Pos))
#define GPIO_AFRL_AFSEL7_2                    (((uint32_t)0x4 << GPIO_AFRL_AFSEL7_Pos))
#define GPIO_AFRL_AFSEL7_3                    (((uint32_t)0x8 << GPIO_AFRL_AFSEL7_Pos))

/************************************* GPIO->AFRH  **************************************/
#define GPIO_AFRH_AFSEL8_Pos                  ((uint32_t)0)                     /* Alternate function selection high bits of port x pin y */
#define GPIO_AFRH_AFSEL8_Mask                 (((uint32_t)0x0F) << 0)
#define GPIO_AFRH_AFSEL8                      GPIO_AFRH_AFSEL8_Mask
#define GPIO_AFRH_AFSEL8_0                    (((uint32_t)0x1))
#define GPIO_AFRH_AFSEL8_1                    (((uint32_t)0x2))
#define GPIO_AFRH_AFSEL8_2                    (((uint32_t)0x4))
#define GPIO_AFRH_AFSEL8_3                    (((uint32_t)0x8))
#define GPIO_AFRH_AFSEL9_Pos                  ((uint32_t)4)                     /* Alternate function selection high bits of port x pin y */
#define GPIO_AFRH_AFSEL9_Mask                 (((uint32_t)0x0F) << 4)
#define GPIO_AFRH_AFSEL9                      GPIO_AFRH_AFSEL9_Mask
#define GPIO_AFRH_AFSEL9_0                    (((uint32_t)0x1 << GPIO_AFRH_AFSEL9_Pos))
#define GPIO_AFRH_AFSEL9_1                    (((uint32_t)0x2 << GPIO_AFRH_AFSEL9_Pos))
#define GPIO_AFRH_AFSEL9_2                    (((uint32_t)0x4 << GPIO_AFRH_AFSEL9_Pos))
#define GPIO_AFRH_AFSEL9_3                    (((uint32_t)0x8 << GPIO_AFRH_AFSEL9_Pos))
#define GPIO_AFRH_AFSEL10_Pos                 ((uint32_t)8)                     /* Alternate function selection high bits of port x pin y */
#define GPIO_AFRH_AFSEL10_Mask                (((uint32_t)0x0F) << 8)
#define GPIO_AFRH_AFSEL10                     GPIO_AFRH_AFSEL10_Mask
#define GPIO_AFRH_AFSEL10_0                   (((uint32_t)0x1 << GPIO_AFRH_AFSEL10_Pos))
#define GPIO_AFRH_AFSEL10_1                   (((uint32_t)0x2 << GPIO_AFRH_AFSEL10_Pos))
#define GPIO_AFRH_AFSEL10_2                   (((uint32_t)0x4 << GPIO_AFRH_AFSEL10_Pos))
#define GPIO_AFRH_AFSEL10_3                   (((uint32_t)0x8 << GPIO_AFRH_AFSEL10_Pos))
#define GPIO_AFRH_AFSEL11_Pos                 ((uint32_t)12)                    /* Alternate function selection high bits of port x pin y */
#define GPIO_AFRH_AFSEL11_Mask                (((uint32_t)0x0F) << 12)
#define GPIO_AFRH_AFSEL11                     GPIO_AFRH_AFSEL11_Mask
#define GPIO_AFRH_AFSEL11_0                   (((uint32_t)0x1 << GPIO_AFRH_AFSEL11_Pos))
#define GPIO_AFRH_AFSEL11_1                   (((uint32_t)0x2 << GPIO_AFRH_AFSEL11_Pos))
#define GPIO_AFRH_AFSEL11_2                   (((uint32_t)0x4 << GPIO_AFRH_AFSEL11_Pos))
#define GPIO_AFRH_AFSEL11_3                   (((uint32_t)0x8 << GPIO_AFRH_AFSEL11_Pos))
#define GPIO_AFRH_AFSEL12_Pos                 ((uint32_t)16)                    /* Alternate function selection high bits of port x pin y */
#define GPIO_AFRH_AFSEL12_Mask                (((uint32_t)0x0F) << 16)
#define GPIO_AFRH_AFSEL12                     GPIO_AFRH_AFSEL12_Mask
#define GPIO_AFRH_AFSEL12_0                   (((uint32_t)0x1 << GPIO_AFRH_AFSEL12_Pos))
#define GPIO_AFRH_AFSEL12_1                   (((uint32_t)0x2 << GPIO_AFRH_AFSEL12_Pos))
#define GPIO_AFRH_AFSEL12_2                   (((uint32_t)0x4 << GPIO_AFRH_AFSEL12_Pos))
#define GPIO_AFRH_AFSEL12_3                   (((uint32_t)0x8 << GPIO_AFRH_AFSEL12_Pos))
#define GPIO_AFRH_AFSEL13_Pos                 ((uint32_t)20)                    /* Alternate function selection high bits of port x pin y */
#define GPIO_AFRH_AFSEL13_Mask                (((uint32_t)0x0F) << 20)
#define GPIO_AFRH_AFSEL13                     GPIO_AFRH_AFSEL13_Mask
#define GPIO_AFRH_AFSEL13_0                   (((uint32_t)0x1 << GPIO_AFRH_AFSEL13_Pos))
#define GPIO_AFRH_AFSEL13_1                   (((uint32_t)0x2 << GPIO_AFRH_AFSEL13_Pos))
#define GPIO_AFRH_AFSEL13_2                   (((uint32_t)0x4 << GPIO_AFRH_AFSEL13_Pos))
#define GPIO_AFRH_AFSEL13_3                   (((uint32_t)0x8 << GPIO_AFRH_AFSEL13_Pos))
#define GPIO_AFRH_AFSEL14_Pos                 ((uint32_t)24)                    /* Alternate function selection high bits of port x pin y */
#define GPIO_AFRH_AFSEL14_Mask                (((uint32_t)0x0F) << 24)
#define GPIO_AFRH_AFSEL14                     GPIO_AFRH_AFSEL14_Mask
#define GPIO_AFRH_AFSEL14_0                   (((uint32_t)0x1 << GPIO_AFRH_AFSEL14_Pos))
#define GPIO_AFRH_AFSEL14_1                   (((uint32_t)0x2 << GPIO_AFRH_AFSEL14_Pos))
#define GPIO_AFRH_AFSEL14_2                   (((uint32_t)0x4 << GPIO_AFRH_AFSEL14_Pos))
#define GPIO_AFRH_AFSEL14_3                   (((uint32_t)0x8 << GPIO_AFRH_AFSEL14_Pos))
#define GPIO_AFRH_AFSEL15_Pos                 ((uint32_t)28)                    /* Alternate function selection high bits of port x pin y */
#define GPIO_AFRH_AFSEL15_Mask                (((uint32_t)0x0F) << 28)
#define GPIO_AFRH_AFSEL15                     GPIO_AFRH_AFSEL15_Mask
#define GPIO_AFRH_AFSEL15_0                   (((uint32_t)0x1 << GPIO_AFRH_AFSEL15_Pos))
#define GPIO_AFRH_AFSEL15_1                   (((uint32_t)0x2 << GPIO_AFRH_AFSEL15_Pos))
#define GPIO_AFRH_AFSEL15_2                   (((uint32_t)0x4 << GPIO_AFRH_AFSEL15_Pos))
#define GPIO_AFRH_AFSEL15_3                   (((uint32_t)0x8 << GPIO_AFRH_AFSEL15_Pos))

/************************************* GPIO->BRR  ***************************************/
#define GPIO_BRR_BR0_Pos                      ((uint32_t)0)                     /* Port x pin y reset bit y */
#define GPIO_BRR_BR0_Mask                     (((uint32_t)0x01) << 0)
#define GPIO_BRR_BR0                          GPIO_BRR_BR0_Mask
#define GPIO_BRR_BR1_Pos                      ((uint32_t)1)                     /* Port x pin y reset bit y */
#define GPIO_BRR_BR1_Mask                     (((uint32_t)0x01) << 1)
#define GPIO_BRR_BR1                          GPIO_BRR_BR1_Mask
#define GPIO_BRR_BR2_Pos                      ((uint32_t)2)                     /* Port x pin y reset bit y */
#define GPIO_BRR_BR2_Mask                     (((uint32_t)0x01) << 2)
#define GPIO_BRR_BR2                          GPIO_BRR_BR2_Mask
#define GPIO_BRR_BR3_Pos                      ((uint32_t)3)                     /* Port x pin y reset bit y */
#define GPIO_BRR_BR3_Mask                     (((uint32_t)0x01) << 3)
#define GPIO_BRR_BR3                          GPIO_BRR_BR3_Mask
#define GPIO_BRR_BR4_Pos                      ((uint32_t)4)                     /* Port x pin y reset bit y */
#define GPIO_BRR_BR4_Mask                     (((uint32_t)0x01) << 4)
#define GPIO_BRR_BR4                          GPIO_BRR_BR4_Mask
#define GPIO_BRR_BR5_Pos                      ((uint32_t)5)                     /* Port x pin y reset bit y */
#define GPIO_BRR_BR5_Mask                     (((uint32_t)0x01) << 5)
#define GPIO_BRR_BR5                          GPIO_BRR_BR5_Mask
#define GPIO_BRR_BR6_Pos                      ((uint32_t)6)                     /* Port x pin y reset bit y */
#define GPIO_BRR_BR6_Mask                     (((uint32_t)0x01) << 6)
#define GPIO_BRR_BR6                          GPIO_BRR_BR6_Mask
#define GPIO_BRR_BR7_Pos                      ((uint32_t)7)                     /* Port x pin y reset bit y */
#define GPIO_BRR_BR7_Mask                     (((uint32_t)0x01) << 7)
#define GPIO_BRR_BR7                          GPIO_BRR_BR7_Mask
#define GPIO_BRR_BR8_Pos                      ((uint32_t)8)                     /* Port x pin y reset bit y */
#define GPIO_BRR_BR8_Mask                     (((uint32_t)0x01) << 8)
#define GPIO_BRR_BR8                          GPIO_BRR_BR8_Mask
#define GPIO_BRR_BR9_Pos                      ((uint32_t)9)                     /* Port x pin y reset bit y */
#define GPIO_BRR_BR9_Mask                     (((uint32_t)0x01) << 9)
#define GPIO_BRR_BR9                          GPIO_BRR_BR9_Mask
#define GPIO_BRR_BR10_Pos                     ((uint32_t)10)                    /* Port x pin y reset bit y */
#define GPIO_BRR_BR10_Mask                    (((uint32_t)0x01) << 10)
#define GPIO_BRR_BR10                         GPIO_BRR_BR10_Mask
#define GPIO_BRR_BR11_Pos                     ((uint32_t)11)                    /* Port x pin y reset bit y */
#define GPIO_BRR_BR11_Mask                    (((uint32_t)0x01) << 11)
#define GPIO_BRR_BR11                         GPIO_BRR_BR11_Mask
#define GPIO_BRR_BR12_Pos                     ((uint32_t)12)                    /* Port x pin y reset bit y */
#define GPIO_BRR_BR12_Mask                    (((uint32_t)0x01) << 12)
#define GPIO_BRR_BR12                         GPIO_BRR_BR12_Mask
#define GPIO_BRR_BR13_Pos                     ((uint32_t)13)                    /* Port x pin y reset bit y */
#define GPIO_BRR_BR13_Mask                    (((uint32_t)0x01) << 13)
#define GPIO_BRR_BR13                         GPIO_BRR_BR13_Mask
#define GPIO_BRR_BR14_Pos                     ((uint32_t)14)                    /* Port x pin y reset bit y */
#define GPIO_BRR_BR14_Mask                    (((uint32_t)0x01) << 14)
#define GPIO_BRR_BR14                         GPIO_BRR_BR14_Mask
#define GPIO_BRR_BR15_Pos                     ((uint32_t)15)                    /* Port x pin y reset bit y */
#define GPIO_BRR_BR15_Mask                    (((uint32_t)0x01) << 15)
#define GPIO_BRR_BR15                         GPIO_BRR_BR15_Mask

/************************************* GPIO->IOSR  **************************************/
#define GPIO_IOSR_SEN0_Pos                    ((uint32_t)0)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN0_Mask                   (((uint32_t)0x01) << 0)
#define GPIO_IOSR_SEN0                        GPIO_IOSR_SEN0_Mask
#define GPIO_IOSR_SEN1_Pos                    ((uint32_t)1)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN1_Mask                   (((uint32_t)0x01) << 1)
#define GPIO_IOSR_SEN1                        GPIO_IOSR_SEN1_Mask
#define GPIO_IOSR_SEN2_Pos                    ((uint32_t)2)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN2_Mask                   (((uint32_t)0x01) << 2)
#define GPIO_IOSR_SEN2                        GPIO_IOSR_SEN2_Mask
#define GPIO_IOSR_SEN3_Pos                    ((uint32_t)3)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN3_Mask                   (((uint32_t)0x01) << 3)
#define GPIO_IOSR_SEN3                        GPIO_IOSR_SEN3_Mask
#define GPIO_IOSR_SEN4_Pos                    ((uint32_t)4)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN4_Mask                   (((uint32_t)0x01) << 4)
#define GPIO_IOSR_SEN4                        GPIO_IOSR_SEN4_Mask
#define GPIO_IOSR_SEN5_Pos                    ((uint32_t)5)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN5_Mask                   (((uint32_t)0x01) << 5)
#define GPIO_IOSR_SEN5                        GPIO_IOSR_SEN5_Mask
#define GPIO_IOSR_SEN6_Pos                    ((uint32_t)6)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN6_Mask                   (((uint32_t)0x01) << 6)
#define GPIO_IOSR_SEN6                        GPIO_IOSR_SEN6_Mask
#define GPIO_IOSR_SEN7_Pos                    ((uint32_t)7)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN7_Mask                   (((uint32_t)0x01) << 7)
#define GPIO_IOSR_SEN7                        GPIO_IOSR_SEN7_Mask
#define GPIO_IOSR_SEN8_Pos                    ((uint32_t)8)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN8_Mask                   (((uint32_t)0x01) << 8)
#define GPIO_IOSR_SEN8                        GPIO_IOSR_SEN8_Mask
#define GPIO_IOSR_SEN9_Pos                    ((uint32_t)9)                     /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN9_Mask                   (((uint32_t)0x01) << 9)
#define GPIO_IOSR_SEN9                        GPIO_IOSR_SEN9_Mask
#define GPIO_IOSR_SEN10_Pos                   ((uint32_t)10)                    /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN10_Mask                  (((uint32_t)0x01) << 10)
#define GPIO_IOSR_SEN10                       GPIO_IOSR_SEN10_Mask
#define GPIO_IOSR_SEN11_Pos                   ((uint32_t)11)                    /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN11_Mask                  (((uint32_t)0x01) << 11)
#define GPIO_IOSR_SEN11                       GPIO_IOSR_SEN11_Mask
#define GPIO_IOSR_SEN12_Pos                   ((uint32_t)12)                    /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN12_Mask                  (((uint32_t)0x01) << 12)
#define GPIO_IOSR_SEN12                       GPIO_IOSR_SEN12_Mask
#define GPIO_IOSR_SEN13_Pos                   ((uint32_t)13)                    /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN13_Mask                  (((uint32_t)0x01) << 13)
#define GPIO_IOSR_SEN13                       GPIO_IOSR_SEN13_Mask
#define GPIO_IOSR_SEN14_Pos                   ((uint32_t)14)                    /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN14_Mask                  (((uint32_t)0x01) << 14)
#define GPIO_IOSR_SEN14                       GPIO_IOSR_SEN14_Mask
#define GPIO_IOSR_SEN15_Pos                   ((uint32_t)15)                    /* Port x pin y Schmitt switch */
#define GPIO_IOSR_SEN15_Mask                  (((uint32_t)0x01) << 15)
#define GPIO_IOSR_SEN15                       GPIO_IOSR_SEN15_Mask

/*****************************************************************************************
*                                     Peripheral DMA                                     *
*****************************************************************************************/
typedef struct
{
    __I  uint32_t ISR;                    /* ISR */
    __O  uint32_t IFCR;                   /* IFCR */
    uint16_t RESERVED1[80];
    __IO uint32_t CHSELR;                 /* CHSELR */
} DMA_TypeDef;

/************************************** DMA->ISR  ***************************************/
#define DMA_ISR_TEIF1_Pos                     ((uint32_t)3)                     /* Channel x transfer error flag */
#define DMA_ISR_TEIF1_Mask                    (((uint32_t)0x01) << 3)
#define DMA_ISR_TEIF1                         DMA_ISR_TEIF1_Mask
#define DMA_ISR_TEIF2_Pos                     ((uint32_t)7)                     /* Channel x transfer error flag */
#define DMA_ISR_TEIF2_Mask                    (((uint32_t)0x01) << 7)
#define DMA_ISR_TEIF2                         DMA_ISR_TEIF2_Mask
#define DMA_ISR_TEIF3_Pos                     ((uint32_t)11)                    /* Channel x transfer error flag */
#define DMA_ISR_TEIF3_Mask                    (((uint32_t)0x01) << 11)
#define DMA_ISR_TEIF3                         DMA_ISR_TEIF3_Mask
#define DMA_ISR_TEIF4_Pos                     ((uint32_t)15)                    /* Channel x transfer error flag */
#define DMA_ISR_TEIF4_Mask                    (((uint32_t)0x01) << 15)
#define DMA_ISR_TEIF4                         DMA_ISR_TEIF4_Mask
#define DMA_ISR_TEIF5_Pos                     ((uint32_t)19)                    /* Channel x transfer error flag */
#define DMA_ISR_TEIF5_Mask                    (((uint32_t)0x01) << 19)
#define DMA_ISR_TEIF5                         DMA_ISR_TEIF5_Mask
#define DMA_ISR_TEIF6_Pos                     ((uint32_t)23)                    /* Channel x transfer error flag */
#define DMA_ISR_TEIF6_Mask                    (((uint32_t)0x01) << 23)
#define DMA_ISR_TEIF6                         DMA_ISR_TEIF6_Mask
#define DMA_ISR_TEIF7_Pos                     ((uint32_t)27)                    /* Channel x transfer error flag */
#define DMA_ISR_TEIF7_Mask                    (((uint32_t)0x01) << 27)
#define DMA_ISR_TEIF7                         DMA_ISR_TEIF7_Mask
#define DMA_ISR_HTIF1_Pos                     ((uint32_t)2)                     /* Channel x half transfer flag */
#define DMA_ISR_HTIF1_Mask                    (((uint32_t)0x01) << 2)
#define DMA_ISR_HTIF1                         DMA_ISR_HTIF1_Mask
#define DMA_ISR_HTIF2_Pos                     ((uint32_t)6)                     /* Channel x half transfer flag */
#define DMA_ISR_HTIF2_Mask                    (((uint32_t)0x01) << 6)
#define DMA_ISR_HTIF2                         DMA_ISR_HTIF2_Mask
#define DMA_ISR_HTIF3_Pos                     ((uint32_t)10)                    /* Channel x half transfer flag */
#define DMA_ISR_HTIF3_Mask                    (((uint32_t)0x01) << 10)
#define DMA_ISR_HTIF3                         DMA_ISR_HTIF3_Mask
#define DMA_ISR_HTIF4_Pos                     ((uint32_t)14)                    /* Channel x half transfer flag */
#define DMA_ISR_HTIF4_Mask                    (((uint32_t)0x01) << 14)
#define DMA_ISR_HTIF4                         DMA_ISR_HTIF4_Mask
#define DMA_ISR_HTIF5_Pos                     ((uint32_t)18)                    /* Channel x half transfer flag */
#define DMA_ISR_HTIF5_Mask                    (((uint32_t)0x01) << 18)
#define DMA_ISR_HTIF5                         DMA_ISR_HTIF5_Mask
#define DMA_ISR_HTIF6_Pos                     ((uint32_t)22)                    /* Channel x half transfer flag */
#define DMA_ISR_HTIF6_Mask                    (((uint32_t)0x01) << 22)
#define DMA_ISR_HTIF6                         DMA_ISR_HTIF6_Mask
#define DMA_ISR_HTIF7_Pos                     ((uint32_t)26)                    /* Channel x half transfer flag */
#define DMA_ISR_HTIF7_Mask                    (((uint32_t)0x01) << 26)
#define DMA_ISR_HTIF7                         DMA_ISR_HTIF7_Mask
#define DMA_ISR_TCIF1_Pos                     ((uint32_t)1)                     /* Channel x transfer complete flag */
#define DMA_ISR_TCIF1_Mask                    (((uint32_t)0x01) << 1)
#define DMA_ISR_TCIF1                         DMA_ISR_TCIF1_Mask
#define DMA_ISR_TCIF2_Pos                     ((uint32_t)5)                     /* Channel x transfer complete flag */
#define DMA_ISR_TCIF2_Mask                    (((uint32_t)0x01) << 5)
#define DMA_ISR_TCIF2                         DMA_ISR_TCIF2_Mask
#define DMA_ISR_TCIF3_Pos                     ((uint32_t)9)                     /* Channel x transfer complete flag */
#define DMA_ISR_TCIF3_Mask                    (((uint32_t)0x01) << 9)
#define DMA_ISR_TCIF3                         DMA_ISR_TCIF3_Mask
#define DMA_ISR_TCIF4_Pos                     ((uint32_t)13)                    /* Channel x transfer complete flag */
#define DMA_ISR_TCIF4_Mask                    (((uint32_t)0x01) << 13)
#define DMA_ISR_TCIF4                         DMA_ISR_TCIF4_Mask
#define DMA_ISR_TCIF5_Pos                     ((uint32_t)17)                    /* Channel x transfer complete flag */
#define DMA_ISR_TCIF5_Mask                    (((uint32_t)0x01) << 17)
#define DMA_ISR_TCIF5                         DMA_ISR_TCIF5_Mask
#define DMA_ISR_TCIF6_Pos                     ((uint32_t)21)                    /* Channel x transfer complete flag */
#define DMA_ISR_TCIF6_Mask                    (((uint32_t)0x01) << 21)
#define DMA_ISR_TCIF6                         DMA_ISR_TCIF6_Mask
#define DMA_ISR_TCIF7_Pos                     ((uint32_t)25)                    /* Channel x transfer complete flag */
#define DMA_ISR_TCIF7_Mask                    (((uint32_t)0x01) << 25)
#define DMA_ISR_TCIF7                         DMA_ISR_TCIF7_Mask
#define DMA_ISR_GIF1_Pos                      ((uint32_t)0)                     /* Channel x global interrupt flag */
#define DMA_ISR_GIF1_Mask                     (((uint32_t)0x01) << 0)
#define DMA_ISR_GIF1                          DMA_ISR_GIF1_Mask
#define DMA_ISR_GIF2_Pos                      ((uint32_t)4)                     /* Channel x global interrupt flag */
#define DMA_ISR_GIF2_Mask                     (((uint32_t)0x01) << 4)
#define DMA_ISR_GIF2                          DMA_ISR_GIF2_Mask
#define DMA_ISR_GIF3_Pos                      ((uint32_t)8)                     /* Channel x global interrupt flag */
#define DMA_ISR_GIF3_Mask                     (((uint32_t)0x01) << 8)
#define DMA_ISR_GIF3                          DMA_ISR_GIF3_Mask
#define DMA_ISR_GIF4_Pos                      ((uint32_t)12)                    /* Channel x global interrupt flag */
#define DMA_ISR_GIF4_Mask                     (((uint32_t)0x01) << 12)
#define DMA_ISR_GIF4                          DMA_ISR_GIF4_Mask
#define DMA_ISR_GIF5_Pos                      ((uint32_t)16)                    /* Channel x global interrupt flag */
#define DMA_ISR_GIF5_Mask                     (((uint32_t)0x01) << 16)
#define DMA_ISR_GIF5                          DMA_ISR_GIF5_Mask
#define DMA_ISR_GIF6_Pos                      ((uint32_t)20)                    /* Channel x global interrupt flag */
#define DMA_ISR_GIF6_Mask                     (((uint32_t)0x01) << 20)
#define DMA_ISR_GIF6                          DMA_ISR_GIF6_Mask
#define DMA_ISR_GIF7_Pos                      ((uint32_t)24)                    /* Channel x global interrupt flag */
#define DMA_ISR_GIF7_Mask                     (((uint32_t)0x01) << 24)
#define DMA_ISR_GIF7                          DMA_ISR_GIF7_Mask

/************************************* DMA->IFCR  ***************************************/
#define DMA_IFCR_CTEIF1_Pos                   ((uint32_t)3)                     /* Channel x transfer error clear */
#define DMA_IFCR_CTEIF1_Mask                  (((uint32_t)0x01) << 3)
#define DMA_IFCR_CTEIF1                       DMA_IFCR_CTEIF1_Mask
#define DMA_IFCR_CTEIF2_Pos                   ((uint32_t)7)                     /* Channel x transfer error clear */
#define DMA_IFCR_CTEIF2_Mask                  (((uint32_t)0x01) << 7)
#define DMA_IFCR_CTEIF2                       DMA_IFCR_CTEIF2_Mask
#define DMA_IFCR_CTEIF3_Pos                   ((uint32_t)11)                    /* Channel x transfer error clear */
#define DMA_IFCR_CTEIF3_Mask                  (((uint32_t)0x01) << 11)
#define DMA_IFCR_CTEIF3                       DMA_IFCR_CTEIF3_Mask
#define DMA_IFCR_CTEIF4_Pos                   ((uint32_t)15)                    /* Channel x transfer error clear */
#define DMA_IFCR_CTEIF4_Mask                  (((uint32_t)0x01) << 15)
#define DMA_IFCR_CTEIF4                       DMA_IFCR_CTEIF4_Mask
#define DMA_IFCR_CTEIF5_Pos                   ((uint32_t)19)                    /* Channel x transfer error clear */
#define DMA_IFCR_CTEIF5_Mask                  (((uint32_t)0x01) << 19)
#define DMA_IFCR_CTEIF5                       DMA_IFCR_CTEIF5_Mask
#define DMA_IFCR_CTEIF6_Pos                   ((uint32_t)23)                    /* Channel x transfer error clear */
#define DMA_IFCR_CTEIF6_Mask                  (((uint32_t)0x01) << 23)
#define DMA_IFCR_CTEIF6                       DMA_IFCR_CTEIF6_Mask
#define DMA_IFCR_CTEIF7_Pos                   ((uint32_t)27)                    /* Channel x transfer error clear */
#define DMA_IFCR_CTEIF7_Mask                  (((uint32_t)0x01) << 27)
#define DMA_IFCR_CTEIF7                       DMA_IFCR_CTEIF7_Mask
#define DMA_IFCR_CHTIF1_Pos                   ((uint32_t)2)                     /* Channel x half transfer clear */
#define DMA_IFCR_CHTIF1_Mask                  (((uint32_t)0x01) << 2)
#define DMA_IFCR_CHTIF1                       DMA_IFCR_CHTIF1_Mask
#define DMA_IFCR_CHTIF2_Pos                   ((uint32_t)6)                     /* Channel x half transfer clear */
#define DMA_IFCR_CHTIF2_Mask                  (((uint32_t)0x01) << 6)
#define DMA_IFCR_CHTIF2                       DMA_IFCR_CHTIF2_Mask
#define DMA_IFCR_CHTIF3_Pos                   ((uint32_t)10)                    /* Channel x half transfer clear */
#define DMA_IFCR_CHTIF3_Mask                  (((uint32_t)0x01) << 10)
#define DMA_IFCR_CHTIF3                       DMA_IFCR_CHTIF3_Mask
#define DMA_IFCR_CHTIF4_Pos                   ((uint32_t)14)                    /* Channel x half transfer clear */
#define DMA_IFCR_CHTIF4_Mask                  (((uint32_t)0x01) << 14)
#define DMA_IFCR_CHTIF4                       DMA_IFCR_CHTIF4_Mask
#define DMA_IFCR_CHTIF5_Pos                   ((uint32_t)18)                    /* Channel x half transfer clear */
#define DMA_IFCR_CHTIF5_Mask                  (((uint32_t)0x01) << 18)
#define DMA_IFCR_CHTIF5                       DMA_IFCR_CHTIF5_Mask
#define DMA_IFCR_CHTIF6_Pos                   ((uint32_t)22)                    /* Channel x half transfer clear */
#define DMA_IFCR_CHTIF6_Mask                  (((uint32_t)0x01) << 22)
#define DMA_IFCR_CHTIF6                       DMA_IFCR_CHTIF6_Mask
#define DMA_IFCR_CHTIF7_Pos                   ((uint32_t)26)                    /* Channel x half transfer clear */
#define DMA_IFCR_CHTIF7_Mask                  (((uint32_t)0x01) << 26)
#define DMA_IFCR_CHTIF7                       DMA_IFCR_CHTIF7_Mask
#define DMA_IFCR_CTCIF1_Pos                   ((uint32_t)1)                     /* Channel x transfer complete clear */
#define DMA_IFCR_CTCIF1_Mask                  (((uint32_t)0x01) << 1)
#define DMA_IFCR_CTCIF1                       DMA_IFCR_CTCIF1_Mask
#define DMA_IFCR_CTCIF2_Pos                   ((uint32_t)5)                     /* Channel x transfer complete clear */
#define DMA_IFCR_CTCIF2_Mask                  (((uint32_t)0x01) << 5)
#define DMA_IFCR_CTCIF2                       DMA_IFCR_CTCIF2_Mask
#define DMA_IFCR_CTCIF3_Pos                   ((uint32_t)9)                     /* Channel x transfer complete clear */
#define DMA_IFCR_CTCIF3_Mask                  (((uint32_t)0x01) << 9)
#define DMA_IFCR_CTCIF3                       DMA_IFCR_CTCIF3_Mask
#define DMA_IFCR_CTCIF4_Pos                   ((uint32_t)13)                    /* Channel x transfer complete clear */
#define DMA_IFCR_CTCIF4_Mask                  (((uint32_t)0x01) << 13)
#define DMA_IFCR_CTCIF4                       DMA_IFCR_CTCIF4_Mask
#define DMA_IFCR_CTCIF5_Pos                   ((uint32_t)17)                    /* Channel x transfer complete clear */
#define DMA_IFCR_CTCIF5_Mask                  (((uint32_t)0x01) << 17)
#define DMA_IFCR_CTCIF5                       DMA_IFCR_CTCIF5_Mask
#define DMA_IFCR_CTCIF6_Pos                   ((uint32_t)21)                    /* Channel x transfer complete clear */
#define DMA_IFCR_CTCIF6_Mask                  (((uint32_t)0x01) << 21)
#define DMA_IFCR_CTCIF6                       DMA_IFCR_CTCIF6_Mask
#define DMA_IFCR_CTCIF7_Pos                   ((uint32_t)25)                    /* Channel x transfer complete clear */
#define DMA_IFCR_CTCIF7_Mask                  (((uint32_t)0x01) << 25)
#define DMA_IFCR_CTCIF7                       DMA_IFCR_CTCIF7_Mask
#define DMA_IFCR_CGIF1_Pos                    ((uint32_t)0)                     /* Channel x global interrupt clear */
#define DMA_IFCR_CGIF1_Mask                   (((uint32_t)0x01) << 0)
#define DMA_IFCR_CGIF1                        DMA_IFCR_CGIF1_Mask
#define DMA_IFCR_CGIF2_Pos                    ((uint32_t)4)                     /* Channel x global interrupt clear */
#define DMA_IFCR_CGIF2_Mask                   (((uint32_t)0x01) << 4)
#define DMA_IFCR_CGIF2                        DMA_IFCR_CGIF2_Mask
#define DMA_IFCR_CGIF3_Pos                    ((uint32_t)8)                     /* Channel x global interrupt clear */
#define DMA_IFCR_CGIF3_Mask                   (((uint32_t)0x01) << 8)
#define DMA_IFCR_CGIF3                        DMA_IFCR_CGIF3_Mask
#define DMA_IFCR_CGIF4_Pos                    ((uint32_t)12)                    /* Channel x global interrupt clear */
#define DMA_IFCR_CGIF4_Mask                   (((uint32_t)0x01) << 12)
#define DMA_IFCR_CGIF4                        DMA_IFCR_CGIF4_Mask
#define DMA_IFCR_CGIF5_Pos                    ((uint32_t)16)                    /* Channel x global interrupt clear */
#define DMA_IFCR_CGIF5_Mask                   (((uint32_t)0x01) << 16)
#define DMA_IFCR_CGIF5                        DMA_IFCR_CGIF5_Mask
#define DMA_IFCR_CGIF6_Pos                    ((uint32_t)20)                    /* Channel x global interrupt clear */
#define DMA_IFCR_CGIF6_Mask                   (((uint32_t)0x01) << 20)
#define DMA_IFCR_CGIF6                        DMA_IFCR_CGIF6_Mask
#define DMA_IFCR_CGIF7_Pos                    ((uint32_t)24)                    /* Channel x global interrupt clear */
#define DMA_IFCR_CGIF7_Mask                   (((uint32_t)0x01) << 24)
#define DMA_IFCR_CGIF7                        DMA_IFCR_CGIF7_Mask

/************************************ DMA->CHSELR  **************************************/
#define DMA_CHSELR_C7S_Pos                    ((uint32_t)24)                    /* Channel 7 select */
#define DMA_CHSELR_C7S_Mask                   (((uint32_t)0x0F) << 24)
#define DMA_CHSELR_C7S                        DMA_CHSELR_C7S_Mask
#define DMA_CHSELR_C7S_0                      (((uint32_t)0x1 << DMA_CHSELR_C7S_Pos))
#define DMA_CHSELR_C7S_1                      (((uint32_t)0x2 << DMA_CHSELR_C7S_Pos))
#define DMA_CHSELR_C7S_2                      (((uint32_t)0x4 << DMA_CHSELR_C7S_Pos))
#define DMA_CHSELR_C7S_3                      (((uint32_t)0x8 << DMA_CHSELR_C7S_Pos))
#define DMA_CHSELR_C6S_Pos                    ((uint32_t)20)                    /* Channel 6 select */
#define DMA_CHSELR_C6S_Mask                   (((uint32_t)0x0F) << 20)
#define DMA_CHSELR_C6S                        DMA_CHSELR_C6S_Mask
#define DMA_CHSELR_C6S_0                      (((uint32_t)0x1 << DMA_CHSELR_C6S_Pos))
#define DMA_CHSELR_C6S_1                      (((uint32_t)0x2 << DMA_CHSELR_C6S_Pos))
#define DMA_CHSELR_C6S_2                      (((uint32_t)0x4 << DMA_CHSELR_C6S_Pos))
#define DMA_CHSELR_C6S_3                      (((uint32_t)0x8 << DMA_CHSELR_C6S_Pos))
#define DMA_CHSELR_C5S_Pos                    ((uint32_t)16)                    /* Channel 5 select */
#define DMA_CHSELR_C5S_Mask                   (((uint32_t)0x0F) << 16)
#define DMA_CHSELR_C5S                        DMA_CHSELR_C5S_Mask
#define DMA_CHSELR_C5S_0                      (((uint32_t)0x1 << DMA_CHSELR_C5S_Pos))
#define DMA_CHSELR_C5S_1                      (((uint32_t)0x2 << DMA_CHSELR_C5S_Pos))
#define DMA_CHSELR_C5S_2                      (((uint32_t)0x4 << DMA_CHSELR_C5S_Pos))
#define DMA_CHSELR_C5S_3                      (((uint32_t)0x8 << DMA_CHSELR_C5S_Pos))
#define DMA_CHSELR_C4S_Pos                    ((uint32_t)12)                    /* Channel 4 select */
#define DMA_CHSELR_C4S_Mask                   (((uint32_t)0x0F) << 12)
#define DMA_CHSELR_C4S                        DMA_CHSELR_C4S_Mask
#define DMA_CHSELR_C4S_0                      (((uint32_t)0x1 << DMA_CHSELR_C4S_Pos))
#define DMA_CHSELR_C4S_1                      (((uint32_t)0x2 << DMA_CHSELR_C4S_Pos))
#define DMA_CHSELR_C4S_2                      (((uint32_t)0x4 << DMA_CHSELR_C4S_Pos))
#define DMA_CHSELR_C4S_3                      (((uint32_t)0x8 << DMA_CHSELR_C4S_Pos))
#define DMA_CHSELR_C3S_Pos                    ((uint32_t)8)                     /* Channel 3 select */
#define DMA_CHSELR_C3S_Mask                   (((uint32_t)0x0F) << 8)
#define DMA_CHSELR_C3S                        DMA_CHSELR_C3S_Mask
#define DMA_CHSELR_C3S_0                      (((uint32_t)0x1 << DMA_CHSELR_C3S_Pos))
#define DMA_CHSELR_C3S_1                      (((uint32_t)0x2 << DMA_CHSELR_C3S_Pos))
#define DMA_CHSELR_C3S_2                      (((uint32_t)0x4 << DMA_CHSELR_C3S_Pos))
#define DMA_CHSELR_C3S_3                      (((uint32_t)0x8 << DMA_CHSELR_C3S_Pos))
#define DMA_CHSELR_C2S_Pos                    ((uint32_t)4)                     /* Channel 2 select */
#define DMA_CHSELR_C2S_Mask                   (((uint32_t)0x0F) << 4)
#define DMA_CHSELR_C2S                        DMA_CHSELR_C2S_Mask
#define DMA_CHSELR_C2S_0                      (((uint32_t)0x1 << DMA_CHSELR_C2S_Pos))
#define DMA_CHSELR_C2S_1                      (((uint32_t)0x2 << DMA_CHSELR_C2S_Pos))
#define DMA_CHSELR_C2S_2                      (((uint32_t)0x4 << DMA_CHSELR_C2S_Pos))
#define DMA_CHSELR_C2S_3                      (((uint32_t)0x8 << DMA_CHSELR_C2S_Pos))
#define DMA_CHSELR_C1S_Pos                    ((uint32_t)0)                     /* Channel 1 select */
#define DMA_CHSELR_C1S_Mask                   (((uint32_t)0x0F) << 0)
#define DMA_CHSELR_C1S                        DMA_CHSELR_C1S_Mask
#define DMA_CHSELR_C1S_0                      (((uint32_t)0x1))
#define DMA_CHSELR_C1S_1                      (((uint32_t)0x2))
#define DMA_CHSELR_C1S_2                      (((uint32_t)0x4))
#define DMA_CHSELR_C1S_3                      (((uint32_t)0x8))

/*****************************************************************************************
*                                 Peripheral DMA_Channel                                 *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t CHCR;                   /* CHCR */
    __IO uint32_t CHDTR;                  /* CHDTR */
    __IO uint32_t CHPAR;                  /* CHPAR */
    __IO uint32_t CHMAR;                  /* CHMAR */
} DMA_Channel_TypeDef;

/********************************* DMA_Channel->CHCR  ***********************************/
#define DMA_Channel_CHCR_MEM2MEM_Pos          ((uint32_t)14)                    /* Memory to memory mode */
#define DMA_Channel_CHCR_MEM2MEM_Mask         (((uint32_t)0x01) << 14)
#define DMA_Channel_CHCR_MEM2MEM              DMA_Channel_CHCR_MEM2MEM_Mask
#define DMA_Channel_CHCR_PL_Pos               ((uint32_t)12)                    /* Channel priority level */
#define DMA_Channel_CHCR_PL_Mask              (((uint32_t)0x03) << 12)
#define DMA_Channel_CHCR_PL                   DMA_Channel_CHCR_PL_Mask
#define DMA_Channel_CHCR_PL_0                 (((uint32_t)0x1 << DMA_Channel_CHCR_PL_Pos))
#define DMA_Channel_CHCR_PL_1                 (((uint32_t)0x2 << DMA_Channel_CHCR_PL_Pos))
#define DMA_Channel_CHCR_MSIZE_Pos            ((uint32_t)10)                    /* Memory size */
#define DMA_Channel_CHCR_MSIZE_Mask           (((uint32_t)0x03) << 10)
#define DMA_Channel_CHCR_MSIZE                DMA_Channel_CHCR_MSIZE_Mask
#define DMA_Channel_CHCR_MSIZE_0              (((uint32_t)0x1 << DMA_Channel_CHCR_MSIZE_Pos))
#define DMA_Channel_CHCR_MSIZE_1              (((uint32_t)0x2 << DMA_Channel_CHCR_MSIZE_Pos))
#define DMA_Channel_CHCR_PSIZE_Pos            ((uint32_t)8)                     /* Peripheral size */
#define DMA_Channel_CHCR_PSIZE_Mask           (((uint32_t)0x03) << 8)
#define DMA_Channel_CHCR_PSIZE                DMA_Channel_CHCR_PSIZE_Mask
#define DMA_Channel_CHCR_PSIZE_0              (((uint32_t)0x1 << DMA_Channel_CHCR_PSIZE_Pos))
#define DMA_Channel_CHCR_PSIZE_1              (((uint32_t)0x2 << DMA_Channel_CHCR_PSIZE_Pos))
#define DMA_Channel_CHCR_MINC_Pos             ((uint32_t)7)                     /* Memory increment mode */
#define DMA_Channel_CHCR_MINC_Mask            (((uint32_t)0x01) << 7)
#define DMA_Channel_CHCR_MINC                 DMA_Channel_CHCR_MINC_Mask
#define DMA_Channel_CHCR_PINC_Pos             ((uint32_t)6)                     /* Peripheral increment mode */
#define DMA_Channel_CHCR_PINC_Mask            (((uint32_t)0x01) << 6)
#define DMA_Channel_CHCR_PINC                 DMA_Channel_CHCR_PINC_Mask
#define DMA_Channel_CHCR_CIRC_Pos             ((uint32_t)5)                     /* Circular mode */
#define DMA_Channel_CHCR_CIRC_Mask            (((uint32_t)0x01) << 5)
#define DMA_Channel_CHCR_CIRC                 DMA_Channel_CHCR_CIRC_Mask
#define DMA_Channel_CHCR_DIR_Pos              ((uint32_t)4)                     /* Data transfer direction */
#define DMA_Channel_CHCR_DIR_Mask             (((uint32_t)0x01) << 4)
#define DMA_Channel_CHCR_DIR                  DMA_Channel_CHCR_DIR_Mask
#define DMA_Channel_CHCR_TEIE_Pos             ((uint32_t)3)                     /* Transfer error interrupt enable */
#define DMA_Channel_CHCR_TEIE_Mask            (((uint32_t)0x01) << 3)
#define DMA_Channel_CHCR_TEIE                 DMA_Channel_CHCR_TEIE_Mask
#define DMA_Channel_CHCR_HTIE_Pos             ((uint32_t)2)                     /* Half transfer interrupt enable */
#define DMA_Channel_CHCR_HTIE_Mask            (((uint32_t)0x01) << 2)
#define DMA_Channel_CHCR_HTIE                 DMA_Channel_CHCR_HTIE_Mask
#define DMA_Channel_CHCR_TCIE_Pos             ((uint32_t)1)                     /* Transfer complete interrupt enable */
#define DMA_Channel_CHCR_TCIE_Mask            (((uint32_t)0x01) << 1)
#define DMA_Channel_CHCR_TCIE                 DMA_Channel_CHCR_TCIE_Mask
#define DMA_Channel_CHCR_EN_Pos               ((uint32_t)0)                     /* Channel enable */
#define DMA_Channel_CHCR_EN_Mask              (((uint32_t)0x01) << 0)
#define DMA_Channel_CHCR_EN                   DMA_Channel_CHCR_EN_Mask

/********************************* DMA_Channel->CHDTR  **********************************/
#define DMA_Channel_CHDTR_NDT_Pos             ((uint32_t)0)                     /* Number of data to transfer */
#define DMA_Channel_CHDTR_NDT_Mask            (((uint32_t)0xFFFF) << 0)
#define DMA_Channel_CHDTR_NDT                 DMA_Channel_CHDTR_NDT_Mask

/********************************* DMA_Channel->CHPAR  **********************************/
#define DMA_Channel_CHPAR_PA_Pos              ((uint32_t)0)                     /* Peripheral address */
#define DMA_Channel_CHPAR_PA_Mask             (((uint32_t)0xFFFFFFFF) << 0)
#define DMA_Channel_CHPAR_PA                  DMA_Channel_CHPAR_PA_Mask

/********************************* DMA_Channel->CHMAR  **********************************/
#define DMA_Channel_CHMAR_MA_Pos              ((uint32_t)0)                     /* Memory address */
#define DMA_Channel_CHMAR_MA_Mask             (((uint32_t)0xFFFFFFFF) << 0)
#define DMA_Channel_CHMAR_MA                  DMA_Channel_CHMAR_MA_Mask

/*****************************************************************************************
*                                     Peripheral EXTI                                    *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t IMR;                    /* IMR */
    __IO uint32_t EMR;                    /* EMR */
    __IO uint32_t RTSR;                   /* RTSR */
    __IO uint32_t FTSR;                   /* FTSR */
    __IO uint32_t SWIER;                  /* SWIER */
    __IO uint32_t PR;                     /* PR */
} EXTI_TypeDef;

/************************************* EXTI->IMR  ***************************************/
#define EXTI_IMR_IM31_Pos                     ((uint32_t)31)                    /* Interrupt mask on line 31 */
#define EXTI_IMR_IM31_Mask                    (((uint32_t)0x01) << 31)
#define EXTI_IMR_IM31                         EXTI_IMR_IM31_Mask
#define EXTI_IMR_IM28_Pos                     ((uint32_t)28)                    /* Interrupt mask on line 28 */
#define EXTI_IMR_IM28_Mask                    (((uint32_t)0x01) << 28)
#define EXTI_IMR_IM28                         EXTI_IMR_IM28_Mask
#define EXTI_IMR_IM0_Pos                      ((uint32_t)0)                     /* Interrupt mask on line x */
#define EXTI_IMR_IM0_Mask                     (((uint32_t)0x01) << 0)
#define EXTI_IMR_IM0                          EXTI_IMR_IM0_Mask
#define EXTI_IMR_IM1_Pos                      ((uint32_t)1)                     /* Interrupt mask on line x */
#define EXTI_IMR_IM1_Mask                     (((uint32_t)0x01) << 1)
#define EXTI_IMR_IM1                          EXTI_IMR_IM1_Mask
#define EXTI_IMR_IM2_Pos                      ((uint32_t)2)                     /* Interrupt mask on line x */
#define EXTI_IMR_IM2_Mask                     (((uint32_t)0x01) << 2)
#define EXTI_IMR_IM2                          EXTI_IMR_IM2_Mask
#define EXTI_IMR_IM3_Pos                      ((uint32_t)3)                     /* Interrupt mask on line x */
#define EXTI_IMR_IM3_Mask                     (((uint32_t)0x01) << 3)
#define EXTI_IMR_IM3                          EXTI_IMR_IM3_Mask
#define EXTI_IMR_IM4_Pos                      ((uint32_t)4)                     /* Interrupt mask on line x */
#define EXTI_IMR_IM4_Mask                     (((uint32_t)0x01) << 4)
#define EXTI_IMR_IM4                          EXTI_IMR_IM4_Mask
#define EXTI_IMR_IM5_Pos                      ((uint32_t)5)                     /* Interrupt mask on line x */
#define EXTI_IMR_IM5_Mask                     (((uint32_t)0x01) << 5)
#define EXTI_IMR_IM5                          EXTI_IMR_IM5_Mask
#define EXTI_IMR_IM6_Pos                      ((uint32_t)6)                     /* Interrupt mask on line x */
#define EXTI_IMR_IM6_Mask                     (((uint32_t)0x01) << 6)
#define EXTI_IMR_IM6                          EXTI_IMR_IM6_Mask
#define EXTI_IMR_IM7_Pos                      ((uint32_t)7)                     /* Interrupt mask on line x */
#define EXTI_IMR_IM7_Mask                     (((uint32_t)0x01) << 7)
#define EXTI_IMR_IM7                          EXTI_IMR_IM7_Mask
#define EXTI_IMR_IM8_Pos                      ((uint32_t)8)                     /* Interrupt mask on line x */
#define EXTI_IMR_IM8_Mask                     (((uint32_t)0x01) << 8)
#define EXTI_IMR_IM8                          EXTI_IMR_IM8_Mask
#define EXTI_IMR_IM9_Pos                      ((uint32_t)9)                     /* Interrupt mask on line x */
#define EXTI_IMR_IM9_Mask                     (((uint32_t)0x01) << 9)
#define EXTI_IMR_IM9                          EXTI_IMR_IM9_Mask
#define EXTI_IMR_IM10_Pos                     ((uint32_t)10)                    /* Interrupt mask on line x */
#define EXTI_IMR_IM10_Mask                    (((uint32_t)0x01) << 10)
#define EXTI_IMR_IM10                         EXTI_IMR_IM10_Mask
#define EXTI_IMR_IM11_Pos                     ((uint32_t)11)                    /* Interrupt mask on line x */
#define EXTI_IMR_IM11_Mask                    (((uint32_t)0x01) << 11)
#define EXTI_IMR_IM11                         EXTI_IMR_IM11_Mask
#define EXTI_IMR_IM12_Pos                     ((uint32_t)12)                    /* Interrupt mask on line x */
#define EXTI_IMR_IM12_Mask                    (((uint32_t)0x01) << 12)
#define EXTI_IMR_IM12                         EXTI_IMR_IM12_Mask
#define EXTI_IMR_IM13_Pos                     ((uint32_t)13)                    /* Interrupt mask on line x */
#define EXTI_IMR_IM13_Mask                    (((uint32_t)0x01) << 13)
#define EXTI_IMR_IM13                         EXTI_IMR_IM13_Mask
#define EXTI_IMR_IM14_Pos                     ((uint32_t)14)                    /* Interrupt mask on line x */
#define EXTI_IMR_IM14_Mask                    (((uint32_t)0x01) << 14)
#define EXTI_IMR_IM14                         EXTI_IMR_IM14_Mask
#define EXTI_IMR_IM15_Pos                     ((uint32_t)15)                    /* Interrupt mask on line x */
#define EXTI_IMR_IM15_Mask                    (((uint32_t)0x01) << 15)
#define EXTI_IMR_IM15                         EXTI_IMR_IM15_Mask
#define EXTI_IMR_IM16_Pos                     ((uint32_t)16)                    /* Interrupt mask on line x */
#define EXTI_IMR_IM16_Mask                    (((uint32_t)0x01) << 16)
#define EXTI_IMR_IM16                         EXTI_IMR_IM16_Mask
#define EXTI_IMR_IM17_Pos                     ((uint32_t)17)                    /* Interrupt mask on line x */
#define EXTI_IMR_IM17_Mask                    (((uint32_t)0x01) << 17)
#define EXTI_IMR_IM17                         EXTI_IMR_IM17_Mask
#define EXTI_IMR_IM18_Pos                     ((uint32_t)18)                    /* Interrupt mask on line x */
#define EXTI_IMR_IM18_Mask                    (((uint32_t)0x01) << 18)
#define EXTI_IMR_IM18                         EXTI_IMR_IM18_Mask
#define EXTI_IMR_IM19_Pos                     ((uint32_t)19)                    /* Interrupt mask on line x */
#define EXTI_IMR_IM19_Mask                    (((uint32_t)0x01) << 19)
#define EXTI_IMR_IM19                         EXTI_IMR_IM19_Mask
#define EXTI_IMR_IM20_Pos                     ((uint32_t)20)                    /* Interrupt mask on line x */
#define EXTI_IMR_IM20_Mask                    (((uint32_t)0x01) << 20)
#define EXTI_IMR_IM20                         EXTI_IMR_IM20_Mask
#define EXTI_IMR_IM21_Pos                     ((uint32_t)21)                    /* Interrupt mask on line x */
#define EXTI_IMR_IM21_Mask                    (((uint32_t)0x01) << 21)
#define EXTI_IMR_IM21                         EXTI_IMR_IM21_Mask
#define EXTI_IMR_IM22_Pos                     ((uint32_t)22)                    /* Interrupt mask on line x */
#define EXTI_IMR_IM22_Mask                    (((uint32_t)0x01) << 22)
#define EXTI_IMR_IM22                         EXTI_IMR_IM22_Mask
#define EXTI_IMR_IM23_Pos                     ((uint32_t)23)                    /* Interrupt mask on line x */
#define EXTI_IMR_IM23_Mask                    (((uint32_t)0x01) << 23)
#define EXTI_IMR_IM23                         EXTI_IMR_IM23_Mask
#define EXTI_IMR_IM24_Pos                     ((uint32_t)24)                    /* Interrupt mask on line x */
#define EXTI_IMR_IM24_Mask                    (((uint32_t)0x01) << 24)
#define EXTI_IMR_IM24                         EXTI_IMR_IM24_Mask
#define EXTI_IMR_IM25_Pos                     ((uint32_t)25)                    /* Interrupt mask on line x */
#define EXTI_IMR_IM25_Mask                    (((uint32_t)0x01) << 25)
#define EXTI_IMR_IM25                         EXTI_IMR_IM25_Mask
#define EXTI_IMR_IM26_Pos                     ((uint32_t)26)                    /* Interrupt mask on line x */
#define EXTI_IMR_IM26_Mask                    (((uint32_t)0x01) << 26)
#define EXTI_IMR_IM26                         EXTI_IMR_IM26_Mask

/************************************* EXTI->EMR  ***************************************/
#define EXTI_EMR_EM31_Pos                     ((uint32_t)31)                    /* Event mask on line 31 */
#define EXTI_EMR_EM31_Mask                    (((uint32_t)0x01) << 31)
#define EXTI_EMR_EM31                         EXTI_EMR_EM31_Mask
#define EXTI_EMR_EM28_Pos                     ((uint32_t)28)                    /* Event mask on line 28 */
#define EXTI_EMR_EM28_Mask                    (((uint32_t)0x01) << 28)
#define EXTI_EMR_EM28                         EXTI_EMR_EM28_Mask
#define EXTI_EMR_EM0_Pos                      ((uint32_t)0)                     /* Event mask on line x */
#define EXTI_EMR_EM0_Mask                     (((uint32_t)0x01) << 0)
#define EXTI_EMR_EM0                          EXTI_EMR_EM0_Mask
#define EXTI_EMR_EM1_Pos                      ((uint32_t)1)                     /* Event mask on line x */
#define EXTI_EMR_EM1_Mask                     (((uint32_t)0x01) << 1)
#define EXTI_EMR_EM1                          EXTI_EMR_EM1_Mask
#define EXTI_EMR_EM2_Pos                      ((uint32_t)2)                     /* Event mask on line x */
#define EXTI_EMR_EM2_Mask                     (((uint32_t)0x01) << 2)
#define EXTI_EMR_EM2                          EXTI_EMR_EM2_Mask
#define EXTI_EMR_EM3_Pos                      ((uint32_t)3)                     /* Event mask on line x */
#define EXTI_EMR_EM3_Mask                     (((uint32_t)0x01) << 3)
#define EXTI_EMR_EM3                          EXTI_EMR_EM3_Mask
#define EXTI_EMR_EM4_Pos                      ((uint32_t)4)                     /* Event mask on line x */
#define EXTI_EMR_EM4_Mask                     (((uint32_t)0x01) << 4)
#define EXTI_EMR_EM4                          EXTI_EMR_EM4_Mask
#define EXTI_EMR_EM5_Pos                      ((uint32_t)5)                     /* Event mask on line x */
#define EXTI_EMR_EM5_Mask                     (((uint32_t)0x01) << 5)
#define EXTI_EMR_EM5                          EXTI_EMR_EM5_Mask
#define EXTI_EMR_EM6_Pos                      ((uint32_t)6)                     /* Event mask on line x */
#define EXTI_EMR_EM6_Mask                     (((uint32_t)0x01) << 6)
#define EXTI_EMR_EM6                          EXTI_EMR_EM6_Mask
#define EXTI_EMR_EM7_Pos                      ((uint32_t)7)                     /* Event mask on line x */
#define EXTI_EMR_EM7_Mask                     (((uint32_t)0x01) << 7)
#define EXTI_EMR_EM7                          EXTI_EMR_EM7_Mask
#define EXTI_EMR_EM8_Pos                      ((uint32_t)8)                     /* Event mask on line x */
#define EXTI_EMR_EM8_Mask                     (((uint32_t)0x01) << 8)
#define EXTI_EMR_EM8                          EXTI_EMR_EM8_Mask
#define EXTI_EMR_EM9_Pos                      ((uint32_t)9)                     /* Event mask on line x */
#define EXTI_EMR_EM9_Mask                     (((uint32_t)0x01) << 9)
#define EXTI_EMR_EM9                          EXTI_EMR_EM9_Mask
#define EXTI_EMR_EM10_Pos                     ((uint32_t)10)                    /* Event mask on line x */
#define EXTI_EMR_EM10_Mask                    (((uint32_t)0x01) << 10)
#define EXTI_EMR_EM10                         EXTI_EMR_EM10_Mask
#define EXTI_EMR_EM11_Pos                     ((uint32_t)11)                    /* Event mask on line x */
#define EXTI_EMR_EM11_Mask                    (((uint32_t)0x01) << 11)
#define EXTI_EMR_EM11                         EXTI_EMR_EM11_Mask
#define EXTI_EMR_EM12_Pos                     ((uint32_t)12)                    /* Event mask on line x */
#define EXTI_EMR_EM12_Mask                    (((uint32_t)0x01) << 12)
#define EXTI_EMR_EM12                         EXTI_EMR_EM12_Mask
#define EXTI_EMR_EM13_Pos                     ((uint32_t)13)                    /* Event mask on line x */
#define EXTI_EMR_EM13_Mask                    (((uint32_t)0x01) << 13)
#define EXTI_EMR_EM13                         EXTI_EMR_EM13_Mask
#define EXTI_EMR_EM14_Pos                     ((uint32_t)14)                    /* Event mask on line x */
#define EXTI_EMR_EM14_Mask                    (((uint32_t)0x01) << 14)
#define EXTI_EMR_EM14                         EXTI_EMR_EM14_Mask
#define EXTI_EMR_EM15_Pos                     ((uint32_t)15)                    /* Event mask on line x */
#define EXTI_EMR_EM15_Mask                    (((uint32_t)0x01) << 15)
#define EXTI_EMR_EM15                         EXTI_EMR_EM15_Mask
#define EXTI_EMR_EM16_Pos                     ((uint32_t)16)                    /* Event mask on line x */
#define EXTI_EMR_EM16_Mask                    (((uint32_t)0x01) << 16)
#define EXTI_EMR_EM16                         EXTI_EMR_EM16_Mask
#define EXTI_EMR_EM17_Pos                     ((uint32_t)17)                    /* Event mask on line x */
#define EXTI_EMR_EM17_Mask                    (((uint32_t)0x01) << 17)
#define EXTI_EMR_EM17                         EXTI_EMR_EM17_Mask
#define EXTI_EMR_EM18_Pos                     ((uint32_t)18)                    /* Event mask on line x */
#define EXTI_EMR_EM18_Mask                    (((uint32_t)0x01) << 18)
#define EXTI_EMR_EM18                         EXTI_EMR_EM18_Mask
#define EXTI_EMR_EM19_Pos                     ((uint32_t)19)                    /* Event mask on line x */
#define EXTI_EMR_EM19_Mask                    (((uint32_t)0x01) << 19)
#define EXTI_EMR_EM19                         EXTI_EMR_EM19_Mask
#define EXTI_EMR_EM20_Pos                     ((uint32_t)20)                    /* Event mask on line x */
#define EXTI_EMR_EM20_Mask                    (((uint32_t)0x01) << 20)
#define EXTI_EMR_EM20                         EXTI_EMR_EM20_Mask
#define EXTI_EMR_EM21_Pos                     ((uint32_t)21)                    /* Event mask on line x */
#define EXTI_EMR_EM21_Mask                    (((uint32_t)0x01) << 21)
#define EXTI_EMR_EM21                         EXTI_EMR_EM21_Mask
#define EXTI_EMR_EM22_Pos                     ((uint32_t)22)                    /* Event mask on line x */
#define EXTI_EMR_EM22_Mask                    (((uint32_t)0x01) << 22)
#define EXTI_EMR_EM22                         EXTI_EMR_EM22_Mask
#define EXTI_EMR_EM23_Pos                     ((uint32_t)23)                    /* Event mask on line x */
#define EXTI_EMR_EM23_Mask                    (((uint32_t)0x01) << 23)
#define EXTI_EMR_EM23                         EXTI_EMR_EM23_Mask
#define EXTI_EMR_EM24_Pos                     ((uint32_t)24)                    /* Event mask on line x */
#define EXTI_EMR_EM24_Mask                    (((uint32_t)0x01) << 24)
#define EXTI_EMR_EM24                         EXTI_EMR_EM24_Mask
#define EXTI_EMR_EM25_Pos                     ((uint32_t)25)                    /* Event mask on line x */
#define EXTI_EMR_EM25_Mask                    (((uint32_t)0x01) << 25)
#define EXTI_EMR_EM25                         EXTI_EMR_EM25_Mask
#define EXTI_EMR_EM26_Pos                     ((uint32_t)26)                    /* Event mask on line x */
#define EXTI_EMR_EM26_Mask                    (((uint32_t)0x01) << 26)
#define EXTI_EMR_EM26                         EXTI_EMR_EM26_Mask

/************************************* EXTI->RTSR  **************************************/
#define EXTI_RTSR_RT19_Pos                    ((uint32_t)19)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT19_Mask                   (((uint32_t)0x01) << 19)
#define EXTI_RTSR_RT19                        EXTI_RTSR_RT19_Mask
#define EXTI_RTSR_RT20_Pos                    ((uint32_t)20)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT20_Mask                   (((uint32_t)0x01) << 20)
#define EXTI_RTSR_RT20                        EXTI_RTSR_RT20_Mask
#define EXTI_RTSR_RT21_Pos                    ((uint32_t)21)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT21_Mask                   (((uint32_t)0x01) << 21)
#define EXTI_RTSR_RT21                        EXTI_RTSR_RT21_Mask
#define EXTI_RTSR_RT22_Pos                    ((uint32_t)22)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT22_Mask                   (((uint32_t)0x01) << 22)
#define EXTI_RTSR_RT22                        EXTI_RTSR_RT22_Mask
#define EXTI_RTSR_RT0_Pos                     ((uint32_t)0)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT0_Mask                    (((uint32_t)0x01) << 0)
#define EXTI_RTSR_RT0                         EXTI_RTSR_RT0_Mask
#define EXTI_RTSR_RT1_Pos                     ((uint32_t)1)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT1_Mask                    (((uint32_t)0x01) << 1)
#define EXTI_RTSR_RT1                         EXTI_RTSR_RT1_Mask
#define EXTI_RTSR_RT2_Pos                     ((uint32_t)2)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT2_Mask                    (((uint32_t)0x01) << 2)
#define EXTI_RTSR_RT2                         EXTI_RTSR_RT2_Mask
#define EXTI_RTSR_RT3_Pos                     ((uint32_t)3)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT3_Mask                    (((uint32_t)0x01) << 3)
#define EXTI_RTSR_RT3                         EXTI_RTSR_RT3_Mask
#define EXTI_RTSR_RT4_Pos                     ((uint32_t)4)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT4_Mask                    (((uint32_t)0x01) << 4)
#define EXTI_RTSR_RT4                         EXTI_RTSR_RT4_Mask
#define EXTI_RTSR_RT5_Pos                     ((uint32_t)5)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT5_Mask                    (((uint32_t)0x01) << 5)
#define EXTI_RTSR_RT5                         EXTI_RTSR_RT5_Mask
#define EXTI_RTSR_RT6_Pos                     ((uint32_t)6)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT6_Mask                    (((uint32_t)0x01) << 6)
#define EXTI_RTSR_RT6                         EXTI_RTSR_RT6_Mask
#define EXTI_RTSR_RT7_Pos                     ((uint32_t)7)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT7_Mask                    (((uint32_t)0x01) << 7)
#define EXTI_RTSR_RT7                         EXTI_RTSR_RT7_Mask
#define EXTI_RTSR_RT8_Pos                     ((uint32_t)8)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT8_Mask                    (((uint32_t)0x01) << 8)
#define EXTI_RTSR_RT8                         EXTI_RTSR_RT8_Mask
#define EXTI_RTSR_RT9_Pos                     ((uint32_t)9)                     /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT9_Mask                    (((uint32_t)0x01) << 9)
#define EXTI_RTSR_RT9                         EXTI_RTSR_RT9_Mask
#define EXTI_RTSR_RT10_Pos                    ((uint32_t)10)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT10_Mask                   (((uint32_t)0x01) << 10)
#define EXTI_RTSR_RT10                        EXTI_RTSR_RT10_Mask
#define EXTI_RTSR_RT11_Pos                    ((uint32_t)11)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT11_Mask                   (((uint32_t)0x01) << 11)
#define EXTI_RTSR_RT11                        EXTI_RTSR_RT11_Mask
#define EXTI_RTSR_RT12_Pos                    ((uint32_t)12)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT12_Mask                   (((uint32_t)0x01) << 12)
#define EXTI_RTSR_RT12                        EXTI_RTSR_RT12_Mask
#define EXTI_RTSR_RT13_Pos                    ((uint32_t)13)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT13_Mask                   (((uint32_t)0x01) << 13)
#define EXTI_RTSR_RT13                        EXTI_RTSR_RT13_Mask
#define EXTI_RTSR_RT14_Pos                    ((uint32_t)14)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT14_Mask                   (((uint32_t)0x01) << 14)
#define EXTI_RTSR_RT14                        EXTI_RTSR_RT14_Mask
#define EXTI_RTSR_RT15_Pos                    ((uint32_t)15)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT15_Mask                   (((uint32_t)0x01) << 15)
#define EXTI_RTSR_RT15                        EXTI_RTSR_RT15_Mask
#define EXTI_RTSR_RT16_Pos                    ((uint32_t)16)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT16_Mask                   (((uint32_t)0x01) << 16)
#define EXTI_RTSR_RT16                        EXTI_RTSR_RT16_Mask
#define EXTI_RTSR_RT17_Pos                    ((uint32_t)17)                    /* Rising trigger event configuration bit of line x */
#define EXTI_RTSR_RT17_Mask                   (((uint32_t)0x01) << 17)
#define EXTI_RTSR_RT17                        EXTI_RTSR_RT17_Mask

/************************************* EXTI->FTSR  **************************************/
#define EXTI_FTSR_FT19_Pos                    ((uint32_t)19)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT19_Mask                   (((uint32_t)0x01) << 19)
#define EXTI_FTSR_FT19                        EXTI_FTSR_FT19_Mask
#define EXTI_FTSR_FT20_Pos                    ((uint32_t)20)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT20_Mask                   (((uint32_t)0x01) << 20)
#define EXTI_FTSR_FT20                        EXTI_FTSR_FT20_Mask
#define EXTI_FTSR_FT21_Pos                    ((uint32_t)21)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT21_Mask                   (((uint32_t)0x01) << 21)
#define EXTI_FTSR_FT21                        EXTI_FTSR_FT21_Mask
#define EXTI_FTSR_FT22_Pos                    ((uint32_t)22)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT22_Mask                   (((uint32_t)0x01) << 22)
#define EXTI_FTSR_FT22                        EXTI_FTSR_FT22_Mask
#define EXTI_FTSR_FT0_Pos                     ((uint32_t)0)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT0_Mask                    (((uint32_t)0x01) << 0)
#define EXTI_FTSR_FT0                         EXTI_FTSR_FT0_Mask
#define EXTI_FTSR_FT1_Pos                     ((uint32_t)1)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT1_Mask                    (((uint32_t)0x01) << 1)
#define EXTI_FTSR_FT1                         EXTI_FTSR_FT1_Mask
#define EXTI_FTSR_FT2_Pos                     ((uint32_t)2)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT2_Mask                    (((uint32_t)0x01) << 2)
#define EXTI_FTSR_FT2                         EXTI_FTSR_FT2_Mask
#define EXTI_FTSR_FT3_Pos                     ((uint32_t)3)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT3_Mask                    (((uint32_t)0x01) << 3)
#define EXTI_FTSR_FT3                         EXTI_FTSR_FT3_Mask
#define EXTI_FTSR_FT4_Pos                     ((uint32_t)4)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT4_Mask                    (((uint32_t)0x01) << 4)
#define EXTI_FTSR_FT4                         EXTI_FTSR_FT4_Mask
#define EXTI_FTSR_FT5_Pos                     ((uint32_t)5)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT5_Mask                    (((uint32_t)0x01) << 5)
#define EXTI_FTSR_FT5                         EXTI_FTSR_FT5_Mask
#define EXTI_FTSR_FT6_Pos                     ((uint32_t)6)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT6_Mask                    (((uint32_t)0x01) << 6)
#define EXTI_FTSR_FT6                         EXTI_FTSR_FT6_Mask
#define EXTI_FTSR_FT7_Pos                     ((uint32_t)7)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT7_Mask                    (((uint32_t)0x01) << 7)
#define EXTI_FTSR_FT7                         EXTI_FTSR_FT7_Mask
#define EXTI_FTSR_FT8_Pos                     ((uint32_t)8)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT8_Mask                    (((uint32_t)0x01) << 8)
#define EXTI_FTSR_FT8                         EXTI_FTSR_FT8_Mask
#define EXTI_FTSR_FT9_Pos                     ((uint32_t)9)                     /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT9_Mask                    (((uint32_t)0x01) << 9)
#define EXTI_FTSR_FT9                         EXTI_FTSR_FT9_Mask
#define EXTI_FTSR_FT10_Pos                    ((uint32_t)10)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT10_Mask                   (((uint32_t)0x01) << 10)
#define EXTI_FTSR_FT10                        EXTI_FTSR_FT10_Mask
#define EXTI_FTSR_FT11_Pos                    ((uint32_t)11)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT11_Mask                   (((uint32_t)0x01) << 11)
#define EXTI_FTSR_FT11                        EXTI_FTSR_FT11_Mask
#define EXTI_FTSR_FT12_Pos                    ((uint32_t)12)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT12_Mask                   (((uint32_t)0x01) << 12)
#define EXTI_FTSR_FT12                        EXTI_FTSR_FT12_Mask
#define EXTI_FTSR_FT13_Pos                    ((uint32_t)13)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT13_Mask                   (((uint32_t)0x01) << 13)
#define EXTI_FTSR_FT13                        EXTI_FTSR_FT13_Mask
#define EXTI_FTSR_FT14_Pos                    ((uint32_t)14)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT14_Mask                   (((uint32_t)0x01) << 14)
#define EXTI_FTSR_FT14                        EXTI_FTSR_FT14_Mask
#define EXTI_FTSR_FT15_Pos                    ((uint32_t)15)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT15_Mask                   (((uint32_t)0x01) << 15)
#define EXTI_FTSR_FT15                        EXTI_FTSR_FT15_Mask
#define EXTI_FTSR_FT16_Pos                    ((uint32_t)16)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT16_Mask                   (((uint32_t)0x01) << 16)
#define EXTI_FTSR_FT16                        EXTI_FTSR_FT16_Mask
#define EXTI_FTSR_FT17_Pos                    ((uint32_t)17)                    /* Falling trigger event configuration bit of line x */
#define EXTI_FTSR_FT17_Mask                   (((uint32_t)0x01) << 17)
#define EXTI_FTSR_FT17                        EXTI_FTSR_FT17_Mask

/************************************ EXTI->SWIER  **************************************/
#define EXTI_SWIER_SWI19_Pos                  ((uint32_t)19)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWI19_Mask                 (((uint32_t)0x01) << 19)
#define EXTI_SWIER_SWI19                      EXTI_SWIER_SWI19_Mask
#define EXTI_SWIER_SWI20_Pos                  ((uint32_t)20)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWI20_Mask                 (((uint32_t)0x01) << 20)
#define EXTI_SWIER_SWI20                      EXTI_SWIER_SWI20_Mask
#define EXTI_SWIER_SWI21_Pos                  ((uint32_t)21)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWI21_Mask                 (((uint32_t)0x01) << 21)
#define EXTI_SWIER_SWI21                      EXTI_SWIER_SWI21_Mask
#define EXTI_SWIER_SWI22_Pos                  ((uint32_t)22)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWI22_Mask                 (((uint32_t)0x01) << 22)
#define EXTI_SWIER_SWI22                      EXTI_SWIER_SWI22_Mask
#define EXTI_SWIER_SWI0_Pos                   ((uint32_t)0)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWI0_Mask                  (((uint32_t)0x01) << 0)
#define EXTI_SWIER_SWI0                       EXTI_SWIER_SWI0_Mask
#define EXTI_SWIER_SWI1_Pos                   ((uint32_t)1)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWI1_Mask                  (((uint32_t)0x01) << 1)
#define EXTI_SWIER_SWI1                       EXTI_SWIER_SWI1_Mask
#define EXTI_SWIER_SWI2_Pos                   ((uint32_t)2)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWI2_Mask                  (((uint32_t)0x01) << 2)
#define EXTI_SWIER_SWI2                       EXTI_SWIER_SWI2_Mask
#define EXTI_SWIER_SWI3_Pos                   ((uint32_t)3)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWI3_Mask                  (((uint32_t)0x01) << 3)
#define EXTI_SWIER_SWI3                       EXTI_SWIER_SWI3_Mask
#define EXTI_SWIER_SWI4_Pos                   ((uint32_t)4)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWI4_Mask                  (((uint32_t)0x01) << 4)
#define EXTI_SWIER_SWI4                       EXTI_SWIER_SWI4_Mask
#define EXTI_SWIER_SWI5_Pos                   ((uint32_t)5)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWI5_Mask                  (((uint32_t)0x01) << 5)
#define EXTI_SWIER_SWI5                       EXTI_SWIER_SWI5_Mask
#define EXTI_SWIER_SWI6_Pos                   ((uint32_t)6)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWI6_Mask                  (((uint32_t)0x01) << 6)
#define EXTI_SWIER_SWI6                       EXTI_SWIER_SWI6_Mask
#define EXTI_SWIER_SWI7_Pos                   ((uint32_t)7)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWI7_Mask                  (((uint32_t)0x01) << 7)
#define EXTI_SWIER_SWI7                       EXTI_SWIER_SWI7_Mask
#define EXTI_SWIER_SWI8_Pos                   ((uint32_t)8)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWI8_Mask                  (((uint32_t)0x01) << 8)
#define EXTI_SWIER_SWI8                       EXTI_SWIER_SWI8_Mask
#define EXTI_SWIER_SWI9_Pos                   ((uint32_t)9)                     /* Software interrupt on line x */
#define EXTI_SWIER_SWI9_Mask                  (((uint32_t)0x01) << 9)
#define EXTI_SWIER_SWI9                       EXTI_SWIER_SWI9_Mask
#define EXTI_SWIER_SWI10_Pos                  ((uint32_t)10)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWI10_Mask                 (((uint32_t)0x01) << 10)
#define EXTI_SWIER_SWI10                      EXTI_SWIER_SWI10_Mask
#define EXTI_SWIER_SWI11_Pos                  ((uint32_t)11)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWI11_Mask                 (((uint32_t)0x01) << 11)
#define EXTI_SWIER_SWI11                      EXTI_SWIER_SWI11_Mask
#define EXTI_SWIER_SWI12_Pos                  ((uint32_t)12)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWI12_Mask                 (((uint32_t)0x01) << 12)
#define EXTI_SWIER_SWI12                      EXTI_SWIER_SWI12_Mask
#define EXTI_SWIER_SWI13_Pos                  ((uint32_t)13)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWI13_Mask                 (((uint32_t)0x01) << 13)
#define EXTI_SWIER_SWI13                      EXTI_SWIER_SWI13_Mask
#define EXTI_SWIER_SWI14_Pos                  ((uint32_t)14)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWI14_Mask                 (((uint32_t)0x01) << 14)
#define EXTI_SWIER_SWI14                      EXTI_SWIER_SWI14_Mask
#define EXTI_SWIER_SWI15_Pos                  ((uint32_t)15)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWI15_Mask                 (((uint32_t)0x01) << 15)
#define EXTI_SWIER_SWI15                      EXTI_SWIER_SWI15_Mask
#define EXTI_SWIER_SWI16_Pos                  ((uint32_t)16)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWI16_Mask                 (((uint32_t)0x01) << 16)
#define EXTI_SWIER_SWI16                      EXTI_SWIER_SWI16_Mask
#define EXTI_SWIER_SWI17_Pos                  ((uint32_t)17)                    /* Software interrupt on line x */
#define EXTI_SWIER_SWI17_Mask                 (((uint32_t)0x01) << 17)
#define EXTI_SWIER_SWI17                      EXTI_SWIER_SWI17_Mask

/************************************** EXTI->PR  ***************************************/
#define EXTI_PR_PIF19_Pos                     ((uint32_t)19)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PIF19_Mask                    (((uint32_t)0x01) << 19)
#define EXTI_PR_PIF19                         EXTI_PR_PIF19_Mask
#define EXTI_PR_PIF20_Pos                     ((uint32_t)20)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PIF20_Mask                    (((uint32_t)0x01) << 20)
#define EXTI_PR_PIF20                         EXTI_PR_PIF20_Mask
#define EXTI_PR_PIF21_Pos                     ((uint32_t)21)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PIF21_Mask                    (((uint32_t)0x01) << 21)
#define EXTI_PR_PIF21                         EXTI_PR_PIF21_Mask
#define EXTI_PR_PIF22_Pos                     ((uint32_t)22)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PIF22_Mask                    (((uint32_t)0x01) << 22)
#define EXTI_PR_PIF22                         EXTI_PR_PIF22_Mask
#define EXTI_PR_PIF0_Pos                      ((uint32_t)0)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PIF0_Mask                     (((uint32_t)0x01) << 0)
#define EXTI_PR_PIF0                          EXTI_PR_PIF0_Mask
#define EXTI_PR_PIF1_Pos                      ((uint32_t)1)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PIF1_Mask                     (((uint32_t)0x01) << 1)
#define EXTI_PR_PIF1                          EXTI_PR_PIF1_Mask
#define EXTI_PR_PIF2_Pos                      ((uint32_t)2)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PIF2_Mask                     (((uint32_t)0x01) << 2)
#define EXTI_PR_PIF2                          EXTI_PR_PIF2_Mask
#define EXTI_PR_PIF3_Pos                      ((uint32_t)3)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PIF3_Mask                     (((uint32_t)0x01) << 3)
#define EXTI_PR_PIF3                          EXTI_PR_PIF3_Mask
#define EXTI_PR_PIF4_Pos                      ((uint32_t)4)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PIF4_Mask                     (((uint32_t)0x01) << 4)
#define EXTI_PR_PIF4                          EXTI_PR_PIF4_Mask
#define EXTI_PR_PIF5_Pos                      ((uint32_t)5)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PIF5_Mask                     (((uint32_t)0x01) << 5)
#define EXTI_PR_PIF5                          EXTI_PR_PIF5_Mask
#define EXTI_PR_PIF6_Pos                      ((uint32_t)6)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PIF6_Mask                     (((uint32_t)0x01) << 6)
#define EXTI_PR_PIF6                          EXTI_PR_PIF6_Mask
#define EXTI_PR_PIF7_Pos                      ((uint32_t)7)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PIF7_Mask                     (((uint32_t)0x01) << 7)
#define EXTI_PR_PIF7                          EXTI_PR_PIF7_Mask
#define EXTI_PR_PIF8_Pos                      ((uint32_t)8)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PIF8_Mask                     (((uint32_t)0x01) << 8)
#define EXTI_PR_PIF8                          EXTI_PR_PIF8_Mask
#define EXTI_PR_PIF9_Pos                      ((uint32_t)9)                     /* Pending interrupt flag on line x */
#define EXTI_PR_PIF9_Mask                     (((uint32_t)0x01) << 9)
#define EXTI_PR_PIF9                          EXTI_PR_PIF9_Mask
#define EXTI_PR_PIF10_Pos                     ((uint32_t)10)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PIF10_Mask                    (((uint32_t)0x01) << 10)
#define EXTI_PR_PIF10                         EXTI_PR_PIF10_Mask
#define EXTI_PR_PIF11_Pos                     ((uint32_t)11)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PIF11_Mask                    (((uint32_t)0x01) << 11)
#define EXTI_PR_PIF11                         EXTI_PR_PIF11_Mask
#define EXTI_PR_PIF12_Pos                     ((uint32_t)12)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PIF12_Mask                    (((uint32_t)0x01) << 12)
#define EXTI_PR_PIF12                         EXTI_PR_PIF12_Mask
#define EXTI_PR_PIF13_Pos                     ((uint32_t)13)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PIF13_Mask                    (((uint32_t)0x01) << 13)
#define EXTI_PR_PIF13                         EXTI_PR_PIF13_Mask
#define EXTI_PR_PIF14_Pos                     ((uint32_t)14)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PIF14_Mask                    (((uint32_t)0x01) << 14)
#define EXTI_PR_PIF14                         EXTI_PR_PIF14_Mask
#define EXTI_PR_PIF15_Pos                     ((uint32_t)15)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PIF15_Mask                    (((uint32_t)0x01) << 15)
#define EXTI_PR_PIF15                         EXTI_PR_PIF15_Mask
#define EXTI_PR_PIF16_Pos                     ((uint32_t)16)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PIF16_Mask                    (((uint32_t)0x01) << 16)
#define EXTI_PR_PIF16                         EXTI_PR_PIF16_Mask
#define EXTI_PR_PIF17_Pos                     ((uint32_t)17)                    /* Pending interrupt flag on line x */
#define EXTI_PR_PIF17_Mask                    (((uint32_t)0x01) << 17)
#define EXTI_PR_PIF17                         EXTI_PR_PIF17_Mask

/*****************************************************************************************
*                                     Peripheral TIM                                     *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t CR1;                    /* CR1 */
    __IO uint32_t CR2;                    /* CR2 */
    __IO uint32_t SMCR;                   /* SMCR */
    __IO uint32_t DIER;                   /* DIER */
    __IO uint32_t SR;                     /* SR */
    __O  uint32_t EGR;                    /* EGR */
    union
    {
        __IO uint32_t CCMR1_Output;         /* CCMR1_Output */
        __IO uint32_t CCMR1_Input;          /* CCMR1_Input */
    };
    union
    {
        __IO uint32_t CCMR2_Output;         /* CCMR2_Output */
        __IO uint32_t CCMR2_Input;          /* CCMR2_Input */
    };
    __IO uint32_t CCER;                   /* CCER */
    __IO uint32_t CNT;                    /* CNT */
    __IO uint32_t PSC;                    /* PSC */
    __IO uint32_t ARR;                    /* ARR */
    __IO uint32_t RCR;                    /* RCR */
    __IO uint32_t CCR1;                   /* CCR1 */
    __IO uint32_t CCR2;                   /* CCR2 */
    __IO uint32_t CCR3;                   /* CCR3 */
    __IO uint32_t CCR4;                   /* CCR4 */
    __IO uint32_t BDTR;                   /* BDTR */
    __IO uint32_t DCR;                    /* DCR */
    __IO uint32_t DMAR;                   /* DMAR */
    __IO uint32_t OR;                     /* OR */
} TIM_TypeDef;

/************************************** TIM->CR1  ***************************************/
#define TIM_CR1_CC4_ADC_SEL_Pos               ((uint32_t)31)                    /* ADC trigger signal generation source */
#define TIM_CR1_CC4_ADC_SEL_Mask              (((uint32_t)0x01) << 31)
#define TIM_CR1_CC4_ADC_SEL                   TIM_CR1_CC4_ADC_SEL_Mask
#define TIM_CR1_CC3_ADC_SEL_Pos               ((uint32_t)30)                    /* ADC trigger signal generation source */
#define TIM_CR1_CC3_ADC_SEL_Mask              (((uint32_t)0x01) << 30)
#define TIM_CR1_CC3_ADC_SEL                   TIM_CR1_CC3_ADC_SEL_Mask
#define TIM_CR1_CC2_ADC_SEL_Pos               ((uint32_t)29)                    /* ADC trigger signal generation source */
#define TIM_CR1_CC2_ADC_SEL_Mask              (((uint32_t)0x01) << 29)
#define TIM_CR1_CC2_ADC_SEL                   TIM_CR1_CC2_ADC_SEL_Mask
#define TIM_CR1_CC1_ADC_SEL_Pos               ((uint32_t)28)                    /* ADC trigger signal generation source */
#define TIM_CR1_CC1_ADC_SEL_Mask              (((uint32_t)0x01) << 28)
#define TIM_CR1_CC1_ADC_SEL                   TIM_CR1_CC1_ADC_SEL_Mask
#define TIM_CR1_CKD_Pos                       ((uint32_t)8)                     /* Clock division factor */
#define TIM_CR1_CKD_Mask                      (((uint32_t)0x03) << 8)
#define TIM_CR1_CKD                           TIM_CR1_CKD_Mask
#define TIM_CR1_CKD_0                         (((uint32_t)0x1 << TIM_CR1_CKD_Pos))
#define TIM_CR1_CKD_1                         (((uint32_t)0x2 << TIM_CR1_CKD_Pos))
#define TIM_CR1_ARPE_Pos                      ((uint32_t)7)                     /* Auto-reload preload enable */
#define TIM_CR1_ARPE_Mask                     (((uint32_t)0x01) << 7)
#define TIM_CR1_ARPE                          TIM_CR1_ARPE_Mask
#define TIM_CR1_CMS_Pos                       ((uint32_t)5)                     /* Center-aligned mode selection */
#define TIM_CR1_CMS_Mask                      (((uint32_t)0x03) << 5)
#define TIM_CR1_CMS                           TIM_CR1_CMS_Mask
#define TIM_CR1_CMS_0                         (((uint32_t)0x1 << TIM_CR1_CMS_Pos))
#define TIM_CR1_CMS_1                         (((uint32_t)0x2 << TIM_CR1_CMS_Pos))
#define TIM_CR1_DIR_Pos                       ((uint32_t)4)                     /* Direction */
#define TIM_CR1_DIR_Mask                      (((uint32_t)0x01) << 4)
#define TIM_CR1_DIR                           TIM_CR1_DIR_Mask
#define TIM_CR1_OPM_Pos                       ((uint32_t)3)                     /* One pulse mode */
#define TIM_CR1_OPM_Mask                      (((uint32_t)0x01) << 3)
#define TIM_CR1_OPM                           TIM_CR1_OPM_Mask
#define TIM_CR1_URS_Pos                       ((uint32_t)2)                     /* Update request source */
#define TIM_CR1_URS_Mask                      (((uint32_t)0x01) << 2)
#define TIM_CR1_URS                           TIM_CR1_URS_Mask
#define TIM_CR1_UDIS_Pos                      ((uint32_t)1)                     /* Update disable */
#define TIM_CR1_UDIS_Mask                     (((uint32_t)0x01) << 1)
#define TIM_CR1_UDIS                          TIM_CR1_UDIS_Mask
#define TIM_CR1_CEN_Pos                       ((uint32_t)0)                     /* Counter enable */
#define TIM_CR1_CEN_Mask                      (((uint32_t)0x01) << 0)
#define TIM_CR1_CEN                           TIM_CR1_CEN_Mask

/************************************** TIM->CR2  ***************************************/
#define TIM_CR2_OIS4_Pos                      ((uint32_t)14)                    /* OC4 output */
#define TIM_CR2_OIS4_Mask                     (((uint32_t)0x01) << 14)
#define TIM_CR2_OIS4                          TIM_CR2_OIS4_Mask
#define TIM_CR2_OIS3N_Pos                     ((uint32_t)13)                    /* OC3N output */
#define TIM_CR2_OIS3N_Mask                    (((uint32_t)0x01) << 13)
#define TIM_CR2_OIS3N                         TIM_CR2_OIS3N_Mask
#define TIM_CR2_OIS3_Pos                      ((uint32_t)12)                    /* OC3 output */
#define TIM_CR2_OIS3_Mask                     (((uint32_t)0x01) << 12)
#define TIM_CR2_OIS3                          TIM_CR2_OIS3_Mask
#define TIM_CR2_OIS2N_Pos                     ((uint32_t)11)                    /* OC2N output */
#define TIM_CR2_OIS2N_Mask                    (((uint32_t)0x01) << 11)
#define TIM_CR2_OIS2N                         TIM_CR2_OIS2N_Mask
#define TIM_CR2_OIS2_Pos                      ((uint32_t)10)                    /* OC3 output */
#define TIM_CR2_OIS2_Mask                     (((uint32_t)0x01) << 10)
#define TIM_CR2_OIS2                          TIM_CR2_OIS2_Mask
#define TIM_CR2_OIS1N_Pos                     ((uint32_t)9)                     /* OC1N output */
#define TIM_CR2_OIS1N_Mask                    (((uint32_t)0x01) << 9)
#define TIM_CR2_OIS1N                         TIM_CR2_OIS1N_Mask
#define TIM_CR2_OIS1_Pos                      ((uint32_t)8)                     /* OC1 output */
#define TIM_CR2_OIS1_Mask                     (((uint32_t)0x01) << 8)
#define TIM_CR2_OIS1                          TIM_CR2_OIS1_Mask
#define TIM_CR2_TI1S_Pos                      ((uint32_t)7)                     /* TI1 selection */
#define TIM_CR2_TI1S_Mask                     (((uint32_t)0x01) << 7)
#define TIM_CR2_TI1S                          TIM_CR2_TI1S_Mask
#define TIM_CR2_MMS_Pos                       ((uint32_t)4)                     /* Master mode selection */
#define TIM_CR2_MMS_Mask                      (((uint32_t)0x07) << 4)
#define TIM_CR2_MMS                           TIM_CR2_MMS_Mask
#define TIM_CR2_MMS_0                         (((uint32_t)0x1 << TIM_CR2_MMS_Pos))
#define TIM_CR2_MMS_1                         (((uint32_t)0x2 << TIM_CR2_MMS_Pos))
#define TIM_CR2_MMS_2                         (((uint32_t)0x4 << TIM_CR2_MMS_Pos))
#define TIM_CR2_CCDS_Pos                      ((uint32_t)3)                     /* Capture/Compare DMA selection */
#define TIM_CR2_CCDS_Mask                     (((uint32_t)0x01) << 3)
#define TIM_CR2_CCDS                          TIM_CR2_CCDS_Mask
#define TIM_CR2_CCUS_Pos                      ((uint32_t)2)                     /* Capture/Compare control update selection */
#define TIM_CR2_CCUS_Mask                     (((uint32_t)0x01) << 2)
#define TIM_CR2_CCUS                          TIM_CR2_CCUS_Mask
#define TIM_CR2_CCPC_Pos                      ((uint32_t)0)                     /* Capture/Compare preloaded control */
#define TIM_CR2_CCPC_Mask                     (((uint32_t)0x01) << 0)
#define TIM_CR2_CCPC                          TIM_CR2_CCPC_Mask

/************************************* TIM->SMCR  ***************************************/
#define TIM_SMCR_TS_H_Pos                     ((uint32_t)19)                    /* Tigger selection */
#define TIM_SMCR_TS_H_Mask                    (((uint32_t)0x07) << 19)
#define TIM_SMCR_TS_H                         TIM_SMCR_TS_H_Mask
#define TIM_SMCR_TS_H_0                       (((uint32_t)0x1 << TIM_SMCR_TS_H_Pos))
#define TIM_SMCR_TS_H_1                       (((uint32_t)0x2 << TIM_SMCR_TS_H_Pos))
#define TIM_SMCR_TS_H_2                       (((uint32_t)0x4 << TIM_SMCR_TS_H_Pos))
#define TIM_SMCR_ETP_Pos                      ((uint32_t)15)                    /* External trigger polarity */
#define TIM_SMCR_ETP_Mask                     (((uint32_t)0x01) << 15)
#define TIM_SMCR_ETP                          TIM_SMCR_ETP_Mask
#define TIM_SMCR_ECE_Pos                      ((uint32_t)14)                    /* External clock enable */
#define TIM_SMCR_ECE_Mask                     (((uint32_t)0x01) << 14)
#define TIM_SMCR_ECE                          TIM_SMCR_ECE_Mask
#define TIM_SMCR_ETPS_Pos                     ((uint32_t)12)                    /* External trigger prescaler */
#define TIM_SMCR_ETPS_Mask                    (((uint32_t)0x03) << 12)
#define TIM_SMCR_ETPS                         TIM_SMCR_ETPS_Mask
#define TIM_SMCR_ETPS_0                       (((uint32_t)0x1 << TIM_SMCR_ETPS_Pos))
#define TIM_SMCR_ETPS_1                       (((uint32_t)0x2 << TIM_SMCR_ETPS_Pos))
#define TIM_SMCR_ETF_Pos                      ((uint32_t)8)                     /* External trigger filter */
#define TIM_SMCR_ETF_Mask                     (((uint32_t)0x0F) << 8)
#define TIM_SMCR_ETF                          TIM_SMCR_ETF_Mask
#define TIM_SMCR_ETF_0                        (((uint32_t)0x1 << TIM_SMCR_ETF_Pos))
#define TIM_SMCR_ETF_1                        (((uint32_t)0x2 << TIM_SMCR_ETF_Pos))
#define TIM_SMCR_ETF_2                        (((uint32_t)0x4 << TIM_SMCR_ETF_Pos))
#define TIM_SMCR_ETF_3                        (((uint32_t)0x8 << TIM_SMCR_ETF_Pos))
#define TIM_SMCR_MSM_Pos                      ((uint32_t)7)                     /* Master/slave mode */
#define TIM_SMCR_MSM_Mask                     (((uint32_t)0x01) << 7)
#define TIM_SMCR_MSM                          TIM_SMCR_MSM_Mask
#define TIM_SMCR_TS_L_Pos                     ((uint32_t)4)                     /* Trigger selection */
#define TIM_SMCR_TS_L_Mask                    (((uint32_t)0x07) << 4)
#define TIM_SMCR_TS_L                         TIM_SMCR_TS_L_Mask
#define TIM_SMCR_TS_L_0                       (((uint32_t)0x1 << TIM_SMCR_TS_L_Pos))
#define TIM_SMCR_TS_L_1                       (((uint32_t)0x2 << TIM_SMCR_TS_L_Pos))
#define TIM_SMCR_TS_L_2                       (((uint32_t)0x4 << TIM_SMCR_TS_L_Pos))
#define TIM_SMCR_OCCS_Pos                     ((uint32_t)3)                     /* OCREF clear selection */
#define TIM_SMCR_OCCS_Mask                    (((uint32_t)0x01) << 3)
#define TIM_SMCR_OCCS                         TIM_SMCR_OCCS_Mask
#define TIM_SMCR_SMS_Pos                      ((uint32_t)0)                     /* Slave mode selection */
#define TIM_SMCR_SMS_Mask                     (((uint32_t)0x07) << 0)
#define TIM_SMCR_SMS                          TIM_SMCR_SMS_Mask
#define TIM_SMCR_SMS_0                        (((uint32_t)0x1))
#define TIM_SMCR_SMS_1                        (((uint32_t)0x2))
#define TIM_SMCR_SMS_2                        (((uint32_t)0x4))
#define TIM_SMCR_TS_Pos                       ((uint32_t)4)                     /* Tigger selection */
#define TIM_SMCR_TS_Mask                      (((uint32_t)0x07) << 4)
#define TIM_SMCR_TS                           TIM_SMCR_TS_Mask
#define TIM_SMCR_TS_0                         (((uint32_t)0x1 << TIM_SMCR_TS_Pos))
#define TIM_SMCR_TS_1                         (((uint32_t)0x2 << TIM_SMCR_TS_Pos))
#define TIM_SMCR_TS_2                         (((uint32_t)0x4 << TIM_SMCR_TS_Pos))

/************************************* TIM->DIER  ***************************************/
#define TIM_DIER_TDE_Pos                      ((uint32_t)14)                    /* Trigger DMA request enable */
#define TIM_DIER_TDE_Mask                     (((uint32_t)0x01) << 14)
#define TIM_DIER_TDE                          TIM_DIER_TDE_Mask
#define TIM_DIER_COMDE_Pos                    ((uint32_t)13)                    /* COM DMA request enable */
#define TIM_DIER_COMDE_Mask                   (((uint32_t)0x01) << 13)
#define TIM_DIER_COMDE                        TIM_DIER_COMDE_Mask
#define TIM_DIER_CC4DE_Pos                    ((uint32_t)12)                    /* Capture/Compare 4 DMA request enable */
#define TIM_DIER_CC4DE_Mask                   (((uint32_t)0x01) << 12)
#define TIM_DIER_CC4DE                        TIM_DIER_CC4DE_Mask
#define TIM_DIER_CC3DE_Pos                    ((uint32_t)11)                    /* Capture/Compare 3 DMA request enable */
#define TIM_DIER_CC3DE_Mask                   (((uint32_t)0x01) << 11)
#define TIM_DIER_CC3DE                        TIM_DIER_CC3DE_Mask
#define TIM_DIER_CC2DE_Pos                    ((uint32_t)10)                    /* Capture/Compare 2 DMA request enable */
#define TIM_DIER_CC2DE_Mask                   (((uint32_t)0x01) << 10)
#define TIM_DIER_CC2DE                        TIM_DIER_CC2DE_Mask
#define TIM_DIER_CC1DE_Pos                    ((uint32_t)9)                     /* Capture/Compare 1 DMA request enable */
#define TIM_DIER_CC1DE_Mask                   (((uint32_t)0x01) << 9)
#define TIM_DIER_CC1DE                        TIM_DIER_CC1DE_Mask
#define TIM_DIER_UDE_Pos                      ((uint32_t)8)                     /* Update DMA request enable */
#define TIM_DIER_UDE_Mask                     (((uint32_t)0x01) << 8)
#define TIM_DIER_UDE                          TIM_DIER_UDE_Mask
#define TIM_DIER_BIE_Pos                      ((uint32_t)7)                     /* Break interrupt enable */
#define TIM_DIER_BIE_Mask                     (((uint32_t)0x01) << 7)
#define TIM_DIER_BIE                          TIM_DIER_BIE_Mask
#define TIM_DIER_TIE_Pos                      ((uint32_t)6)                     /* Trigger interrupt enable */
#define TIM_DIER_TIE_Mask                     (((uint32_t)0x01) << 6)
#define TIM_DIER_TIE                          TIM_DIER_TIE_Mask
#define TIM_DIER_COMIE_Pos                    ((uint32_t)5)                     /* COM interrupt enable */
#define TIM_DIER_COMIE_Mask                   (((uint32_t)0x01) << 5)
#define TIM_DIER_COMIE                        TIM_DIER_COMIE_Mask
#define TIM_DIER_CC4IE_Pos                    ((uint32_t)4)                     /* Capture/Compare 4 interrupt enable */
#define TIM_DIER_CC4IE_Mask                   (((uint32_t)0x01) << 4)
#define TIM_DIER_CC4IE                        TIM_DIER_CC4IE_Mask
#define TIM_DIER_CC3IE_Pos                    ((uint32_t)3)                     /* Capture/Compare 3 interrupt enable */
#define TIM_DIER_CC3IE_Mask                   (((uint32_t)0x01) << 3)
#define TIM_DIER_CC3IE                        TIM_DIER_CC3IE_Mask
#define TIM_DIER_CC2IE_Pos                    ((uint32_t)2)                     /* Capture/Compare 2 interrupt enable */
#define TIM_DIER_CC2IE_Mask                   (((uint32_t)0x01) << 2)
#define TIM_DIER_CC2IE                        TIM_DIER_CC2IE_Mask
#define TIM_DIER_CC1IE_Pos                    ((uint32_t)1)                     /* Capture/Compare 1 interrupt enable */
#define TIM_DIER_CC1IE_Mask                   (((uint32_t)0x01) << 1)
#define TIM_DIER_CC1IE                        TIM_DIER_CC1IE_Mask
#define TIM_DIER_UIE_Pos                      ((uint32_t)0)                     /* Update interrupt enable */
#define TIM_DIER_UIE_Mask                     (((uint32_t)0x01) << 0)
#define TIM_DIER_UIE                          TIM_DIER_UIE_Mask

/************************************** TIM->SR  ****************************************/
#define TIM_SR_CC4OF_Pos                      ((uint32_t)12)                    /* Capture/Compare 4 overcapture flag */
#define TIM_SR_CC4OF_Mask                     (((uint32_t)0x01) << 12)
#define TIM_SR_CC4OF                          TIM_SR_CC4OF_Mask
#define TIM_SR_CC3OF_Pos                      ((uint32_t)11)                    /* Capture/Compare 3 overcapture flag */
#define TIM_SR_CC3OF_Mask                     (((uint32_t)0x01) << 11)
#define TIM_SR_CC3OF                          TIM_SR_CC3OF_Mask
#define TIM_SR_CC2OF_Pos                      ((uint32_t)10)                    /* Capture/Compare 2 overcapture flag */
#define TIM_SR_CC2OF_Mask                     (((uint32_t)0x01) << 10)
#define TIM_SR_CC2OF                          TIM_SR_CC2OF_Mask
#define TIM_SR_CC1OF_Pos                      ((uint32_t)9)                     /* Capture/Compare 1 overcapture flag */
#define TIM_SR_CC1OF_Mask                     (((uint32_t)0x01) << 9)
#define TIM_SR_CC1OF                          TIM_SR_CC1OF_Mask
#define TIM_SR_BIF_Pos                        ((uint32_t)7)                     /* Break interrupt flag */
#define TIM_SR_BIF_Mask                       (((uint32_t)0x01) << 7)
#define TIM_SR_BIF                            TIM_SR_BIF_Mask
#define TIM_SR_TIF_Pos                        ((uint32_t)6)                     /* Trigger interrupt flag */
#define TIM_SR_TIF_Mask                       (((uint32_t)0x01) << 6)
#define TIM_SR_TIF                            TIM_SR_TIF_Mask
#define TIM_SR_COMIF_Pos                      ((uint32_t)5)                     /* COM interrupt flag */
#define TIM_SR_COMIF_Mask                     (((uint32_t)0x01) << 5)
#define TIM_SR_COMIF                          TIM_SR_COMIF_Mask
#define TIM_SR_CC4IF_Pos                      ((uint32_t)4)                     /* Capture/Compare 4 interrupt flag */
#define TIM_SR_CC4IF_Mask                     (((uint32_t)0x01) << 4)
#define TIM_SR_CC4IF                          TIM_SR_CC4IF_Mask
#define TIM_SR_CC3IF_Pos                      ((uint32_t)3)                     /* Capture/Compare 3 interrupt flag */
#define TIM_SR_CC3IF_Mask                     (((uint32_t)0x01) << 3)
#define TIM_SR_CC3IF                          TIM_SR_CC3IF_Mask
#define TIM_SR_CC2IF_Pos                      ((uint32_t)2)                     /* Capture/Compare 2 interrupt flag */
#define TIM_SR_CC2IF_Mask                     (((uint32_t)0x01) << 2)
#define TIM_SR_CC2IF                          TIM_SR_CC2IF_Mask
#define TIM_SR_CC1IF_Pos                      ((uint32_t)1)                     /* Capture/Compare 1 interrupt flag */
#define TIM_SR_CC1IF_Mask                     (((uint32_t)0x01) << 1)
#define TIM_SR_CC1IF                          TIM_SR_CC1IF_Mask
#define TIM_SR_UIF_Pos                        ((uint32_t)0)                     /* Update interrupt flag */
#define TIM_SR_UIF_Mask                       (((uint32_t)0x01) << 0)
#define TIM_SR_UIF                            TIM_SR_UIF_Mask

/************************************** TIM->EGR  ***************************************/
#define TIM_EGR_BG_Pos                        ((uint32_t)7)                     /* Break generation */
#define TIM_EGR_BG_Mask                       (((uint32_t)0x01) << 7)
#define TIM_EGR_BG                            TIM_EGR_BG_Mask
#define TIM_EGR_TG_Pos                        ((uint32_t)6)                     /* Trigger generation */
#define TIM_EGR_TG_Mask                       (((uint32_t)0x01) << 6)
#define TIM_EGR_TG                            TIM_EGR_TG_Mask
#define TIM_EGR_COMG_Pos                      ((uint32_t)5)                     /* Capture/Compare control update generation */
#define TIM_EGR_COMG_Mask                     (((uint32_t)0x01) << 5)
#define TIM_EGR_COMG                          TIM_EGR_COMG_Mask
#define TIM_EGR_CC4G_Pos                      ((uint32_t)4)                     /* Capture/Compare 4 generation */
#define TIM_EGR_CC4G_Mask                     (((uint32_t)0x01) << 4)
#define TIM_EGR_CC4G                          TIM_EGR_CC4G_Mask
#define TIM_EGR_CC3G_Pos                      ((uint32_t)3)                     /* Capture/Compare 3 generation */
#define TIM_EGR_CC3G_Mask                     (((uint32_t)0x01) << 3)
#define TIM_EGR_CC3G                          TIM_EGR_CC3G_Mask
#define TIM_EGR_CC2G_Pos                      ((uint32_t)2)                     /* Capture/Compare 2 generation */
#define TIM_EGR_CC2G_Mask                     (((uint32_t)0x01) << 2)
#define TIM_EGR_CC2G                          TIM_EGR_CC2G_Mask
#define TIM_EGR_CC1G_Pos                      ((uint32_t)1)                     /* Capture/Compare 1 generation */
#define TIM_EGR_CC1G_Mask                     (((uint32_t)0x01) << 1)
#define TIM_EGR_CC1G                          TIM_EGR_CC1G_Mask
#define TIM_EGR_UG_Pos                        ((uint32_t)0)                     /* Update generation */
#define TIM_EGR_UG_Mask                       (((uint32_t)0x01) << 0)
#define TIM_EGR_UG                            TIM_EGR_UG_Mask

/********************************* TIM->CCMR1_Output  ***********************************/
#define TIM_CCMR1_Output_OC2CE_Pos            ((uint32_t)15)                    /* Output Compare 2 clear enable */
#define TIM_CCMR1_Output_OC2CE_Mask           (((uint32_t)0x01) << 15)
#define TIM_CCMR1_Output_OC2CE                TIM_CCMR1_Output_OC2CE_Mask
#define TIM_CCMR1_Output_OC2M_Pos             ((uint32_t)12)                    /* Output Compare 2 mode */
#define TIM_CCMR1_Output_OC2M_Mask            (((uint32_t)0x07) << 12)
#define TIM_CCMR1_Output_OC2M                 TIM_CCMR1_Output_OC2M_Mask
#define TIM_CCMR1_Output_OC2M_0               (((uint32_t)0x1 << TIM_CCMR1_Output_OC2M_Pos))
#define TIM_CCMR1_Output_OC2M_1               (((uint32_t)0x2 << TIM_CCMR1_Output_OC2M_Pos))
#define TIM_CCMR1_Output_OC2M_2               (((uint32_t)0x4 << TIM_CCMR1_Output_OC2M_Pos))
#define TIM_CCMR1_Output_OC2PE_Pos            ((uint32_t)11)                    /* Output Compare 2 preload enable */
#define TIM_CCMR1_Output_OC2PE_Mask           (((uint32_t)0x01) << 11)
#define TIM_CCMR1_Output_OC2PE                TIM_CCMR1_Output_OC2PE_Mask
#define TIM_CCMR1_Output_OC2FE_Pos            ((uint32_t)10)                    /* Output Compare 2 fast enable */
#define TIM_CCMR1_Output_OC2FE_Mask           (((uint32_t)0x01) << 10)
#define TIM_CCMR1_Output_OC2FE                TIM_CCMR1_Output_OC2FE_Mask
#define TIM_CCMR1_Output_CC2S_Pos             ((uint32_t)8)                     /* Capture/Compare 2 selection */
#define TIM_CCMR1_Output_CC2S_Mask            (((uint32_t)0x03) << 8)
#define TIM_CCMR1_Output_CC2S                 TIM_CCMR1_Output_CC2S_Mask
#define TIM_CCMR1_Output_CC2S_0               (((uint32_t)0x1 << TIM_CCMR1_Output_CC2S_Pos))
#define TIM_CCMR1_Output_CC2S_1               (((uint32_t)0x2 << TIM_CCMR1_Output_CC2S_Pos))
#define TIM_CCMR1_Output_OC1CE_Pos            ((uint32_t)7)                     /* Output Compare 1 clear enable */
#define TIM_CCMR1_Output_OC1CE_Mask           (((uint32_t)0x01) << 7)
#define TIM_CCMR1_Output_OC1CE                TIM_CCMR1_Output_OC1CE_Mask
#define TIM_CCMR1_Output_OC1M_Pos             ((uint32_t)4)                     /* Output Compare 1 mode */
#define TIM_CCMR1_Output_OC1M_Mask            (((uint32_t)0x07) << 4)
#define TIM_CCMR1_Output_OC1M                 TIM_CCMR1_Output_OC1M_Mask
#define TIM_CCMR1_Output_OC1M_0               (((uint32_t)0x1 << TIM_CCMR1_Output_OC1M_Pos))
#define TIM_CCMR1_Output_OC1M_1               (((uint32_t)0x2 << TIM_CCMR1_Output_OC1M_Pos))
#define TIM_CCMR1_Output_OC1M_2               (((uint32_t)0x4 << TIM_CCMR1_Output_OC1M_Pos))
#define TIM_CCMR1_Output_OC1PE_Pos            ((uint32_t)3)                     /* Output Compare 1 preload enable */
#define TIM_CCMR1_Output_OC1PE_Mask           (((uint32_t)0x01) << 3)
#define TIM_CCMR1_Output_OC1PE                TIM_CCMR1_Output_OC1PE_Mask
#define TIM_CCMR1_Output_OC1FE_Pos            ((uint32_t)2)                     /* Output Compare 1 fast enable */
#define TIM_CCMR1_Output_OC1FE_Mask           (((uint32_t)0x01) << 2)
#define TIM_CCMR1_Output_OC1FE                TIM_CCMR1_Output_OC1FE_Mask
#define TIM_CCMR1_Output_CC1S_Pos             ((uint32_t)0)                     /* Capture/Compare 1 selection */
#define TIM_CCMR1_Output_CC1S_Mask            (((uint32_t)0x03) << 0)
#define TIM_CCMR1_Output_CC1S                 TIM_CCMR1_Output_CC1S_Mask
#define TIM_CCMR1_Output_CC1S_0               (((uint32_t)0x1))
#define TIM_CCMR1_Output_CC1S_1               (((uint32_t)0x2))

/********************************** TIM->CCMR1_Input  ***********************************/
#define TIM_CCMR1_Input_IC2F_Pos              ((uint32_t)12)                    /* Input capture 2 filter */
#define TIM_CCMR1_Input_IC2F_Mask             (((uint32_t)0x0F) << 12)
#define TIM_CCMR1_Input_IC2F                  TIM_CCMR1_Input_IC2F_Mask
#define TIM_CCMR1_Input_IC2F_0                (((uint32_t)0x1 << TIM_CCMR1_Input_IC2F_Pos))
#define TIM_CCMR1_Input_IC2F_1                (((uint32_t)0x2 << TIM_CCMR1_Input_IC2F_Pos))
#define TIM_CCMR1_Input_IC2F_2                (((uint32_t)0x4 << TIM_CCMR1_Input_IC2F_Pos))
#define TIM_CCMR1_Input_IC2F_3                (((uint32_t)0x8 << TIM_CCMR1_Input_IC2F_Pos))
#define TIM_CCMR1_Input_IC2PSC_Pos            ((uint32_t)10)                    /* Input capture 2 prescaler */
#define TIM_CCMR1_Input_IC2PSC_Mask           (((uint32_t)0x03) << 10)
#define TIM_CCMR1_Input_IC2PSC                TIM_CCMR1_Input_IC2PSC_Mask
#define TIM_CCMR1_Input_IC2PSC_0              (((uint32_t)0x1 << TIM_CCMR1_Input_IC2PSC_Pos))
#define TIM_CCMR1_Input_IC2PSC_1              (((uint32_t)0x2 << TIM_CCMR1_Input_IC2PSC_Pos))
#define TIM_CCMR1_Input_CC2S_Pos              ((uint32_t)8)                     /* Capture/Compare 2 selection */
#define TIM_CCMR1_Input_CC2S_Mask             (((uint32_t)0x03) << 8)
#define TIM_CCMR1_Input_CC2S                  TIM_CCMR1_Input_CC2S_Mask
#define TIM_CCMR1_Input_CC2S_0                (((uint32_t)0x1 << TIM_CCMR1_Input_CC2S_Pos))
#define TIM_CCMR1_Input_CC2S_1                (((uint32_t)0x2 << TIM_CCMR1_Input_CC2S_Pos))
#define TIM_CCMR1_Input_IC1F_Pos              ((uint32_t)4)                     /* Input capture 1 filter */
#define TIM_CCMR1_Input_IC1F_Mask             (((uint32_t)0x0F) << 4)
#define TIM_CCMR1_Input_IC1F                  TIM_CCMR1_Input_IC1F_Mask
#define TIM_CCMR1_Input_IC1F_0                (((uint32_t)0x1 << TIM_CCMR1_Input_IC1F_Pos))
#define TIM_CCMR1_Input_IC1F_1                (((uint32_t)0x2 << TIM_CCMR1_Input_IC1F_Pos))
#define TIM_CCMR1_Input_IC1F_2                (((uint32_t)0x4 << TIM_CCMR1_Input_IC1F_Pos))
#define TIM_CCMR1_Input_IC1F_3                (((uint32_t)0x8 << TIM_CCMR1_Input_IC1F_Pos))
#define TIM_CCMR1_Input_IC1PSC_Pos            ((uint32_t)2)                     /* Input capture 1 prescaler */
#define TIM_CCMR1_Input_IC1PSC_Mask           (((uint32_t)0x03) << 2)
#define TIM_CCMR1_Input_IC1PSC                TIM_CCMR1_Input_IC1PSC_Mask
#define TIM_CCMR1_Input_IC1PSC_0              (((uint32_t)0x1 << TIM_CCMR1_Input_IC1PSC_Pos))
#define TIM_CCMR1_Input_IC1PSC_1              (((uint32_t)0x2 << TIM_CCMR1_Input_IC1PSC_Pos))
#define TIM_CCMR1_Input_CC1S_Pos              ((uint32_t)0)                     /* Capture/Compare 1 Selection */
#define TIM_CCMR1_Input_CC1S_Mask             (((uint32_t)0x03) << 0)
#define TIM_CCMR1_Input_CC1S                  TIM_CCMR1_Input_CC1S_Mask
#define TIM_CCMR1_Input_CC1S_0                (((uint32_t)0x1))
#define TIM_CCMR1_Input_CC1S_1                (((uint32_t)0x2))

/********************************* TIM->CCMR2_Output  ***********************************/
#define TIM_CCMR2_Output_OC4CE_Pos            ((uint32_t)15)                    /* Output compare 4 clear enable */
#define TIM_CCMR2_Output_OC4CE_Mask           (((uint32_t)0x01) << 15)
#define TIM_CCMR2_Output_OC4CE                TIM_CCMR2_Output_OC4CE_Mask
#define TIM_CCMR2_Output_OC4M_Pos             ((uint32_t)12)                    /* Output compare 4 mode */
#define TIM_CCMR2_Output_OC4M_Mask            (((uint32_t)0x07) << 12)
#define TIM_CCMR2_Output_OC4M                 TIM_CCMR2_Output_OC4M_Mask
#define TIM_CCMR2_Output_OC4M_0               (((uint32_t)0x1 << TIM_CCMR2_Output_OC4M_Pos))
#define TIM_CCMR2_Output_OC4M_1               (((uint32_t)0x2 << TIM_CCMR2_Output_OC4M_Pos))
#define TIM_CCMR2_Output_OC4M_2               (((uint32_t)0x4 << TIM_CCMR2_Output_OC4M_Pos))
#define TIM_CCMR2_Output_OC4PE_Pos            ((uint32_t)11)                    /* Output compare 4 preload enable */
#define TIM_CCMR2_Output_OC4PE_Mask           (((uint32_t)0x01) << 11)
#define TIM_CCMR2_Output_OC4PE                TIM_CCMR2_Output_OC4PE_Mask
#define TIM_CCMR2_Output_OC4FE_Pos            ((uint32_t)10)                    /* Output compare 4 fast enable */
#define TIM_CCMR2_Output_OC4FE_Mask           (((uint32_t)0x01) << 10)
#define TIM_CCMR2_Output_OC4FE                TIM_CCMR2_Output_OC4FE_Mask
#define TIM_CCMR2_Output_CC4S_Pos             ((uint32_t)8)                     /* Capture/Compare 4 selection */
#define TIM_CCMR2_Output_CC4S_Mask            (((uint32_t)0x03) << 8)
#define TIM_CCMR2_Output_CC4S                 TIM_CCMR2_Output_CC4S_Mask
#define TIM_CCMR2_Output_CC4S_0               (((uint32_t)0x1 << TIM_CCMR2_Output_CC4S_Pos))
#define TIM_CCMR2_Output_CC4S_1               (((uint32_t)0x2 << TIM_CCMR2_Output_CC4S_Pos))
#define TIM_CCMR2_Output_OC3CE_Pos            ((uint32_t)7)                     /* Output compare 3 clear enable */
#define TIM_CCMR2_Output_OC3CE_Mask           (((uint32_t)0x01) << 7)
#define TIM_CCMR2_Output_OC3CE                TIM_CCMR2_Output_OC3CE_Mask
#define TIM_CCMR2_Output_OC3M_Pos             ((uint32_t)4)                     /* Output compare 3 mode */
#define TIM_CCMR2_Output_OC3M_Mask            (((uint32_t)0x07) << 4)
#define TIM_CCMR2_Output_OC3M                 TIM_CCMR2_Output_OC3M_Mask
#define TIM_CCMR2_Output_OC3M_0               (((uint32_t)0x1 << TIM_CCMR2_Output_OC3M_Pos))
#define TIM_CCMR2_Output_OC3M_1               (((uint32_t)0x2 << TIM_CCMR2_Output_OC3M_Pos))
#define TIM_CCMR2_Output_OC3M_2               (((uint32_t)0x4 << TIM_CCMR2_Output_OC3M_Pos))
#define TIM_CCMR2_Output_OC3PE_Pos            ((uint32_t)3)                     /* Output compare 3 preload enable */
#define TIM_CCMR2_Output_OC3PE_Mask           (((uint32_t)0x01) << 3)
#define TIM_CCMR2_Output_OC3PE                TIM_CCMR2_Output_OC3PE_Mask
#define TIM_CCMR2_Output_OC3FE_Pos            ((uint32_t)2)                     /* Output compare 3 fast enable */
#define TIM_CCMR2_Output_OC3FE_Mask           (((uint32_t)0x01) << 2)
#define TIM_CCMR2_Output_OC3FE                TIM_CCMR2_Output_OC3FE_Mask
#define TIM_CCMR2_Output_CC3S_Pos             ((uint32_t)0)                     /* Capture/Compare 3 selection */
#define TIM_CCMR2_Output_CC3S_Mask            (((uint32_t)0x03) << 0)
#define TIM_CCMR2_Output_CC3S                 TIM_CCMR2_Output_CC3S_Mask
#define TIM_CCMR2_Output_CC3S_0               (((uint32_t)0x1))
#define TIM_CCMR2_Output_CC3S_1               (((uint32_t)0x2))

/********************************** TIM->CCMR2_Input  ***********************************/
#define TIM_CCMR2_Input_IC4F_Pos              ((uint32_t)12)                    /* Input capture 4 filter */
#define TIM_CCMR2_Input_IC4F_Mask             (((uint32_t)0x0F) << 12)
#define TIM_CCMR2_Input_IC4F                  TIM_CCMR2_Input_IC4F_Mask
#define TIM_CCMR2_Input_IC4F_0                (((uint32_t)0x1 << TIM_CCMR2_Input_IC4F_Pos))
#define TIM_CCMR2_Input_IC4F_1                (((uint32_t)0x2 << TIM_CCMR2_Input_IC4F_Pos))
#define TIM_CCMR2_Input_IC4F_2                (((uint32_t)0x4 << TIM_CCMR2_Input_IC4F_Pos))
#define TIM_CCMR2_Input_IC4F_3                (((uint32_t)0x8 << TIM_CCMR2_Input_IC4F_Pos))
#define TIM_CCMR2_Input_IC4PSC_Pos            ((uint32_t)10)                    /* Input capture 4 prescaler */
#define TIM_CCMR2_Input_IC4PSC_Mask           (((uint32_t)0x03) << 10)
#define TIM_CCMR2_Input_IC4PSC                TIM_CCMR2_Input_IC4PSC_Mask
#define TIM_CCMR2_Input_IC4PSC_0              (((uint32_t)0x1 << TIM_CCMR2_Input_IC4PSC_Pos))
#define TIM_CCMR2_Input_IC4PSC_1              (((uint32_t)0x2 << TIM_CCMR2_Input_IC4PSC_Pos))
#define TIM_CCMR2_Input_CC4S_Pos              ((uint32_t)8)                     /* Capture/Compare 4 selection */
#define TIM_CCMR2_Input_CC4S_Mask             (((uint32_t)0x03) << 8)
#define TIM_CCMR2_Input_CC4S                  TIM_CCMR2_Input_CC4S_Mask
#define TIM_CCMR2_Input_CC4S_0                (((uint32_t)0x1 << TIM_CCMR2_Input_CC4S_Pos))
#define TIM_CCMR2_Input_CC4S_1                (((uint32_t)0x2 << TIM_CCMR2_Input_CC4S_Pos))
#define TIM_CCMR2_Input_IC3F_Pos              ((uint32_t)4)                     /* Input capture 3 filter */
#define TIM_CCMR2_Input_IC3F_Mask             (((uint32_t)0x0F) << 4)
#define TIM_CCMR2_Input_IC3F                  TIM_CCMR2_Input_IC3F_Mask
#define TIM_CCMR2_Input_IC3F_0                (((uint32_t)0x1 << TIM_CCMR2_Input_IC3F_Pos))
#define TIM_CCMR2_Input_IC3F_1                (((uint32_t)0x2 << TIM_CCMR2_Input_IC3F_Pos))
#define TIM_CCMR2_Input_IC3F_2                (((uint32_t)0x4 << TIM_CCMR2_Input_IC3F_Pos))
#define TIM_CCMR2_Input_IC3F_3                (((uint32_t)0x8 << TIM_CCMR2_Input_IC3F_Pos))
#define TIM_CCMR2_Input_IC3PSC_Pos            ((uint32_t)2)                     /* Input capture 3 prescaler */
#define TIM_CCMR2_Input_IC3PSC_Mask           (((uint32_t)0x03) << 2)
#define TIM_CCMR2_Input_IC3PSC                TIM_CCMR2_Input_IC3PSC_Mask
#define TIM_CCMR2_Input_IC3PSC_0              (((uint32_t)0x1 << TIM_CCMR2_Input_IC3PSC_Pos))
#define TIM_CCMR2_Input_IC3PSC_1              (((uint32_t)0x2 << TIM_CCMR2_Input_IC3PSC_Pos))
#define TIM_CCMR2_Input_CC3S_Pos              ((uint32_t)0)                     /* Capture/Compare 3 selection */
#define TIM_CCMR2_Input_CC3S_Mask             (((uint32_t)0x03) << 0)
#define TIM_CCMR2_Input_CC3S                  TIM_CCMR2_Input_CC3S_Mask
#define TIM_CCMR2_Input_CC3S_0                (((uint32_t)0x1))
#define TIM_CCMR2_Input_CC3S_1                (((uint32_t)0x2))

/************************************* TIM->CCER  ***************************************/
#define TIM_CCER_CC4P_Pos                     ((uint32_t)13)                    /* Capture/Compare 4 output polarity */
#define TIM_CCER_CC4P_Mask                    (((uint32_t)0x01) << 13)
#define TIM_CCER_CC4P                         TIM_CCER_CC4P_Mask
#define TIM_CCER_CC4E_Pos                     ((uint32_t)12)                    /* Capture/Compare 4 output enable */
#define TIM_CCER_CC4E_Mask                    (((uint32_t)0x01) << 12)
#define TIM_CCER_CC4E                         TIM_CCER_CC4E_Mask
#define TIM_CCER_CC3NP_Pos                    ((uint32_t)11)                    /* Capture/Compare 3 complementary output polarity */
#define TIM_CCER_CC3NP_Mask                   (((uint32_t)0x01) << 11)
#define TIM_CCER_CC3NP                        TIM_CCER_CC3NP_Mask
#define TIM_CCER_CC3NE_Pos                    ((uint32_t)10)                    /* Capture/Compare 3 complementary output enable */
#define TIM_CCER_CC3NE_Mask                   (((uint32_t)0x01) << 10)
#define TIM_CCER_CC3NE                        TIM_CCER_CC3NE_Mask
#define TIM_CCER_CC3P_Pos                     ((uint32_t)9)                     /* Capture/Compare 3 output polarity */
#define TIM_CCER_CC3P_Mask                    (((uint32_t)0x01) << 9)
#define TIM_CCER_CC3P                         TIM_CCER_CC3P_Mask
#define TIM_CCER_CC3E_Pos                     ((uint32_t)8)                     /* Capture/Compare 3 output enable */
#define TIM_CCER_CC3E_Mask                    (((uint32_t)0x01) << 8)
#define TIM_CCER_CC3E                         TIM_CCER_CC3E_Mask
#define TIM_CCER_CC2NP_Pos                    ((uint32_t)7)                     /* Capture/Compare 1 complementary output polarity */
#define TIM_CCER_CC2NP_Mask                   (((uint32_t)0x01) << 7)
#define TIM_CCER_CC2NP                        TIM_CCER_CC2NP_Mask
#define TIM_CCER_CC2NE_Pos                    ((uint32_t)6)                     /* Capture/Compare 2 complementary output enable */
#define TIM_CCER_CC2NE_Mask                   (((uint32_t)0x01) << 6)
#define TIM_CCER_CC2NE                        TIM_CCER_CC2NE_Mask
#define TIM_CCER_CC2P_Pos                     ((uint32_t)5)                     /* Capture/Compare 2 output polarity */
#define TIM_CCER_CC2P_Mask                    (((uint32_t)0x01) << 5)
#define TIM_CCER_CC2P                         TIM_CCER_CC2P_Mask
#define TIM_CCER_CC2E_Pos                     ((uint32_t)4)                     /* Capture/Compare 2 output enable */
#define TIM_CCER_CC2E_Mask                    (((uint32_t)0x01) << 4)
#define TIM_CCER_CC2E                         TIM_CCER_CC2E_Mask
#define TIM_CCER_CC1NP_Pos                    ((uint32_t)3)                     /* Capture/Compare 1 complementary output polarity */
#define TIM_CCER_CC1NP_Mask                   (((uint32_t)0x01) << 3)
#define TIM_CCER_CC1NP                        TIM_CCER_CC1NP_Mask
#define TIM_CCER_CC1NE_Pos                    ((uint32_t)2)                     /* Capture/Compare 1 complementary output enable */
#define TIM_CCER_CC1NE_Mask                   (((uint32_t)0x01) << 2)
#define TIM_CCER_CC1NE                        TIM_CCER_CC1NE_Mask
#define TIM_CCER_CC1P_Pos                     ((uint32_t)1)                     /* Capture/Compare 1 output polarity */
#define TIM_CCER_CC1P_Mask                    (((uint32_t)0x01) << 1)
#define TIM_CCER_CC1P                         TIM_CCER_CC1P_Mask
#define TIM_CCER_CC1E_Pos                     ((uint32_t)0)                     /* Capture/Compare 1 output enable */
#define TIM_CCER_CC1E_Mask                    (((uint32_t)0x01) << 0)
#define TIM_CCER_CC1E                         TIM_CCER_CC1E_Mask

/************************************** TIM->CNT  ***************************************/
#define TIM_CNT_CNT_Pos                       ((uint32_t)0)                     /* Counter value */
#define TIM_CNT_CNT_Mask                      (((uint32_t)0xFFFF) << 0)
#define TIM_CNT_CNT                           TIM_CNT_CNT_Mask
#define TIM_CNT_CNT_H_Pos                     ((uint32_t)16)                    /* Counter value high bits of TIM2 */
#define TIM_CNT_CNT_H_Mask                    (((uint32_t)0xFFFF) << 16)
#define TIM_CNT_CNT_H                         TIM_CNT_CNT_H_Mask
#define TIM_CNT_CNT_L_Pos                     ((uint32_t)0)                     /* Counter value */
#define TIM_CNT_CNT_L_Mask                    (((uint32_t)0xFFFF) << 0)
#define TIM_CNT_CNT_L                         TIM_CNT_CNT_L_Mask

/************************************** TIM->PSC  ***************************************/
#define TIM_PSC_PSC_Pos                       ((uint32_t)0)                     /* Prescaler value */
#define TIM_PSC_PSC_Mask                      (((uint32_t)0xFFFF) << 0)
#define TIM_PSC_PSC                           TIM_PSC_PSC_Mask

/************************************** TIM->ARR  ***************************************/
#define TIM_ARR_ARR_Pos                       ((uint32_t)0)                     /* Auto-reload value */
#define TIM_ARR_ARR_Mask                      (((uint32_t)0xFFFF) << 0)
#define TIM_ARR_ARR                           TIM_ARR_ARR_Mask
#define TIM_ARR_ARR_H_Pos                     ((uint32_t)16)                    /* High auto-reload value high bits of TIM2 */
#define TIM_ARR_ARR_H_Mask                    (((uint32_t)0xFFFF) << 16)
#define TIM_ARR_ARR_H                         TIM_ARR_ARR_H_Mask
#define TIM_ARR_ARR_L_Pos                     ((uint32_t)0)                     /* Low auto-reload value */
#define TIM_ARR_ARR_L_Mask                    (((uint32_t)0xFFFF) << 0)
#define TIM_ARR_ARR_L                         TIM_ARR_ARR_L_Mask

/************************************** TIM->RCR  ***************************************/
#define TIM_RCR_REP_Pos                       ((uint32_t)0)                     /* Repetition counter value */
#define TIM_RCR_REP_Mask                      (((uint32_t)0xFF) << 0)
#define TIM_RCR_REP                           TIM_RCR_REP_Mask
#define TIM_RCR_REP_0                         (((uint32_t)0x1))
#define TIM_RCR_REP_1                         (((uint32_t)0x2))
#define TIM_RCR_REP_2                         (((uint32_t)0x4))
#define TIM_RCR_REP_3                         (((uint32_t)0x8))
#define TIM_RCR_REP_4                         (((uint32_t)0x10))
#define TIM_RCR_REP_5                         (((uint32_t)0x20))
#define TIM_RCR_REP_6                         (((uint32_t)0x40))
#define TIM_RCR_REP_7                         (((uint32_t)0x80))

/************************************* TIM->CCR1  ***************************************/
#define TIM_CCR1_CCR1_Pos                     ((uint32_t)0)                     /* Capture/Compare 1 value */
#define TIM_CCR1_CCR1_Mask                    (((uint32_t)0xFFFF) << 0)
#define TIM_CCR1_CCR1                         TIM_CCR1_CCR1_Mask
#define TIM_CCR1_CCR1_H_Pos                   ((uint32_t)16)                    /* High Capture/Compare 1 value of TIM2 only */
#define TIM_CCR1_CCR1_H_Mask                  (((uint32_t)0xFFFF) << 16)
#define TIM_CCR1_CCR1_H                       TIM_CCR1_CCR1_H_Mask
#define TIM_CCR1_CCR1_L_Pos                   ((uint32_t)0)                     /* Low Capture/Compare 1 value */
#define TIM_CCR1_CCR1_L_Mask                  (((uint32_t)0xFFFF) << 0)
#define TIM_CCR1_CCR1_L                       TIM_CCR1_CCR1_L_Mask

/************************************* TIM->CCR2  ***************************************/
#define TIM_CCR2_CCR2_Pos                     ((uint32_t)0)                     /* Capture/Compare 2 value */
#define TIM_CCR2_CCR2_Mask                    (((uint32_t)0xFFFF) << 0)
#define TIM_CCR2_CCR2                         TIM_CCR2_CCR2_Mask
#define TIM_CCR2_CCR2_H_Pos                   ((uint32_t)16)                    /* High Capture/Compare 2 value of TIM2 only */
#define TIM_CCR2_CCR2_H_Mask                  (((uint32_t)0xFFFF) << 16)
#define TIM_CCR2_CCR2_H                       TIM_CCR2_CCR2_H_Mask
#define TIM_CCR2_CCR2_L_Pos                   ((uint32_t)0)                     /* Low Capture/Compare 2 value */
#define TIM_CCR2_CCR2_L_Mask                  (((uint32_t)0xFFFF) << 0)
#define TIM_CCR2_CCR2_L                       TIM_CCR2_CCR2_L_Mask

/************************************* TIM->CCR3  ***************************************/
#define TIM_CCR3_CCR3_Pos                     ((uint32_t)0)                     /* Capture/Compare 3 value */
#define TIM_CCR3_CCR3_Mask                    (((uint32_t)0xFFFF) << 0)
#define TIM_CCR3_CCR3                         TIM_CCR3_CCR3_Mask
#define TIM_CCR3_CCR3_H_Pos                   ((uint32_t)16)                    /* High Capture/Compare 3 value of TIM2 only */
#define TIM_CCR3_CCR3_H_Mask                  (((uint32_t)0xFFFF) << 16)
#define TIM_CCR3_CCR3_H                       TIM_CCR3_CCR3_H_Mask
#define TIM_CCR3_CCR3_L_Pos                   ((uint32_t)0)                     /* Low Capture/Compare 3 value */
#define TIM_CCR3_CCR3_L_Mask                  (((uint32_t)0xFFFF) << 0)
#define TIM_CCR3_CCR3_L                       TIM_CCR3_CCR3_L_Mask

/************************************* TIM->CCR4  ***************************************/
#define TIM_CCR4_CCR4_Pos                     ((uint32_t)0)                     /* Capture/Compare 4 value */
#define TIM_CCR4_CCR4_Mask                    (((uint32_t)0xFFFF) << 0)
#define TIM_CCR4_CCR4                         TIM_CCR4_CCR4_Mask
#define TIM_CCR4_CCR4_H_Pos                   ((uint32_t)16)                    /* High Capture/Compare 4 value of TIM2 only */
#define TIM_CCR4_CCR4_H_Mask                  (((uint32_t)0xFFFF) << 16)
#define TIM_CCR4_CCR4_H                       TIM_CCR4_CCR4_H_Mask
#define TIM_CCR4_CCR4_L_Pos                   ((uint32_t)0)                     /* Low Capture/Compare 4 value */
#define TIM_CCR4_CCR4_L_Mask                  (((uint32_t)0xFFFF) << 0)
#define TIM_CCR4_CCR4_L                       TIM_CCR4_CCR4_L_Mask

/************************************* TIM->BDTR  ***************************************/
#define TIM_BDTR_MOE_Pos                      ((uint32_t)15)                    /* Main output enable */
#define TIM_BDTR_MOE_Mask                     (((uint32_t)0x01) << 15)
#define TIM_BDTR_MOE                          TIM_BDTR_MOE_Mask
#define TIM_BDTR_AOE_Pos                      ((uint32_t)14)                    /* Automatic output enable */
#define TIM_BDTR_AOE_Mask                     (((uint32_t)0x01) << 14)
#define TIM_BDTR_AOE                          TIM_BDTR_AOE_Mask
#define TIM_BDTR_BKP_Pos                      ((uint32_t)13)                    /* Break polarity */
#define TIM_BDTR_BKP_Mask                     (((uint32_t)0x01) << 13)
#define TIM_BDTR_BKP                          TIM_BDTR_BKP_Mask
#define TIM_BDTR_BKE_Pos                      ((uint32_t)12)                    /* Break enable */
#define TIM_BDTR_BKE_Mask                     (((uint32_t)0x01) << 12)
#define TIM_BDTR_BKE                          TIM_BDTR_BKE_Mask
#define TIM_BDTR_OSSR_Pos                     ((uint32_t)11)                    /* Off-state selection for Run mode */
#define TIM_BDTR_OSSR_Mask                    (((uint32_t)0x01) << 11)
#define TIM_BDTR_OSSR                         TIM_BDTR_OSSR_Mask
#define TIM_BDTR_OSSI_Pos                     ((uint32_t)10)                    /* Off-state selection for Idle mode */
#define TIM_BDTR_OSSI_Mask                    (((uint32_t)0x01) << 10)
#define TIM_BDTR_OSSI                         TIM_BDTR_OSSI_Mask
#define TIM_BDTR_LOCK_Pos                     ((uint32_t)8)                     /* Lock configuration */
#define TIM_BDTR_LOCK_Mask                    (((uint32_t)0x03) << 8)
#define TIM_BDTR_LOCK                         TIM_BDTR_LOCK_Mask
#define TIM_BDTR_LOCK_0                       (((uint32_t)0x1 << TIM_BDTR_LOCK_Pos))
#define TIM_BDTR_LOCK_1                       (((uint32_t)0x2 << TIM_BDTR_LOCK_Pos))
#define TIM_BDTR_DTG_Pos                      ((uint32_t)0)                     /* Dead-time generator setup */
#define TIM_BDTR_DTG_Mask                     (((uint32_t)0xFF) << 0)
#define TIM_BDTR_DTG                          TIM_BDTR_DTG_Mask
#define TIM_BDTR_DTG_0                        (((uint32_t)0x1))
#define TIM_BDTR_DTG_1                        (((uint32_t)0x2))
#define TIM_BDTR_DTG_2                        (((uint32_t)0x4))
#define TIM_BDTR_DTG_3                        (((uint32_t)0x8))
#define TIM_BDTR_DTG_4                        (((uint32_t)0x10))
#define TIM_BDTR_DTG_5                        (((uint32_t)0x20))
#define TIM_BDTR_DTG_6                        (((uint32_t)0x40))
#define TIM_BDTR_DTG_7                        (((uint32_t)0x80))

/************************************** TIM->DCR  ***************************************/
#define TIM_DCR_DBL_Pos                       ((uint32_t)8)                     /* DMA burst length */
#define TIM_DCR_DBL_Mask                      (((uint32_t)0x1F) << 8)
#define TIM_DCR_DBL                           TIM_DCR_DBL_Mask
#define TIM_DCR_DBL_0                         (((uint32_t)0x1 << TIM_DCR_DBL_Pos))
#define TIM_DCR_DBL_1                         (((uint32_t)0x2 << TIM_DCR_DBL_Pos))
#define TIM_DCR_DBL_2                         (((uint32_t)0x4 << TIM_DCR_DBL_Pos))
#define TIM_DCR_DBL_3                         (((uint32_t)0x8 << TIM_DCR_DBL_Pos))
#define TIM_DCR_DBL_4                         (((uint32_t)0x10 << TIM_DCR_DBL_Pos))
#define TIM_DCR_DBA_Pos                       ((uint32_t)0)                     /* DMA base address */
#define TIM_DCR_DBA_Mask                      (((uint32_t)0x1F) << 0)
#define TIM_DCR_DBA                           TIM_DCR_DBA_Mask
#define TIM_DCR_DBA_0                         (((uint32_t)0x1))
#define TIM_DCR_DBA_1                         (((uint32_t)0x2))
#define TIM_DCR_DBA_2                         (((uint32_t)0x4))
#define TIM_DCR_DBA_3                         (((uint32_t)0x8))
#define TIM_DCR_DBA_4                         (((uint32_t)0x10))

/************************************* TIM->DMAR  ***************************************/
#define TIM_DMAR_DMAB_Pos                     ((uint32_t)0)                     /* DMA register for burst accesses */
#define TIM_DMAR_DMAB_Mask                    (((uint32_t)0xFFFF) << 0)
#define TIM_DMAR_DMAB                         TIM_DMAR_DMAB_Mask

/************************************** TIM->OR  ****************************************/
#define TIM_OR_OCREF_CLR_RMP_Pos              ((uint32_t)5)                     /* Clear OCREF remap */
#define TIM_OR_OCREF_CLR_RMP_Mask             (((uint32_t)0x03) << 5)
#define TIM_OR_OCREF_CLR_RMP                  TIM_OR_OCREF_CLR_RMP_Mask
#define TIM_OR_OCREF_CLR_RMP_0                (((uint32_t)0x1 << TIM_OR_OCREF_CLR_RMP_Pos))
#define TIM_OR_OCREF_CLR_RMP_1                (((uint32_t)0x2 << TIM_OR_OCREF_CLR_RMP_Pos))
#define TIM_OR_VCOMPO_RMP_Pos                 ((uint32_t)2)                     /* Voltage compare output remap */
#define TIM_OR_VCOMPO_RMP_Mask                (((uint32_t)0x03) << 2)
#define TIM_OR_VCOMPO_RMP                     TIM_OR_VCOMPO_RMP_Mask
#define TIM_OR_VCOMPO_RMP_0                   (((uint32_t)0x1 << TIM_OR_VCOMPO_RMP_Pos))
#define TIM_OR_VCOMPO_RMP_1                   (((uint32_t)0x2 << TIM_OR_VCOMPO_RMP_Pos))
#define TIM_OR_TI4_RMP_Pos                    ((uint32_t)3)                     /* Internal trigger remap */
#define TIM_OR_TI4_RMP_Mask                   (((uint32_t)0x03) << 3)
#define TIM_OR_TI4_RMP                        TIM_OR_TI4_RMP_Mask
#define TIM_OR_TI4_RMP_0                      (((uint32_t)0x1 << TIM_OR_TI4_RMP_Pos))
#define TIM_OR_TI4_RMP_1                      (((uint32_t)0x2 << TIM_OR_TI4_RMP_Pos))
#define TIM_OR_ETR_RMP_Pos                    ((uint32_t)0)                     /* External trigger remap */
#define TIM_OR_ETR_RMP_Mask                   (((uint32_t)0x07) << 0)
#define TIM_OR_ETR_RMP                        TIM_OR_ETR_RMP_Mask
#define TIM_OR_ETR_RMP_0                      (((uint32_t)0x1))
#define TIM_OR_ETR_RMP_1                      (((uint32_t)0x2))
#define TIM_OR_ETR_RMP_2                      (((uint32_t)0x4))
#define TIM_OR_TI_RMP_Pos                     ((uint32_t)2)                     /* Internal trigger remap */
#define TIM_OR_TI_RMP_Mask                    (((uint32_t)0x01) << 2)
#define TIM_OR_TI_RMP                         TIM_OR_TI_RMP_Mask
#define TIM_OR_TI1_RMP_Pos                    ((uint32_t)0)                     /* Timer Input 1 remap */
#define TIM_OR_TI1_RMP_Mask                   (((uint32_t)0x03) << 0)
#define TIM_OR_TI1_RMP                        TIM_OR_TI1_RMP_Mask
#define TIM_OR_TI1_RMP_0                      (((uint32_t)0x1))
#define TIM_OR_TI1_RMP_1                      (((uint32_t)0x2))

/*****************************************************************************************
*                                     Peripheral IWDG                                    *
*****************************************************************************************/
typedef struct
{
    __O  uint32_t KR;                     /* KR */
    __IO uint32_t PR;                     /* PR */
    __IO uint32_t RLR;                    /* RLR */
    __I  uint32_t SR;                     /* SR */
    __IO uint32_t WINR;                   /* WINR */
} IWDG_TypeDef;

/************************************** IWDG->KR  ***************************************/
#define IWDG_KR_KEY_Pos                       ((uint32_t)0)                     /* Key value (write only, read 0000h） */
#define IWDG_KR_KEY_Mask                      (((uint32_t)0xFFFF) << 0)
#define IWDG_KR_KEY                           IWDG_KR_KEY_Mask

/************************************** IWDG->PR  ***************************************/
#define IWDG_PR_PR_Pos                        ((uint32_t)0)                     /* Prescaler divider */
#define IWDG_PR_PR_Mask                       (((uint32_t)0x07) << 0)
#define IWDG_PR_PR                            IWDG_PR_PR_Mask
#define IWDG_PR_PR_0                          (((uint32_t)0x1))
#define IWDG_PR_PR_1                          (((uint32_t)0x2))
#define IWDG_PR_PR_2                          (((uint32_t)0x4))

/************************************* IWDG->RLR  ***************************************/
#define IWDG_RLR_RL_Pos                       ((uint32_t)0)                     /* Watchdog counter reload value */
#define IWDG_RLR_RL_Mask                      (((uint32_t)0x0FFF) << 0)
#define IWDG_RLR_RL                           IWDG_RLR_RL_Mask
#define IWDG_RLR_RL_0                         (((uint32_t)0x1))
#define IWDG_RLR_RL_1                         (((uint32_t)0x2))
#define IWDG_RLR_RL_2                         (((uint32_t)0x4))
#define IWDG_RLR_RL_3                         (((uint32_t)0x8))
#define IWDG_RLR_RL_4                         (((uint32_t)0x10))
#define IWDG_RLR_RL_5                         (((uint32_t)0x20))
#define IWDG_RLR_RL_6                         (((uint32_t)0x40))
#define IWDG_RLR_RL_7                         (((uint32_t)0x80))
#define IWDG_RLR_RL_8                         (((uint32_t)0x100))
#define IWDG_RLR_RL_9                         (((uint32_t)0x200))
#define IWDG_RLR_RL_10                        (((uint32_t)0x400))
#define IWDG_RLR_RL_11                        (((uint32_t)0x800))

/************************************** IWDG->SR  ***************************************/
#define IWDG_SR_WVU_Pos                       ((uint32_t)2)                     /* Watchdog counter window value update */
#define IWDG_SR_WVU_Mask                      (((uint32_t)0x01) << 2)
#define IWDG_SR_WVU                           IWDG_SR_WVU_Mask
#define IWDG_SR_RVU_Pos                       ((uint32_t)1)                     /* Watchdog counter reload value update */
#define IWDG_SR_RVU_Mask                      (((uint32_t)0x01) << 1)
#define IWDG_SR_RVU                           IWDG_SR_RVU_Mask
#define IWDG_SR_PVU_Pos                       ((uint32_t)0)                     /* Watchdog prescaler value update */
#define IWDG_SR_PVU_Mask                      (((uint32_t)0x01) << 0)
#define IWDG_SR_PVU                           IWDG_SR_PVU_Mask

/************************************* IWDG->WINR  **************************************/
#define IWDG_WINR_WIN_Pos                     ((uint32_t)0)                     /* Watchdog counter window value */
#define IWDG_WINR_WIN_Mask                    (((uint32_t)0x0FFF) << 0)
#define IWDG_WINR_WIN                         IWDG_WINR_WIN_Mask
#define IWDG_WINR_WIN_0                       (((uint32_t)0x1))
#define IWDG_WINR_WIN_1                       (((uint32_t)0x2))
#define IWDG_WINR_WIN_2                       (((uint32_t)0x4))
#define IWDG_WINR_WIN_3                       (((uint32_t)0x8))
#define IWDG_WINR_WIN_4                       (((uint32_t)0x10))
#define IWDG_WINR_WIN_5                       (((uint32_t)0x20))
#define IWDG_WINR_WIN_6                       (((uint32_t)0x40))
#define IWDG_WINR_WIN_7                       (((uint32_t)0x80))
#define IWDG_WINR_WIN_8                       (((uint32_t)0x100))
#define IWDG_WINR_WIN_9                       (((uint32_t)0x200))
#define IWDG_WINR_WIN_10                      (((uint32_t)0x400))
#define IWDG_WINR_WIN_11                      (((uint32_t)0x800))

/*****************************************************************************************
*                                     Peripheral WWDG                                    *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t CR;                     /* CR */
    __IO uint32_t CFR;                    /* CFR */
    __IO uint32_t SR;                     /* SR */
} WWDG_TypeDef;

/************************************** WWDG->CR  ***************************************/
#define WWDG_CR_WDGA_Pos                      ((uint32_t)7)                     /* Activation bit */
#define WWDG_CR_WDGA_Mask                     (((uint32_t)0x01) << 7)
#define WWDG_CR_WDGA                          WWDG_CR_WDGA_Mask
#define WWDG_CR_T_Pos                         ((uint32_t)0)                     /* 7-bit counter MSB to LSB */
#define WWDG_CR_T_Mask                        (((uint32_t)0x7F) << 0)
#define WWDG_CR_T                             WWDG_CR_T_Mask
#define WWDG_CR_T_0                           (((uint32_t)0x1))
#define WWDG_CR_T_1                           (((uint32_t)0x2))
#define WWDG_CR_T_2                           (((uint32_t)0x4))
#define WWDG_CR_T_3                           (((uint32_t)0x8))
#define WWDG_CR_T_4                           (((uint32_t)0x10))
#define WWDG_CR_T_5                           (((uint32_t)0x20))
#define WWDG_CR_T_6                           (((uint32_t)0x40))

/************************************* WWDG->CFR  ***************************************/
#define WWDG_CFR_EWI_Pos                      ((uint32_t)9)                     /* Early wakeup interrupt */
#define WWDG_CFR_EWI_Mask                     (((uint32_t)0x01) << 9)
#define WWDG_CFR_EWI                          WWDG_CFR_EWI_Mask
#define WWDG_CFR_WDGTB_Pos                    ((uint32_t)7)                     /* Timer base */
#define WWDG_CFR_WDGTB_Mask                   (((uint32_t)0x03) << 7)
#define WWDG_CFR_WDGTB                        WWDG_CFR_WDGTB_Mask
#define WWDG_CFR_WDGTB_0                      (((uint32_t)0x1 << WWDG_CFR_WDGTB_Pos))
#define WWDG_CFR_WDGTB_1                      (((uint32_t)0x2 << WWDG_CFR_WDGTB_Pos))
#define WWDG_CFR_W_Pos                        ((uint32_t)0)                     /* 7-bit window value */
#define WWDG_CFR_W_Mask                       (((uint32_t)0x7F) << 0)
#define WWDG_CFR_W                            WWDG_CFR_W_Mask
#define WWDG_CFR_W_0                          (((uint32_t)0x1))
#define WWDG_CFR_W_1                          (((uint32_t)0x2))
#define WWDG_CFR_W_2                          (((uint32_t)0x4))
#define WWDG_CFR_W_3                          (((uint32_t)0x8))
#define WWDG_CFR_W_4                          (((uint32_t)0x10))
#define WWDG_CFR_W_5                          (((uint32_t)0x20))
#define WWDG_CFR_W_6                          (((uint32_t)0x40))

/************************************** WWDG->SR  ***************************************/
#define WWDG_SR_EWIF_Pos                      ((uint32_t)0)                     /* Early wakeup interrupt flag */
#define WWDG_SR_EWIF_Mask                     (((uint32_t)0x01) << 0)
#define WWDG_SR_EWIF                          WWDG_SR_EWIF_Mask

/*****************************************************************************************
*                                     Peripheral RTC                                     *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t TR;                     /* TR */
    __IO uint32_t DR;                     /* DR */
    __IO uint32_t CR;                     /* CR */
    __IO uint32_t ISR;                    /* ISR */
    __IO uint32_t PRER;                   /* PRER */
    __IO uint32_t WUTR;                   /* WUTR */
    uint16_t RESERVED1[2];
    __IO uint32_t ALRMAR;                 /* ALRMAR */
    __IO uint32_t ALRMBR;                 /* ALRMBR */
    __O  uint32_t WPR;                    /* WPR */
    __I  uint32_t SSR;                    /* SSR */
    __O  uint32_t SHIFTR;                 /* SHIFTR */
    __I  uint32_t TSTR;                   /* TSTR */
    __I  uint32_t TSDR;                   /* TSDR */
    __I  uint32_t TSSSR;                  /* TSSSR */
    __IO uint32_t CALR;                   /* CALR */
    __IO uint32_t TAFCR;                  /* TAFCR */
    __IO uint32_t ALRMASSR;               /* ALRMASSR */
    __IO uint32_t ALRMBSSR;               /* ALRMBSSR */
    __IO uint32_t OR;                     /* OR */
    __IO uint32_t BKP0R;                  /* BKP0R */
    __IO uint32_t BKP1R;                  /* BKP1R */
    __IO uint32_t BKP2R;                  /* BKP2R */
    __IO uint32_t BKP3R;                  /* BKP3R */
    __IO uint32_t BKP4R;                  /* BKP4R */
} RTC_TypeDef;

/************************************** RTC->TR  ****************************************/
#define RTC_TR_PM_Pos                         ((uint32_t)22)                    /* AM/PM notation */
#define RTC_TR_PM_Mask                        (((uint32_t)0x01) << 22)
#define RTC_TR_PM                             RTC_TR_PM_Mask
#define RTC_TR_HT_Pos                         ((uint32_t)20)                    /* Hour tens in BCD format */
#define RTC_TR_HT_Mask                        (((uint32_t)0x03) << 20)
#define RTC_TR_HT                             RTC_TR_HT_Mask
#define RTC_TR_HT_0                           (((uint32_t)0x1 << RTC_TR_HT_Pos))
#define RTC_TR_HT_1                           (((uint32_t)0x2 << RTC_TR_HT_Pos))
#define RTC_TR_HU_Pos                         ((uint32_t)16)                    /* Hour units in BCD format */
#define RTC_TR_HU_Mask                        (((uint32_t)0x0F) << 16)
#define RTC_TR_HU                             RTC_TR_HU_Mask
#define RTC_TR_HU_0                           (((uint32_t)0x1 << RTC_TR_HU_Pos))
#define RTC_TR_HU_1                           (((uint32_t)0x2 << RTC_TR_HU_Pos))
#define RTC_TR_HU_2                           (((uint32_t)0x4 << RTC_TR_HU_Pos))
#define RTC_TR_HU_3                           (((uint32_t)0x8 << RTC_TR_HU_Pos))
#define RTC_TR_MNT_Pos                        ((uint32_t)12)                    /* Minute tens in BCD format */
#define RTC_TR_MNT_Mask                       (((uint32_t)0x07) << 12)
#define RTC_TR_MNT                            RTC_TR_MNT_Mask
#define RTC_TR_MNT_0                          (((uint32_t)0x1 << RTC_TR_MNT_Pos))
#define RTC_TR_MNT_1                          (((uint32_t)0x2 << RTC_TR_MNT_Pos))
#define RTC_TR_MNT_2                          (((uint32_t)0x4 << RTC_TR_MNT_Pos))
#define RTC_TR_MNU_Pos                        ((uint32_t)8)                     /* Minute units in BCD format */
#define RTC_TR_MNU_Mask                       (((uint32_t)0x0F) << 8)
#define RTC_TR_MNU                            RTC_TR_MNU_Mask
#define RTC_TR_MNU_0                          (((uint32_t)0x1 << RTC_TR_MNU_Pos))
#define RTC_TR_MNU_1                          (((uint32_t)0x2 << RTC_TR_MNU_Pos))
#define RTC_TR_MNU_2                          (((uint32_t)0x4 << RTC_TR_MNU_Pos))
#define RTC_TR_MNU_3                          (((uint32_t)0x8 << RTC_TR_MNU_Pos))
#define RTC_TR_ST_Pos                         ((uint32_t)4)                     /* Second tens in BCD format */
#define RTC_TR_ST_Mask                        (((uint32_t)0x07) << 4)
#define RTC_TR_ST                             RTC_TR_ST_Mask
#define RTC_TR_ST_0                           (((uint32_t)0x1 << RTC_TR_ST_Pos))
#define RTC_TR_ST_1                           (((uint32_t)0x2 << RTC_TR_ST_Pos))
#define RTC_TR_ST_2                           (((uint32_t)0x4 << RTC_TR_ST_Pos))
#define RTC_TR_SU_Pos                         ((uint32_t)0)                     /* Second units in BCD format */
#define RTC_TR_SU_Mask                        (((uint32_t)0x0F) << 0)
#define RTC_TR_SU                             RTC_TR_SU_Mask
#define RTC_TR_SU_0                           (((uint32_t)0x1))
#define RTC_TR_SU_1                           (((uint32_t)0x2))
#define RTC_TR_SU_2                           (((uint32_t)0x4))
#define RTC_TR_SU_3                           (((uint32_t)0x8))

/************************************** RTC->DR  ****************************************/
#define RTC_DR_YT_Pos                         ((uint32_t)20)                    /* Year tens in BCD format */
#define RTC_DR_YT_Mask                        (((uint32_t)0x0F) << 20)
#define RTC_DR_YT                             RTC_DR_YT_Mask
#define RTC_DR_YT_0                           (((uint32_t)0x1 << RTC_DR_YT_Pos))
#define RTC_DR_YT_1                           (((uint32_t)0x2 << RTC_DR_YT_Pos))
#define RTC_DR_YT_2                           (((uint32_t)0x4 << RTC_DR_YT_Pos))
#define RTC_DR_YT_3                           (((uint32_t)0x8 << RTC_DR_YT_Pos))
#define RTC_DR_YU_Pos                         ((uint32_t)16)                    /* Year units in BCD format */
#define RTC_DR_YU_Mask                        (((uint32_t)0x0F) << 16)
#define RTC_DR_YU                             RTC_DR_YU_Mask
#define RTC_DR_YU_0                           (((uint32_t)0x1 << RTC_DR_YU_Pos))
#define RTC_DR_YU_1                           (((uint32_t)0x2 << RTC_DR_YU_Pos))
#define RTC_DR_YU_2                           (((uint32_t)0x4 << RTC_DR_YU_Pos))
#define RTC_DR_YU_3                           (((uint32_t)0x8 << RTC_DR_YU_Pos))
#define RTC_DR_WDU_Pos                        ((uint32_t)13)                    /* Week day units */
#define RTC_DR_WDU_Mask                       (((uint32_t)0x07) << 13)
#define RTC_DR_WDU                            RTC_DR_WDU_Mask
#define RTC_DR_WDU_0                          (((uint32_t)0x1 << RTC_DR_WDU_Pos))
#define RTC_DR_WDU_1                          (((uint32_t)0x2 << RTC_DR_WDU_Pos))
#define RTC_DR_WDU_2                          (((uint32_t)0x4 << RTC_DR_WDU_Pos))
#define RTC_DR_MT_Pos                         ((uint32_t)12)                    /* Month tens in BCD format */
#define RTC_DR_MT_Mask                        (((uint32_t)0x01) << 12)
#define RTC_DR_MT                             RTC_DR_MT_Mask
#define RTC_DR_MU_Pos                         ((uint32_t)8)                     /* Month units in BCD format */
#define RTC_DR_MU_Mask                        (((uint32_t)0x0F) << 8)
#define RTC_DR_MU                             RTC_DR_MU_Mask
#define RTC_DR_MU_0                           (((uint32_t)0x1 << RTC_DR_MU_Pos))
#define RTC_DR_MU_1                           (((uint32_t)0x2 << RTC_DR_MU_Pos))
#define RTC_DR_MU_2                           (((uint32_t)0x4 << RTC_DR_MU_Pos))
#define RTC_DR_MU_3                           (((uint32_t)0x8 << RTC_DR_MU_Pos))
#define RTC_DR_DT_Pos                         ((uint32_t)4)                     /* Date tens in BCD format */
#define RTC_DR_DT_Mask                        (((uint32_t)0x03) << 4)
#define RTC_DR_DT                             RTC_DR_DT_Mask
#define RTC_DR_DT_0                           (((uint32_t)0x1 << RTC_DR_DT_Pos))
#define RTC_DR_DT_1                           (((uint32_t)0x2 << RTC_DR_DT_Pos))
#define RTC_DR_DU_Pos                         ((uint32_t)0)                     /* Date units in BCD format */
#define RTC_DR_DU_Mask                        (((uint32_t)0x0F) << 0)
#define RTC_DR_DU                             RTC_DR_DU_Mask
#define RTC_DR_DU_0                           (((uint32_t)0x1))
#define RTC_DR_DU_1                           (((uint32_t)0x2))
#define RTC_DR_DU_2                           (((uint32_t)0x4))
#define RTC_DR_DU_3                           (((uint32_t)0x8))

/************************************** RTC->CR  ****************************************/
#define RTC_CR_COE_Pos                        ((uint32_t)23)                    /* Calibration output enable */
#define RTC_CR_COE_Mask                       (((uint32_t)0x01) << 23)
#define RTC_CR_COE                            RTC_CR_COE_Mask
#define RTC_CR_OSEL_Pos                       ((uint32_t)21)                    /* Output selection */
#define RTC_CR_OSEL_Mask                      (((uint32_t)0x03) << 21)
#define RTC_CR_OSEL                           RTC_CR_OSEL_Mask
#define RTC_CR_OSEL_0                         (((uint32_t)0x1 << RTC_CR_OSEL_Pos))
#define RTC_CR_OSEL_1                         (((uint32_t)0x2 << RTC_CR_OSEL_Pos))
#define RTC_CR_POL_Pos                        ((uint32_t)20)                    /* Output polarity */
#define RTC_CR_POL_Mask                       (((uint32_t)0x01) << 20)
#define RTC_CR_POL                            RTC_CR_POL_Mask
#define RTC_CR_COSEL_Pos                      ((uint32_t)19)                    /* Calibration output selection */
#define RTC_CR_COSEL_Mask                     (((uint32_t)0x01) << 19)
#define RTC_CR_COSEL                          RTC_CR_COSEL_Mask
#define RTC_CR_BKP_Pos                        ((uint32_t)18)                    /* Backup */
#define RTC_CR_BKP_Mask                       (((uint32_t)0x01) << 18)
#define RTC_CR_BKP                            RTC_CR_BKP_Mask
#define RTC_CR_SUB1H_Pos                      ((uint32_t)17)                    /* Subtract 1 hour for winter time change */
#define RTC_CR_SUB1H_Mask                     (((uint32_t)0x01) << 17)
#define RTC_CR_SUB1H                          RTC_CR_SUB1H_Mask
#define RTC_CR_ADD1H_Pos                      ((uint32_t)16)                    /* Add 1 hour for summer time change */
#define RTC_CR_ADD1H_Mask                     (((uint32_t)0x01) << 16)
#define RTC_CR_ADD1H                          RTC_CR_ADD1H_Mask
#define RTC_CR_TSIE_Pos                       ((uint32_t)15)                    /* Time-stamp interrupt enable */
#define RTC_CR_TSIE_Mask                      (((uint32_t)0x01) << 15)
#define RTC_CR_TSIE                           RTC_CR_TSIE_Mask
#define RTC_CR_WUTIE_Pos                      ((uint32_t)14)                    /* Wakeup timer interrupt enable */
#define RTC_CR_WUTIE_Mask                     (((uint32_t)0x01) << 14)
#define RTC_CR_WUTIE                          RTC_CR_WUTIE_Mask
#define RTC_CR_ALRBIE_Pos                     ((uint32_t)13)                    /* Alarm B interrupt enable */
#define RTC_CR_ALRBIE_Mask                    (((uint32_t)0x01) << 13)
#define RTC_CR_ALRBIE                         RTC_CR_ALRBIE_Mask
#define RTC_CR_ALRAIE_Pos                     ((uint32_t)12)                    /* Alarm A interrupt enable */
#define RTC_CR_ALRAIE_Mask                    (((uint32_t)0x01) << 12)
#define RTC_CR_ALRAIE                         RTC_CR_ALRAIE_Mask
#define RTC_CR_TSE_Pos                        ((uint32_t)11)                    /* Timestamp enable */
#define RTC_CR_TSE_Mask                       (((uint32_t)0x01) << 11)
#define RTC_CR_TSE                            RTC_CR_TSE_Mask
#define RTC_CR_WUTE_Pos                       ((uint32_t)10)                    /* Wakeup timer enable */
#define RTC_CR_WUTE_Mask                      (((uint32_t)0x01) << 10)
#define RTC_CR_WUTE                           RTC_CR_WUTE_Mask
#define RTC_CR_ALRBE_Pos                      ((uint32_t)9)                     /* Alarm B enable */
#define RTC_CR_ALRBE_Mask                     (((uint32_t)0x01) << 9)
#define RTC_CR_ALRBE                          RTC_CR_ALRBE_Mask
#define RTC_CR_ALRAE_Pos                      ((uint32_t)8)                     /* Alarm A enable */
#define RTC_CR_ALRAE_Mask                     (((uint32_t)0x01) << 8)
#define RTC_CR_ALRAE                          RTC_CR_ALRAE_Mask
#define RTC_CR_FMT_Pos                        ((uint32_t)6)                     /* Hour format */
#define RTC_CR_FMT_Mask                       (((uint32_t)0x01) << 6)
#define RTC_CR_FMT                            RTC_CR_FMT_Mask
#define RTC_CR_BYPSHAD_Pos                    ((uint32_t)5)                     /* Bypass the shadow registers */
#define RTC_CR_BYPSHAD_Mask                   (((uint32_t)0x01) << 5)
#define RTC_CR_BYPSHAD                        RTC_CR_BYPSHAD_Mask
#define RTC_CR_REFCKON_Pos                    ((uint32_t)4)                     /* RTC_REFIN reference clock detection enable 50 or 60 Hz */
#define RTC_CR_REFCKON_Mask                   (((uint32_t)0x01) << 4)
#define RTC_CR_REFCKON                        RTC_CR_REFCKON_Mask
#define RTC_CR_TSEDGE_Pos                     ((uint32_t)3)                     /* Time-stamp event active edge */
#define RTC_CR_TSEDGE_Mask                    (((uint32_t)0x01) << 3)
#define RTC_CR_TSEDGE                         RTC_CR_TSEDGE_Mask
#define RTC_CR_WUCKSEL_Pos                    ((uint32_t)0)                     /* Wakeup clock selection */
#define RTC_CR_WUCKSEL_Mask                   (((uint32_t)0x07) << 0)
#define RTC_CR_WUCKSEL                        RTC_CR_WUCKSEL_Mask
#define RTC_CR_WUCKSEL_0                      (((uint32_t)0x1))
#define RTC_CR_WUCKSEL_1                      (((uint32_t)0x2))
#define RTC_CR_WUCKSEL_2                      (((uint32_t)0x4))

/************************************** RTC->ISR  ***************************************/
#define RTC_ISR_RECALPF_Pos                   ((uint32_t)16)                    /* Recalibration pending Flag */
#define RTC_ISR_RECALPF_Mask                  (((uint32_t)0x01) << 16)
#define RTC_ISR_RECALPF                       RTC_ISR_RECALPF_Mask
#define RTC_ISR_TAMP2F_Pos                    ((uint32_t)14)                    /* RTC_TAMP2 detection flag */
#define RTC_ISR_TAMP2F_Mask                   (((uint32_t)0x01) << 14)
#define RTC_ISR_TAMP2F                        RTC_ISR_TAMP2F_Mask
#define RTC_ISR_TAMP1F_Pos                    ((uint32_t)13)                    /* RTC_TAMP1 detection flag */
#define RTC_ISR_TAMP1F_Mask                   (((uint32_t)0x01) << 13)
#define RTC_ISR_TAMP1F                        RTC_ISR_TAMP1F_Mask
#define RTC_ISR_TSOVF_Pos                     ((uint32_t)12)                    /* Time-stamp overflow flag */
#define RTC_ISR_TSOVF_Mask                    (((uint32_t)0x01) << 12)
#define RTC_ISR_TSOVF                         RTC_ISR_TSOVF_Mask
#define RTC_ISR_TSF_Pos                       ((uint32_t)11)                    /* Time-stamp flag */
#define RTC_ISR_TSF_Mask                      (((uint32_t)0x01) << 11)
#define RTC_ISR_TSF                           RTC_ISR_TSF_Mask
#define RTC_ISR_WUTF_Pos                      ((uint32_t)10)                    /* Wakeup timer flag */
#define RTC_ISR_WUTF_Mask                     (((uint32_t)0x01) << 10)
#define RTC_ISR_WUTF                          RTC_ISR_WUTF_Mask
#define RTC_ISR_ALRBF_Pos                     ((uint32_t)9)                     /* Alarm B flag */
#define RTC_ISR_ALRBF_Mask                    (((uint32_t)0x01) << 9)
#define RTC_ISR_ALRBF                         RTC_ISR_ALRBF_Mask
#define RTC_ISR_ALRAF_Pos                     ((uint32_t)8)                     /* Alarm A flag */
#define RTC_ISR_ALRAF_Mask                    (((uint32_t)0x01) << 8)
#define RTC_ISR_ALRAF                         RTC_ISR_ALRAF_Mask
#define RTC_ISR_INIT_Pos                      ((uint32_t)7)                     /* Initialization mode */
#define RTC_ISR_INIT_Mask                     (((uint32_t)0x01) << 7)
#define RTC_ISR_INIT                          RTC_ISR_INIT_Mask
#define RTC_ISR_INITF_Pos                     ((uint32_t)6)                     /* Initialization flag */
#define RTC_ISR_INITF_Mask                    (((uint32_t)0x01) << 6)
#define RTC_ISR_INITF                         RTC_ISR_INITF_Mask
#define RTC_ISR_RSF_Pos                       ((uint32_t)5)                     /* Registers synchronization flag */
#define RTC_ISR_RSF_Mask                      (((uint32_t)0x01) << 5)
#define RTC_ISR_RSF                           RTC_ISR_RSF_Mask
#define RTC_ISR_INITS_Pos                     ((uint32_t)4)                     /* Initialization status flag */
#define RTC_ISR_INITS_Mask                    (((uint32_t)0x01) << 4)
#define RTC_ISR_INITS                         RTC_ISR_INITS_Mask
#define RTC_ISR_SHPF_Pos                      ((uint32_t)3)                     /* Shift operation pending */
#define RTC_ISR_SHPF_Mask                     (((uint32_t)0x01) << 3)
#define RTC_ISR_SHPF                          RTC_ISR_SHPF_Mask
#define RTC_ISR_WUTWF_Pos                     ((uint32_t)2)                     /* Wakeup timer write flag */
#define RTC_ISR_WUTWF_Mask                    (((uint32_t)0x01) << 2)
#define RTC_ISR_WUTWF                         RTC_ISR_WUTWF_Mask
#define RTC_ISR_ALRBWF_Pos                    ((uint32_t)1)                     /* Alarm B write flag */
#define RTC_ISR_ALRBWF_Mask                   (((uint32_t)0x01) << 1)
#define RTC_ISR_ALRBWF                        RTC_ISR_ALRBWF_Mask
#define RTC_ISR_ALRAWF_Pos                    ((uint32_t)0)                     /* Alarm A write flag */
#define RTC_ISR_ALRAWF_Mask                   (((uint32_t)0x01) << 0)
#define RTC_ISR_ALRAWF                        RTC_ISR_ALRAWF_Mask

/************************************* RTC->PRER  ***************************************/
#define RTC_PRER_PREDIV_A_Pos                 ((uint32_t)16)                    /* Asynchronous prescaler factor */
#define RTC_PRER_PREDIV_A_Mask                (((uint32_t)0x7F) << 16)
#define RTC_PRER_PREDIV_A                     RTC_PRER_PREDIV_A_Mask
#define RTC_PRER_PREDIV_A_0                   (((uint32_t)0x1 << RTC_PRER_PREDIV_A_Pos))
#define RTC_PRER_PREDIV_A_1                   (((uint32_t)0x2 << RTC_PRER_PREDIV_A_Pos))
#define RTC_PRER_PREDIV_A_2                   (((uint32_t)0x4 << RTC_PRER_PREDIV_A_Pos))
#define RTC_PRER_PREDIV_A_3                   (((uint32_t)0x8 << RTC_PRER_PREDIV_A_Pos))
#define RTC_PRER_PREDIV_A_4                   (((uint32_t)0x10 << RTC_PRER_PREDIV_A_Pos))
#define RTC_PRER_PREDIV_A_5                   (((uint32_t)0x20 << RTC_PRER_PREDIV_A_Pos))
#define RTC_PRER_PREDIV_A_6                   (((uint32_t)0x40 << RTC_PRER_PREDIV_A_Pos))
#define RTC_PRER_PREDIV_S_Pos                 ((uint32_t)0)                     /* Synchronous prescaler factor */
#define RTC_PRER_PREDIV_S_Mask                (((uint32_t)0x7FFF) << 0)
#define RTC_PRER_PREDIV_S                     RTC_PRER_PREDIV_S_Mask
#define RTC_PRER_PREDIV_S_0                   (((uint32_t)0x1))
#define RTC_PRER_PREDIV_S_1                   (((uint32_t)0x2))
#define RTC_PRER_PREDIV_S_2                   (((uint32_t)0x4))
#define RTC_PRER_PREDIV_S_3                   (((uint32_t)0x8))
#define RTC_PRER_PREDIV_S_4                   (((uint32_t)0x10))
#define RTC_PRER_PREDIV_S_5                   (((uint32_t)0x20))
#define RTC_PRER_PREDIV_S_6                   (((uint32_t)0x40))
#define RTC_PRER_PREDIV_S_7                   (((uint32_t)0x80))
#define RTC_PRER_PREDIV_S_8                   (((uint32_t)0x100))
#define RTC_PRER_PREDIV_S_9                   (((uint32_t)0x200))
#define RTC_PRER_PREDIV_S_10                  (((uint32_t)0x400))
#define RTC_PRER_PREDIV_S_11                  (((uint32_t)0x800))
#define RTC_PRER_PREDIV_S_12                  (((uint32_t)0x1000))
#define RTC_PRER_PREDIV_S_13                  (((uint32_t)0x2000))
#define RTC_PRER_PREDIV_S_14                  (((uint32_t)0x4000))

/************************************* RTC->WUTR  ***************************************/
#define RTC_WUTR_WUT_Pos                      ((uint32_t)0)                     /* Wakeup auto-reload value bits */
#define RTC_WUTR_WUT_Mask                     (((uint32_t)0xFFFF) << 0)
#define RTC_WUTR_WUT                          RTC_WUTR_WUT_Mask

/************************************ RTC->ALRMAR  **************************************/
#define RTC_ALRMAR_MSK4_Pos                   ((uint32_t)31)                    /* Alarm A date mask */
#define RTC_ALRMAR_MSK4_Mask                  (((uint32_t)0x01) << 31)
#define RTC_ALRMAR_MSK4                       RTC_ALRMAR_MSK4_Mask
#define RTC_ALRMAR_WDSEL_Pos                  ((uint32_t)30)                    /* Week day selection */
#define RTC_ALRMAR_WDSEL_Mask                 (((uint32_t)0x01) << 30)
#define RTC_ALRMAR_WDSEL                      RTC_ALRMAR_WDSEL_Mask
#define RTC_ALRMAR_DT_Pos                     ((uint32_t)28)                    /* Date tens in BCD format */
#define RTC_ALRMAR_DT_Mask                    (((uint32_t)0x03) << 28)
#define RTC_ALRMAR_DT                         RTC_ALRMAR_DT_Mask
#define RTC_ALRMAR_DT_0                       (((uint32_t)0x1 << RTC_ALRMAR_DT_Pos))
#define RTC_ALRMAR_DT_1                       (((uint32_t)0x2 << RTC_ALRMAR_DT_Pos))
#define RTC_ALRMAR_DU_Pos                     ((uint32_t)24)                    /* Date units or day in BCD format */
#define RTC_ALRMAR_DU_Mask                    (((uint32_t)0x0F) << 24)
#define RTC_ALRMAR_DU                         RTC_ALRMAR_DU_Mask
#define RTC_ALRMAR_DU_0                       (((uint32_t)0x1 << RTC_ALRMAR_DU_Pos))
#define RTC_ALRMAR_DU_1                       (((uint32_t)0x2 << RTC_ALRMAR_DU_Pos))
#define RTC_ALRMAR_DU_2                       (((uint32_t)0x4 << RTC_ALRMAR_DU_Pos))
#define RTC_ALRMAR_DU_3                       (((uint32_t)0x8 << RTC_ALRMAR_DU_Pos))
#define RTC_ALRMAR_MSK3_Pos                   ((uint32_t)23)                    /* Alarm A hours mask */
#define RTC_ALRMAR_MSK3_Mask                  (((uint32_t)0x01) << 23)
#define RTC_ALRMAR_MSK3                       RTC_ALRMAR_MSK3_Mask
#define RTC_ALRMAR_PM_Pos                     ((uint32_t)22)                    /* AM/PM notation */
#define RTC_ALRMAR_PM_Mask                    (((uint32_t)0x01) << 22)
#define RTC_ALRMAR_PM                         RTC_ALRMAR_PM_Mask
#define RTC_ALRMAR_HT_Pos                     ((uint32_t)20)                    /* Hour tens in BCD format */
#define RTC_ALRMAR_HT_Mask                    (((uint32_t)0x03) << 20)
#define RTC_ALRMAR_HT                         RTC_ALRMAR_HT_Mask
#define RTC_ALRMAR_HT_0                       (((uint32_t)0x1 << RTC_ALRMAR_HT_Pos))
#define RTC_ALRMAR_HT_1                       (((uint32_t)0x2 << RTC_ALRMAR_HT_Pos))
#define RTC_ALRMAR_HU_Pos                     ((uint32_t)16)                    /* Hour units in BCD format */
#define RTC_ALRMAR_HU_Mask                    (((uint32_t)0x0F) << 16)
#define RTC_ALRMAR_HU                         RTC_ALRMAR_HU_Mask
#define RTC_ALRMAR_HU_0                       (((uint32_t)0x1 << RTC_ALRMAR_HU_Pos))
#define RTC_ALRMAR_HU_1                       (((uint32_t)0x2 << RTC_ALRMAR_HU_Pos))
#define RTC_ALRMAR_HU_2                       (((uint32_t)0x4 << RTC_ALRMAR_HU_Pos))
#define RTC_ALRMAR_HU_3                       (((uint32_t)0x8 << RTC_ALRMAR_HU_Pos))
#define RTC_ALRMAR_MSK2_Pos                   ((uint32_t)15)                    /* Alarm A minutes mask */
#define RTC_ALRMAR_MSK2_Mask                  (((uint32_t)0x01) << 15)
#define RTC_ALRMAR_MSK2                       RTC_ALRMAR_MSK2_Mask
#define RTC_ALRMAR_MNT_Pos                    ((uint32_t)12)                    /* Minute tens in BCD format */
#define RTC_ALRMAR_MNT_Mask                   (((uint32_t)0x07) << 12)
#define RTC_ALRMAR_MNT                        RTC_ALRMAR_MNT_Mask
#define RTC_ALRMAR_MNT_0                      (((uint32_t)0x1 << RTC_ALRMAR_MNT_Pos))
#define RTC_ALRMAR_MNT_1                      (((uint32_t)0x2 << RTC_ALRMAR_MNT_Pos))
#define RTC_ALRMAR_MNT_2                      (((uint32_t)0x4 << RTC_ALRMAR_MNT_Pos))
#define RTC_ALRMAR_MNU_Pos                    ((uint32_t)8)                     /* Minute units in BCD format */
#define RTC_ALRMAR_MNU_Mask                   (((uint32_t)0x0F) << 8)
#define RTC_ALRMAR_MNU                        RTC_ALRMAR_MNU_Mask
#define RTC_ALRMAR_MNU_0                      (((uint32_t)0x1 << RTC_ALRMAR_MNU_Pos))
#define RTC_ALRMAR_MNU_1                      (((uint32_t)0x2 << RTC_ALRMAR_MNU_Pos))
#define RTC_ALRMAR_MNU_2                      (((uint32_t)0x4 << RTC_ALRMAR_MNU_Pos))
#define RTC_ALRMAR_MNU_3                      (((uint32_t)0x8 << RTC_ALRMAR_MNU_Pos))
#define RTC_ALRMAR_MSK1_Pos                   ((uint32_t)7)                     /* Alarm A seconds mask */
#define RTC_ALRMAR_MSK1_Mask                  (((uint32_t)0x01) << 7)
#define RTC_ALRMAR_MSK1                       RTC_ALRMAR_MSK1_Mask
#define RTC_ALRMAR_ST_Pos                     ((uint32_t)4)                     /* Second tens in BCD format */
#define RTC_ALRMAR_ST_Mask                    (((uint32_t)0x07) << 4)
#define RTC_ALRMAR_ST                         RTC_ALRMAR_ST_Mask
#define RTC_ALRMAR_ST_0                       (((uint32_t)0x1 << RTC_ALRMAR_ST_Pos))
#define RTC_ALRMAR_ST_1                       (((uint32_t)0x2 << RTC_ALRMAR_ST_Pos))
#define RTC_ALRMAR_ST_2                       (((uint32_t)0x4 << RTC_ALRMAR_ST_Pos))
#define RTC_ALRMAR_SU_Pos                     ((uint32_t)0)                     /* Second units in BCD format */
#define RTC_ALRMAR_SU_Mask                    (((uint32_t)0x0F) << 0)
#define RTC_ALRMAR_SU                         RTC_ALRMAR_SU_Mask
#define RTC_ALRMAR_SU_0                       (((uint32_t)0x1))
#define RTC_ALRMAR_SU_1                       (((uint32_t)0x2))
#define RTC_ALRMAR_SU_2                       (((uint32_t)0x4))
#define RTC_ALRMAR_SU_3                       (((uint32_t)0x8))

/************************************ RTC->ALRMBR  **************************************/
#define RTC_ALRMBR_MSK4_Pos                   ((uint32_t)31)                    /* Alarm B date mask */
#define RTC_ALRMBR_MSK4_Mask                  (((uint32_t)0x01) << 31)
#define RTC_ALRMBR_MSK4                       RTC_ALRMBR_MSK4_Mask
#define RTC_ALRMBR_WDSEL_Pos                  ((uint32_t)30)                    /* Week day selection */
#define RTC_ALRMBR_WDSEL_Mask                 (((uint32_t)0x01) << 30)
#define RTC_ALRMBR_WDSEL                      RTC_ALRMBR_WDSEL_Mask
#define RTC_ALRMBR_DT_Pos                     ((uint32_t)28)                    /* Date tens in BCD format */
#define RTC_ALRMBR_DT_Mask                    (((uint32_t)0x03) << 28)
#define RTC_ALRMBR_DT                         RTC_ALRMBR_DT_Mask
#define RTC_ALRMBR_DT_0                       (((uint32_t)0x1 << RTC_ALRMBR_DT_Pos))
#define RTC_ALRMBR_DT_1                       (((uint32_t)0x2 << RTC_ALRMBR_DT_Pos))
#define RTC_ALRMBR_DU_Pos                     ((uint32_t)24)                    /* Date units or day in BCD format */
#define RTC_ALRMBR_DU_Mask                    (((uint32_t)0x0F) << 24)
#define RTC_ALRMBR_DU                         RTC_ALRMBR_DU_Mask
#define RTC_ALRMBR_DU_0                       (((uint32_t)0x1 << RTC_ALRMBR_DU_Pos))
#define RTC_ALRMBR_DU_1                       (((uint32_t)0x2 << RTC_ALRMBR_DU_Pos))
#define RTC_ALRMBR_DU_2                       (((uint32_t)0x4 << RTC_ALRMBR_DU_Pos))
#define RTC_ALRMBR_DU_3                       (((uint32_t)0x8 << RTC_ALRMBR_DU_Pos))
#define RTC_ALRMBR_MSK3_Pos                   ((uint32_t)23)                    /* Alarm B hours mask */
#define RTC_ALRMBR_MSK3_Mask                  (((uint32_t)0x01) << 23)
#define RTC_ALRMBR_MSK3                       RTC_ALRMBR_MSK3_Mask
#define RTC_ALRMBR_PM_Pos                     ((uint32_t)22)                    /* AM/PM notation */
#define RTC_ALRMBR_PM_Mask                    (((uint32_t)0x01) << 22)
#define RTC_ALRMBR_PM                         RTC_ALRMBR_PM_Mask
#define RTC_ALRMBR_HT_Pos                     ((uint32_t)20)                    /* Hour tens in BCD format */
#define RTC_ALRMBR_HT_Mask                    (((uint32_t)0x03) << 20)
#define RTC_ALRMBR_HT                         RTC_ALRMBR_HT_Mask
#define RTC_ALRMBR_HT_0                       (((uint32_t)0x1 << RTC_ALRMBR_HT_Pos))
#define RTC_ALRMBR_HT_1                       (((uint32_t)0x2 << RTC_ALRMBR_HT_Pos))
#define RTC_ALRMBR_HU_Pos                     ((uint32_t)16)                    /* Hour units in BCD format */
#define RTC_ALRMBR_HU_Mask                    (((uint32_t)0x0F) << 16)
#define RTC_ALRMBR_HU                         RTC_ALRMBR_HU_Mask
#define RTC_ALRMBR_HU_0                       (((uint32_t)0x1 << RTC_ALRMBR_HU_Pos))
#define RTC_ALRMBR_HU_1                       (((uint32_t)0x2 << RTC_ALRMBR_HU_Pos))
#define RTC_ALRMBR_HU_2                       (((uint32_t)0x4 << RTC_ALRMBR_HU_Pos))
#define RTC_ALRMBR_HU_3                       (((uint32_t)0x8 << RTC_ALRMBR_HU_Pos))
#define RTC_ALRMBR_MSK2_Pos                   ((uint32_t)15)                    /* Alarm B minutes mask */
#define RTC_ALRMBR_MSK2_Mask                  (((uint32_t)0x01) << 15)
#define RTC_ALRMBR_MSK2                       RTC_ALRMBR_MSK2_Mask
#define RTC_ALRMBR_MNT_Pos                    ((uint32_t)12)                    /* Minute tens in BCD format */
#define RTC_ALRMBR_MNT_Mask                   (((uint32_t)0x07) << 12)
#define RTC_ALRMBR_MNT                        RTC_ALRMBR_MNT_Mask
#define RTC_ALRMBR_MNT_0                      (((uint32_t)0x1 << RTC_ALRMBR_MNT_Pos))
#define RTC_ALRMBR_MNT_1                      (((uint32_t)0x2 << RTC_ALRMBR_MNT_Pos))
#define RTC_ALRMBR_MNT_2                      (((uint32_t)0x4 << RTC_ALRMBR_MNT_Pos))
#define RTC_ALRMBR_MNU_Pos                    ((uint32_t)8)                     /* Minute units in BCD format */
#define RTC_ALRMBR_MNU_Mask                   (((uint32_t)0x0F) << 8)
#define RTC_ALRMBR_MNU                        RTC_ALRMBR_MNU_Mask
#define RTC_ALRMBR_MNU_0                      (((uint32_t)0x1 << RTC_ALRMBR_MNU_Pos))
#define RTC_ALRMBR_MNU_1                      (((uint32_t)0x2 << RTC_ALRMBR_MNU_Pos))
#define RTC_ALRMBR_MNU_2                      (((uint32_t)0x4 << RTC_ALRMBR_MNU_Pos))
#define RTC_ALRMBR_MNU_3                      (((uint32_t)0x8 << RTC_ALRMBR_MNU_Pos))
#define RTC_ALRMBR_MSK1_Pos                   ((uint32_t)7)                     /* Alarm B seconds mask */
#define RTC_ALRMBR_MSK1_Mask                  (((uint32_t)0x01) << 7)
#define RTC_ALRMBR_MSK1                       RTC_ALRMBR_MSK1_Mask
#define RTC_ALRMBR_ST_Pos                     ((uint32_t)4)                     /* Second tens in BCD format. */
#define RTC_ALRMBR_ST_Mask                    (((uint32_t)0x07) << 4)
#define RTC_ALRMBR_ST                         RTC_ALRMBR_ST_Mask
#define RTC_ALRMBR_ST_0                       (((uint32_t)0x1 << RTC_ALRMBR_ST_Pos))
#define RTC_ALRMBR_ST_1                       (((uint32_t)0x2 << RTC_ALRMBR_ST_Pos))
#define RTC_ALRMBR_ST_2                       (((uint32_t)0x4 << RTC_ALRMBR_ST_Pos))
#define RTC_ALRMBR_SU_Pos                     ((uint32_t)0)                     /* Second units in BCD format */
#define RTC_ALRMBR_SU_Mask                    (((uint32_t)0x0F) << 0)
#define RTC_ALRMBR_SU                         RTC_ALRMBR_SU_Mask
#define RTC_ALRMBR_SU_0                       (((uint32_t)0x1))
#define RTC_ALRMBR_SU_1                       (((uint32_t)0x2))
#define RTC_ALRMBR_SU_2                       (((uint32_t)0x4))
#define RTC_ALRMBR_SU_3                       (((uint32_t)0x8))

/************************************** RTC->WPR  ***************************************/
#define RTC_WPR_KEY_Pos                       ((uint32_t)0)                     /* Write protection key */
#define RTC_WPR_KEY_Mask                      (((uint32_t)0xFF) << 0)
#define RTC_WPR_KEY                           RTC_WPR_KEY_Mask
#define RTC_WPR_KEY_0                         (((uint32_t)0x1))
#define RTC_WPR_KEY_1                         (((uint32_t)0x2))
#define RTC_WPR_KEY_2                         (((uint32_t)0x4))
#define RTC_WPR_KEY_3                         (((uint32_t)0x8))
#define RTC_WPR_KEY_4                         (((uint32_t)0x10))
#define RTC_WPR_KEY_5                         (((uint32_t)0x20))
#define RTC_WPR_KEY_6                         (((uint32_t)0x40))
#define RTC_WPR_KEY_7                         (((uint32_t)0x80))

/************************************** RTC->SSR  ***************************************/
#define RTC_SSR_SS_Pos                        ((uint32_t)0)                     /* Sub second value */
#define RTC_SSR_SS_Mask                       (((uint32_t)0xFFFF) << 0)
#define RTC_SSR_SS                            RTC_SSR_SS_Mask

/************************************ RTC->SHIFTR  **************************************/
#define RTC_SHIFTR_ADD1S_Pos                  ((uint32_t)31)                    /* Add one second */
#define RTC_SHIFTR_ADD1S_Mask                 (((uint32_t)0x01) << 31)
#define RTC_SHIFTR_ADD1S                      RTC_SHIFTR_ADD1S_Mask
#define RTC_SHIFTR_SUBFS_Pos                  ((uint32_t)0)                     /* Subtract a fraction of a second */
#define RTC_SHIFTR_SUBFS_Mask                 (((uint32_t)0x7FFF) << 0)
#define RTC_SHIFTR_SUBFS                      RTC_SHIFTR_SUBFS_Mask
#define RTC_SHIFTR_SUBFS_0                    (((uint32_t)0x1))
#define RTC_SHIFTR_SUBFS_1                    (((uint32_t)0x2))
#define RTC_SHIFTR_SUBFS_2                    (((uint32_t)0x4))
#define RTC_SHIFTR_SUBFS_3                    (((uint32_t)0x8))
#define RTC_SHIFTR_SUBFS_4                    (((uint32_t)0x10))
#define RTC_SHIFTR_SUBFS_5                    (((uint32_t)0x20))
#define RTC_SHIFTR_SUBFS_6                    (((uint32_t)0x40))
#define RTC_SHIFTR_SUBFS_7                    (((uint32_t)0x80))
#define RTC_SHIFTR_SUBFS_8                    (((uint32_t)0x100))
#define RTC_SHIFTR_SUBFS_9                    (((uint32_t)0x200))
#define RTC_SHIFTR_SUBFS_10                   (((uint32_t)0x400))
#define RTC_SHIFTR_SUBFS_11                   (((uint32_t)0x800))
#define RTC_SHIFTR_SUBFS_12                   (((uint32_t)0x1000))
#define RTC_SHIFTR_SUBFS_13                   (((uint32_t)0x2000))
#define RTC_SHIFTR_SUBFS_14                   (((uint32_t)0x4000))

/************************************* RTC->TSTR  ***************************************/
#define RTC_TSTR_PM_Pos                       ((uint32_t)22)                    /* AM/PM notation */
#define RTC_TSTR_PM_Mask                      (((uint32_t)0x01) << 22)
#define RTC_TSTR_PM                           RTC_TSTR_PM_Mask
#define RTC_TSTR_HT_Pos                       ((uint32_t)20)                    /* Hour tens in BCD format */
#define RTC_TSTR_HT_Mask                      (((uint32_t)0x03) << 20)
#define RTC_TSTR_HT                           RTC_TSTR_HT_Mask
#define RTC_TSTR_HT_0                         (((uint32_t)0x1 << RTC_TSTR_HT_Pos))
#define RTC_TSTR_HT_1                         (((uint32_t)0x2 << RTC_TSTR_HT_Pos))
#define RTC_TSTR_HU_Pos                       ((uint32_t)16)                    /* Hour units in BCD format */
#define RTC_TSTR_HU_Mask                      (((uint32_t)0x0F) << 16)
#define RTC_TSTR_HU                           RTC_TSTR_HU_Mask
#define RTC_TSTR_HU_0                         (((uint32_t)0x1 << RTC_TSTR_HU_Pos))
#define RTC_TSTR_HU_1                         (((uint32_t)0x2 << RTC_TSTR_HU_Pos))
#define RTC_TSTR_HU_2                         (((uint32_t)0x4 << RTC_TSTR_HU_Pos))
#define RTC_TSTR_HU_3                         (((uint32_t)0x8 << RTC_TSTR_HU_Pos))
#define RTC_TSTR_MNT_Pos                      ((uint32_t)12)                    /* Minute tens in BCD format */
#define RTC_TSTR_MNT_Mask                     (((uint32_t)0x07) << 12)
#define RTC_TSTR_MNT                          RTC_TSTR_MNT_Mask
#define RTC_TSTR_MNT_0                        (((uint32_t)0x1 << RTC_TSTR_MNT_Pos))
#define RTC_TSTR_MNT_1                        (((uint32_t)0x2 << RTC_TSTR_MNT_Pos))
#define RTC_TSTR_MNT_2                        (((uint32_t)0x4 << RTC_TSTR_MNT_Pos))
#define RTC_TSTR_MNU_Pos                      ((uint32_t)8)                     /* Minute units in BCD format */
#define RTC_TSTR_MNU_Mask                     (((uint32_t)0x0F) << 8)
#define RTC_TSTR_MNU                          RTC_TSTR_MNU_Mask
#define RTC_TSTR_MNU_0                        (((uint32_t)0x1 << RTC_TSTR_MNU_Pos))
#define RTC_TSTR_MNU_1                        (((uint32_t)0x2 << RTC_TSTR_MNU_Pos))
#define RTC_TSTR_MNU_2                        (((uint32_t)0x4 << RTC_TSTR_MNU_Pos))
#define RTC_TSTR_MNU_3                        (((uint32_t)0x8 << RTC_TSTR_MNU_Pos))
#define RTC_TSTR_ST_Pos                       ((uint32_t)4)                     /* Second tens in BCD format */
#define RTC_TSTR_ST_Mask                      (((uint32_t)0x07) << 4)
#define RTC_TSTR_ST                           RTC_TSTR_ST_Mask
#define RTC_TSTR_ST_0                         (((uint32_t)0x1 << RTC_TSTR_ST_Pos))
#define RTC_TSTR_ST_1                         (((uint32_t)0x2 << RTC_TSTR_ST_Pos))
#define RTC_TSTR_ST_2                         (((uint32_t)0x4 << RTC_TSTR_ST_Pos))
#define RTC_TSTR_SU_Pos                       ((uint32_t)0)                     /* Second units in BCD format */
#define RTC_TSTR_SU_Mask                      (((uint32_t)0x0F) << 0)
#define RTC_TSTR_SU                           RTC_TSTR_SU_Mask
#define RTC_TSTR_SU_0                         (((uint32_t)0x1))
#define RTC_TSTR_SU_1                         (((uint32_t)0x2))
#define RTC_TSTR_SU_2                         (((uint32_t)0x4))
#define RTC_TSTR_SU_3                         (((uint32_t)0x8))

/************************************* RTC->TSDR  ***************************************/
#define RTC_TSDR_WDU_Pos                      ((uint32_t)13)                    /* Week day units */
#define RTC_TSDR_WDU_Mask                     (((uint32_t)0x07) << 13)
#define RTC_TSDR_WDU                          RTC_TSDR_WDU_Mask
#define RTC_TSDR_WDU_0                        (((uint32_t)0x1 << RTC_TSDR_WDU_Pos))
#define RTC_TSDR_WDU_1                        (((uint32_t)0x2 << RTC_TSDR_WDU_Pos))
#define RTC_TSDR_WDU_2                        (((uint32_t)0x4 << RTC_TSDR_WDU_Pos))
#define RTC_TSDR_MT_Pos                       ((uint32_t)12)                    /* Month tens in BCD format */
#define RTC_TSDR_MT_Mask                      (((uint32_t)0x01) << 12)
#define RTC_TSDR_MT                           RTC_TSDR_MT_Mask
#define RTC_TSDR_MU_Pos                       ((uint32_t)8)                     /* Month units in BCD format */
#define RTC_TSDR_MU_Mask                      (((uint32_t)0x0F) << 8)
#define RTC_TSDR_MU                           RTC_TSDR_MU_Mask
#define RTC_TSDR_MU_0                         (((uint32_t)0x1 << RTC_TSDR_MU_Pos))
#define RTC_TSDR_MU_1                         (((uint32_t)0x2 << RTC_TSDR_MU_Pos))
#define RTC_TSDR_MU_2                         (((uint32_t)0x4 << RTC_TSDR_MU_Pos))
#define RTC_TSDR_MU_3                         (((uint32_t)0x8 << RTC_TSDR_MU_Pos))
#define RTC_TSDR_DT_Pos                       ((uint32_t)4)                     /* Date tens in BCD format */
#define RTC_TSDR_DT_Mask                      (((uint32_t)0x03) << 4)
#define RTC_TSDR_DT                           RTC_TSDR_DT_Mask
#define RTC_TSDR_DT_0                         (((uint32_t)0x1 << RTC_TSDR_DT_Pos))
#define RTC_TSDR_DT_1                         (((uint32_t)0x2 << RTC_TSDR_DT_Pos))
#define RTC_TSDR_DU_Pos                       ((uint32_t)0)                     /* Date units in BCD format */
#define RTC_TSDR_DU_Mask                      (((uint32_t)0x0F) << 0)
#define RTC_TSDR_DU                           RTC_TSDR_DU_Mask
#define RTC_TSDR_DU_0                         (((uint32_t)0x1))
#define RTC_TSDR_DU_1                         (((uint32_t)0x2))
#define RTC_TSDR_DU_2                         (((uint32_t)0x4))
#define RTC_TSDR_DU_3                         (((uint32_t)0x8))

/************************************* RTC->TSSSR  **************************************/
#define RTC_TSSSR_SS_Pos                      ((uint32_t)0)                     /* Sub second value */
#define RTC_TSSSR_SS_Mask                     (((uint32_t)0xFFFF) << 0)
#define RTC_TSSSR_SS                          RTC_TSSSR_SS_Mask

/************************************* RTC->CALR  ***************************************/
#define RTC_CALR_CALP_Pos                     ((uint32_t)15)                    /* Increase frequency of RTC by 488.5 ppm */
#define RTC_CALR_CALP_Mask                    (((uint32_t)0x01) << 15)
#define RTC_CALR_CALP                         RTC_CALR_CALP_Mask
#define RTC_CALR_CALW8_Pos                    ((uint32_t)14)                    /* Use an 8-second calibration cycle period */
#define RTC_CALR_CALW8_Mask                   (((uint32_t)0x01) << 14)
#define RTC_CALR_CALW8                        RTC_CALR_CALW8_Mask
#define RTC_CALR_CALW16_Pos                   ((uint32_t)13)                    /* Use a 16-second calibration cycle period */
#define RTC_CALR_CALW16_Mask                  (((uint32_t)0x01) << 13)
#define RTC_CALR_CALW16                       RTC_CALR_CALW16_Mask
#define RTC_CALR_CALM_Pos                     ((uint32_t)0)                     /* Calibration minus */
#define RTC_CALR_CALM_Mask                    (((uint32_t)0x01FF) << 0)
#define RTC_CALR_CALM                         RTC_CALR_CALM_Mask
#define RTC_CALR_CALM_0                       (((uint32_t)0x1))
#define RTC_CALR_CALM_1                       (((uint32_t)0x2))
#define RTC_CALR_CALM_2                       (((uint32_t)0x4))
#define RTC_CALR_CALM_3                       (((uint32_t)0x8))
#define RTC_CALR_CALM_4                       (((uint32_t)0x10))
#define RTC_CALR_CALM_5                       (((uint32_t)0x20))
#define RTC_CALR_CALM_6                       (((uint32_t)0x40))
#define RTC_CALR_CALM_7                       (((uint32_t)0x80))
#define RTC_CALR_CALM_8                       (((uint32_t)0x100))

/************************************* RTC->TAFCR  **************************************/
#define RTC_TAFCR_PC15MODE_Pos                ((uint32_t)23)                    /* PC15 mode */
#define RTC_TAFCR_PC15MODE_Mask               (((uint32_t)0x01) << 23)
#define RTC_TAFCR_PC15MODE                    RTC_TAFCR_PC15MODE_Mask
#define RTC_TAFCR_PC15VALUE_Pos               ((uint32_t)22)                    /* PC15 value */
#define RTC_TAFCR_PC15VALUE_Mask              (((uint32_t)0x01) << 22)
#define RTC_TAFCR_PC15VALUE                   RTC_TAFCR_PC15VALUE_Mask
#define RTC_TAFCR_PC14MODE_Pos                ((uint32_t)21)                    /* PC14 mode */
#define RTC_TAFCR_PC14MODE_Mask               (((uint32_t)0x01) << 21)
#define RTC_TAFCR_PC14MODE                    RTC_TAFCR_PC14MODE_Mask
#define RTC_TAFCR_PC14VALUE_Pos               ((uint32_t)20)                    /* PC14 value */
#define RTC_TAFCR_PC14VALUE_Mask              (((uint32_t)0x01) << 20)
#define RTC_TAFCR_PC14VALUE                   RTC_TAFCR_PC14VALUE_Mask
#define RTC_TAFCR_PC13MODE_Pos                ((uint32_t)19)                    /* PC13 mode */
#define RTC_TAFCR_PC13MODE_Mask               (((uint32_t)0x01) << 19)
#define RTC_TAFCR_PC13MODE                    RTC_TAFCR_PC13MODE_Mask
#define RTC_TAFCR_PC13VALUE_Pos               ((uint32_t)18)                    /* RTC_ALARM output type/PC13 value */
#define RTC_TAFCR_PC13VALUE_Mask              (((uint32_t)0x01) << 18)
#define RTC_TAFCR_PC13VALUE                   RTC_TAFCR_PC13VALUE_Mask
#define RTC_TAFCR_TAMPPUDIS_Pos               ((uint32_t)15)                    /* RTC_TAMPx pull-up disable */
#define RTC_TAFCR_TAMPPUDIS_Mask              (((uint32_t)0x01) << 15)
#define RTC_TAFCR_TAMPPUDIS                   RTC_TAFCR_TAMPPUDIS_Mask
#define RTC_TAFCR_TAMPPRCH_Pos                ((uint32_t)13)                    /* RTC_TAMPx precharge duration */
#define RTC_TAFCR_TAMPPRCH_Mask               (((uint32_t)0x03) << 13)
#define RTC_TAFCR_TAMPPRCH                    RTC_TAFCR_TAMPPRCH_Mask
#define RTC_TAFCR_TAMPPRCH_0                  (((uint32_t)0x1 << RTC_TAFCR_TAMPPRCH_Pos))
#define RTC_TAFCR_TAMPPRCH_1                  (((uint32_t)0x2 << RTC_TAFCR_TAMPPRCH_Pos))
#define RTC_TAFCR_TAMPFLT_Pos                 ((uint32_t)11)                    /* RTC_TAMPx filter count */
#define RTC_TAFCR_TAMPFLT_Mask                (((uint32_t)0x03) << 11)
#define RTC_TAFCR_TAMPFLT                     RTC_TAFCR_TAMPFLT_Mask
#define RTC_TAFCR_TAMPFLT_0                   (((uint32_t)0x1 << RTC_TAFCR_TAMPFLT_Pos))
#define RTC_TAFCR_TAMPFLT_1                   (((uint32_t)0x2 << RTC_TAFCR_TAMPFLT_Pos))
#define RTC_TAFCR_TAMPFREQ_Pos                ((uint32_t)8)                     /* Tamper sampling frequency */
#define RTC_TAFCR_TAMPFREQ_Mask               (((uint32_t)0x07) << 8)
#define RTC_TAFCR_TAMPFREQ                    RTC_TAFCR_TAMPFREQ_Mask
#define RTC_TAFCR_TAMPFREQ_0                  (((uint32_t)0x1 << RTC_TAFCR_TAMPFREQ_Pos))
#define RTC_TAFCR_TAMPFREQ_1                  (((uint32_t)0x2 << RTC_TAFCR_TAMPFREQ_Pos))
#define RTC_TAFCR_TAMPFREQ_2                  (((uint32_t)0x4 << RTC_TAFCR_TAMPFREQ_Pos))
#define RTC_TAFCR_TAMPTS_Pos                  ((uint32_t)7)                     /* Activate timestamp on tamper detection event */
#define RTC_TAFCR_TAMPTS_Mask                 (((uint32_t)0x01) << 7)
#define RTC_TAFCR_TAMPTS                      RTC_TAFCR_TAMPTS_Mask
#define RTC_TAFCR_TAMP2TRG_Pos                ((uint32_t)4)                     /* Active level for RTC_TAMP2 input */
#define RTC_TAFCR_TAMP2TRG_Mask               (((uint32_t)0x01) << 4)
#define RTC_TAFCR_TAMP2TRG                    RTC_TAFCR_TAMP2TRG_Mask
#define RTC_TAFCR_TAMP2E_Pos                  ((uint32_t)3)                     /* RTC_TAMP2 input detection enable */
#define RTC_TAFCR_TAMP2E_Mask                 (((uint32_t)0x01) << 3)
#define RTC_TAFCR_TAMP2E                      RTC_TAFCR_TAMP2E_Mask
#define RTC_TAFCR_TAMPIE_Pos                  ((uint32_t)2)                     /* Tamper interrupt enable */
#define RTC_TAFCR_TAMPIE_Mask                 (((uint32_t)0x01) << 2)
#define RTC_TAFCR_TAMPIE                      RTC_TAFCR_TAMPIE_Mask
#define RTC_TAFCR_TAMP1TRG_Pos                ((uint32_t)1)                     /* Active level for RTC_TAMP1 input */
#define RTC_TAFCR_TAMP1TRG_Mask               (((uint32_t)0x01) << 1)
#define RTC_TAFCR_TAMP1TRG                    RTC_TAFCR_TAMP1TRG_Mask
#define RTC_TAFCR_TAMP1E_Pos                  ((uint32_t)0)                     /* RTC_TAMP1 input detection enable */
#define RTC_TAFCR_TAMP1E_Mask                 (((uint32_t)0x01) << 0)
#define RTC_TAFCR_TAMP1E                      RTC_TAFCR_TAMP1E_Mask

/*********************************** RTC->ALRMASSR  *************************************/
#define RTC_ALRMASSR_MASKSS_Pos               ((uint32_t)24)                    /* Mask the most-significant bits starting at this bit */
#define RTC_ALRMASSR_MASKSS_Mask              (((uint32_t)0x0F) << 24)
#define RTC_ALRMASSR_MASKSS                   RTC_ALRMASSR_MASKSS_Mask
#define RTC_ALRMASSR_MASKSS_0                 (((uint32_t)0x1 << RTC_ALRMASSR_MASKSS_Pos))
#define RTC_ALRMASSR_MASKSS_1                 (((uint32_t)0x2 << RTC_ALRMASSR_MASKSS_Pos))
#define RTC_ALRMASSR_MASKSS_2                 (((uint32_t)0x4 << RTC_ALRMASSR_MASKSS_Pos))
#define RTC_ALRMASSR_MASKSS_3                 (((uint32_t)0x8 << RTC_ALRMASSR_MASKSS_Pos))
#define RTC_ALRMASSR_SS_Pos                   ((uint32_t)0)                     /* Sub seconds value */
#define RTC_ALRMASSR_SS_Mask                  (((uint32_t)0x7FFF) << 0)
#define RTC_ALRMASSR_SS                       RTC_ALRMASSR_SS_Mask
#define RTC_ALRMASSR_SS_0                     (((uint32_t)0x1))
#define RTC_ALRMASSR_SS_1                     (((uint32_t)0x2))
#define RTC_ALRMASSR_SS_2                     (((uint32_t)0x4))
#define RTC_ALRMASSR_SS_3                     (((uint32_t)0x8))
#define RTC_ALRMASSR_SS_4                     (((uint32_t)0x10))
#define RTC_ALRMASSR_SS_5                     (((uint32_t)0x20))
#define RTC_ALRMASSR_SS_6                     (((uint32_t)0x40))
#define RTC_ALRMASSR_SS_7                     (((uint32_t)0x80))
#define RTC_ALRMASSR_SS_8                     (((uint32_t)0x100))
#define RTC_ALRMASSR_SS_9                     (((uint32_t)0x200))
#define RTC_ALRMASSR_SS_10                    (((uint32_t)0x400))
#define RTC_ALRMASSR_SS_11                    (((uint32_t)0x800))
#define RTC_ALRMASSR_SS_12                    (((uint32_t)0x1000))
#define RTC_ALRMASSR_SS_13                    (((uint32_t)0x2000))
#define RTC_ALRMASSR_SS_14                    (((uint32_t)0x4000))

/*********************************** RTC->ALRMBSSR  *************************************/
#define RTC_ALRMBSSR_MASKSS_Pos               ((uint32_t)24)                    /* Mask the most-significant bits starting at this bit */
#define RTC_ALRMBSSR_MASKSS_Mask              (((uint32_t)0x0F) << 24)
#define RTC_ALRMBSSR_MASKSS                   RTC_ALRMBSSR_MASKSS_Mask
#define RTC_ALRMBSSR_MASKSS_0                 (((uint32_t)0x1 << RTC_ALRMBSSR_MASKSS_Pos))
#define RTC_ALRMBSSR_MASKSS_1                 (((uint32_t)0x2 << RTC_ALRMBSSR_MASKSS_Pos))
#define RTC_ALRMBSSR_MASKSS_2                 (((uint32_t)0x4 << RTC_ALRMBSSR_MASKSS_Pos))
#define RTC_ALRMBSSR_MASKSS_3                 (((uint32_t)0x8 << RTC_ALRMBSSR_MASKSS_Pos))
#define RTC_ALRMBSSR_SS_Pos                   ((uint32_t)0)                     /* Sub seconds value */
#define RTC_ALRMBSSR_SS_Mask                  (((uint32_t)0x7FFF) << 0)
#define RTC_ALRMBSSR_SS                       RTC_ALRMBSSR_SS_Mask
#define RTC_ALRMBSSR_SS_0                     (((uint32_t)0x1))
#define RTC_ALRMBSSR_SS_1                     (((uint32_t)0x2))
#define RTC_ALRMBSSR_SS_2                     (((uint32_t)0x4))
#define RTC_ALRMBSSR_SS_3                     (((uint32_t)0x8))
#define RTC_ALRMBSSR_SS_4                     (((uint32_t)0x10))
#define RTC_ALRMBSSR_SS_5                     (((uint32_t)0x20))
#define RTC_ALRMBSSR_SS_6                     (((uint32_t)0x40))
#define RTC_ALRMBSSR_SS_7                     (((uint32_t)0x80))
#define RTC_ALRMBSSR_SS_8                     (((uint32_t)0x100))
#define RTC_ALRMBSSR_SS_9                     (((uint32_t)0x200))
#define RTC_ALRMBSSR_SS_10                    (((uint32_t)0x400))
#define RTC_ALRMBSSR_SS_11                    (((uint32_t)0x800))
#define RTC_ALRMBSSR_SS_12                    (((uint32_t)0x1000))
#define RTC_ALRMBSSR_SS_13                    (((uint32_t)0x2000))
#define RTC_ALRMBSSR_SS_14                    (((uint32_t)0x4000))

/************************************** RTC->OR  ****************************************/
#define RTC_OR_WUTO_Pos                       ((uint32_t)28)                    /* Wakeup timer output enable */
#define RTC_OR_WUTO_Mask                      (((uint32_t)0x0F) << 28)
#define RTC_OR_WUTO                           RTC_OR_WUTO_Mask
#define RTC_OR_WUTO_0                         (((uint32_t)0x1 << RTC_OR_WUTO_Pos))
#define RTC_OR_WUTO_1                         (((uint32_t)0x2 << RTC_OR_WUTO_Pos))
#define RTC_OR_WUTO_2                         (((uint32_t)0x4 << RTC_OR_WUTO_Pos))
#define RTC_OR_WUTO_3                         (((uint32_t)0x8 << RTC_OR_WUTO_Pos))
#define RTC_OR_PC13_PU_Pos                    ((uint32_t)19)                    /* PC13 pull-up output */
#define RTC_OR_PC13_PU_Mask                   (((uint32_t)0x01) << 19)
#define RTC_OR_PC13_PU                        RTC_OR_PC13_PU_Mask
#define RTC_OR_PC13_OD_Pos                    ((uint32_t)18)                    /* PC13 open drain output */
#define RTC_OR_PC13_OD_Mask                   (((uint32_t)0x01) << 18)
#define RTC_OR_PC13_OD                        RTC_OR_PC13_OD_Mask
#define RTC_OR_PC13_PD_Pos                    ((uint32_t)17)                    /* PC13 pull-down output */
#define RTC_OR_PC13_PD_Mask                   (((uint32_t)0x01) << 17)
#define RTC_OR_PC13_PD                        RTC_OR_PC13_PD_Mask
#define RTC_OR_PC13_OS_Pos                    ((uint32_t)16)                    /* PC13 open source output */
#define RTC_OR_PC13_OS_Mask                   (((uint32_t)0x01) << 16)
#define RTC_OR_PC13_OS                        RTC_OR_PC13_OS_Mask
#define RTC_OR_ALRM_TYPE_Pos                  ((uint32_t)0)                     /* PC13 output mode selection */
#define RTC_OR_ALRM_TYPE_Mask                 (((uint32_t)0x01) << 0)
#define RTC_OR_ALRM_TYPE                      RTC_OR_ALRM_TYPE_Mask

/************************************* RTC->BKP0R  **************************************/
#define RTC_BKP0R_BKP_Pos                     ((uint32_t)0)                     /* The application can write or read data to and from these registers */
#define RTC_BKP0R_BKP_Mask                    (((uint32_t)0xFFFFFFFF) << 0)
#define RTC_BKP0R_BKP                         RTC_BKP0R_BKP_Mask

/************************************* RTC->BKP1R  **************************************/
#define RTC_BKP1R_BKP_Pos                     ((uint32_t)0)                     /* The application can write or read data to and from these registers */
#define RTC_BKP1R_BKP_Mask                    (((uint32_t)0xFFFFFFFF) << 0)
#define RTC_BKP1R_BKP                         RTC_BKP1R_BKP_Mask

/************************************* RTC->BKP2R  **************************************/
#define RTC_BKP2R_BKP_Pos                     ((uint32_t)0)                     /* The application can write or read data to and from these registers */
#define RTC_BKP2R_BKP_Mask                    (((uint32_t)0xFFFFFFFF) << 0)
#define RTC_BKP2R_BKP                         RTC_BKP2R_BKP_Mask

/************************************* RTC->BKP3R  **************************************/
#define RTC_BKP3R_BKP_Pos                     ((uint32_t)0)                     /* The application can write or read data to and from these registers */
#define RTC_BKP3R_BKP_Mask                    (((uint32_t)0xFFFFFFFF) << 0)
#define RTC_BKP3R_BKP                         RTC_BKP3R_BKP_Mask

/************************************* RTC->BKP4R  **************************************/
#define RTC_BKP4R_BKP_Pos                     ((uint32_t)0)                     /* The application can write or read data to and from these registers */
#define RTC_BKP4R_BKP_Mask                    (((uint32_t)0xFFFFFFFF) << 0)
#define RTC_BKP4R_BKP                         RTC_BKP4R_BKP_Mask

/*****************************************************************************************
*                                     Peripheral I2C                                     *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t CR1;                    /* CR1 */
    __IO uint32_t CR2;                    /* CR2 */
    __IO uint32_t OAR1;                   /* OAR1 */
    __IO uint32_t OAR2;                   /* OAR2 */
    __IO uint32_t TIMINGR;                /* TIMINGR */
    __IO uint32_t TIMEOUTR;               /* TIMEOUTR */
    __IO uint32_t ISR;                    /* ISR */
    __O  uint32_t ICR;                    /* ICR */
    __I  uint32_t PECR;                   /* PECR */
    __I  uint32_t RXDR;                   /* RXDR */
    __IO uint32_t TXDR;                   /* TXDR */
} I2C_TypeDef;

/************************************** I2C->CR1  ***************************************/
#define I2C_CR1_SWAP_Pos                      ((uint32_t)31)                    /* Exchange SDA/SCL pin */
#define I2C_CR1_SWAP_Mask                     (((uint32_t)0x01) << 31)
#define I2C_CR1_SWAP                          I2C_CR1_SWAP_Mask
#define I2C_CR1_PECEN_Pos                     ((uint32_t)23)                    /* PEC enable */
#define I2C_CR1_PECEN_Mask                    (((uint32_t)0x01) << 23)
#define I2C_CR1_PECEN                         I2C_CR1_PECEN_Mask
#define I2C_CR1_ALERTEN_Pos                   ((uint32_t)22)                    /* SMBus alert enable */
#define I2C_CR1_ALERTEN_Mask                  (((uint32_t)0x01) << 22)
#define I2C_CR1_ALERTEN                       I2C_CR1_ALERTEN_Mask
#define I2C_CR1_SMBDEN_Pos                    ((uint32_t)21)                    /* SMBus Device Default address enable */
#define I2C_CR1_SMBDEN_Mask                   (((uint32_t)0x01) << 21)
#define I2C_CR1_SMBDEN                        I2C_CR1_SMBDEN_Mask
#define I2C_CR1_SMBHEN_Pos                    ((uint32_t)20)                    /* SMBus Host address enable */
#define I2C_CR1_SMBHEN_Mask                   (((uint32_t)0x01) << 20)
#define I2C_CR1_SMBHEN                        I2C_CR1_SMBHEN_Mask
#define I2C_CR1_GCEN_Pos                      ((uint32_t)19)                    /* General call enable */
#define I2C_CR1_GCEN_Mask                     (((uint32_t)0x01) << 19)
#define I2C_CR1_GCEN                          I2C_CR1_GCEN_Mask
#define I2C_CR1_WUPEN_Pos                     ((uint32_t)18)                    /* Wakeup from Stop mode enable */
#define I2C_CR1_WUPEN_Mask                    (((uint32_t)0x01) << 18)
#define I2C_CR1_WUPEN                         I2C_CR1_WUPEN_Mask
#define I2C_CR1_NOSTRETCH_Pos                 ((uint32_t)17)                    /* Clock stretching disable */
#define I2C_CR1_NOSTRETCH_Mask                (((uint32_t)0x01) << 17)
#define I2C_CR1_NOSTRETCH                     I2C_CR1_NOSTRETCH_Mask
#define I2C_CR1_SBC_Pos                       ((uint32_t)16)                    /* Slave byte control */
#define I2C_CR1_SBC_Mask                      (((uint32_t)0x01) << 16)
#define I2C_CR1_SBC                           I2C_CR1_SBC_Mask
#define I2C_CR1_RXDMAEN_Pos                   ((uint32_t)15)                    /* DMA reception requests enable */
#define I2C_CR1_RXDMAEN_Mask                  (((uint32_t)0x01) << 15)
#define I2C_CR1_RXDMAEN                       I2C_CR1_RXDMAEN_Mask
#define I2C_CR1_TXDMAEN_Pos                   ((uint32_t)14)                    /* DMA transmission requests enable */
#define I2C_CR1_TXDMAEN_Mask                  (((uint32_t)0x01) << 14)
#define I2C_CR1_TXDMAEN                       I2C_CR1_TXDMAEN_Mask
#define I2C_CR1_ANFOFF_Pos                    ((uint32_t)12)                    /* Analog noise filter OFF */
#define I2C_CR1_ANFOFF_Mask                   (((uint32_t)0x01) << 12)
#define I2C_CR1_ANFOFF                        I2C_CR1_ANFOFF_Mask
#define I2C_CR1_DNF_Pos                       ((uint32_t)8)                     /* Digital noise filter */
#define I2C_CR1_DNF_Mask                      (((uint32_t)0x0F) << 8)
#define I2C_CR1_DNF                           I2C_CR1_DNF_Mask
#define I2C_CR1_DNF_0                         (((uint32_t)0x1 << I2C_CR1_DNF_Pos))
#define I2C_CR1_DNF_1                         (((uint32_t)0x2 << I2C_CR1_DNF_Pos))
#define I2C_CR1_DNF_2                         (((uint32_t)0x4 << I2C_CR1_DNF_Pos))
#define I2C_CR1_DNF_3                         (((uint32_t)0x8 << I2C_CR1_DNF_Pos))
#define I2C_CR1_ERRIE_Pos                     ((uint32_t)7)                     /* Error interrupts enable */
#define I2C_CR1_ERRIE_Mask                    (((uint32_t)0x01) << 7)
#define I2C_CR1_ERRIE                         I2C_CR1_ERRIE_Mask
#define I2C_CR1_TCIE_Pos                      ((uint32_t)6)                     /* Transfer Complete interrupt enable */
#define I2C_CR1_TCIE_Mask                     (((uint32_t)0x01) << 6)
#define I2C_CR1_TCIE                          I2C_CR1_TCIE_Mask
#define I2C_CR1_STOPIE_Pos                    ((uint32_t)5)                     /* STOP detection Interrupt enable */
#define I2C_CR1_STOPIE_Mask                   (((uint32_t)0x01) << 5)
#define I2C_CR1_STOPIE                        I2C_CR1_STOPIE_Mask
#define I2C_CR1_NACKIE_Pos                    ((uint32_t)4)                     /* Not acknowledge received Interrupt enable */
#define I2C_CR1_NACKIE_Mask                   (((uint32_t)0x01) << 4)
#define I2C_CR1_NACKIE                        I2C_CR1_NACKIE_Mask
#define I2C_CR1_ADDRIE_Pos                    ((uint32_t)3)                     /* Address match Interrupt enable of slave only */
#define I2C_CR1_ADDRIE_Mask                   (((uint32_t)0x01) << 3)
#define I2C_CR1_ADDRIE                        I2C_CR1_ADDRIE_Mask
#define I2C_CR1_RXIE_Pos                      ((uint32_t)2)                     /* RX Interrupt enable */
#define I2C_CR1_RXIE_Mask                     (((uint32_t)0x01) << 2)
#define I2C_CR1_RXIE                          I2C_CR1_RXIE_Mask
#define I2C_CR1_TXIE_Pos                      ((uint32_t)1)                     /* TX Interrupt enable */
#define I2C_CR1_TXIE_Mask                     (((uint32_t)0x01) << 1)
#define I2C_CR1_TXIE                          I2C_CR1_TXIE_Mask
#define I2C_CR1_PE_Pos                        ((uint32_t)0)                     /* Peripheral enable */
#define I2C_CR1_PE_Mask                       (((uint32_t)0x01) << 0)
#define I2C_CR1_PE                            I2C_CR1_PE_Mask

/************************************** I2C->CR2  ***************************************/
#define I2C_CR2_PECBYTE_Pos                   ((uint32_t)26)                    /* Packet error checking byte */
#define I2C_CR2_PECBYTE_Mask                  (((uint32_t)0x01) << 26)
#define I2C_CR2_PECBYTE                       I2C_CR2_PECBYTE_Mask
#define I2C_CR2_AUTOEND_Pos                   ((uint32_t)25)                    /* Automatic end mode of master mode */
#define I2C_CR2_AUTOEND_Mask                  (((uint32_t)0x01) << 25)
#define I2C_CR2_AUTOEND                       I2C_CR2_AUTOEND_Mask
#define I2C_CR2_RELOAD_Pos                    ((uint32_t)24)                    /* NBYTES reload mode */
#define I2C_CR2_RELOAD_Mask                   (((uint32_t)0x01) << 24)
#define I2C_CR2_RELOAD                        I2C_CR2_RELOAD_Mask
#define I2C_CR2_NBYTES_Pos                    ((uint32_t)16)                    /* Number of bytes */
#define I2C_CR2_NBYTES_Mask                   (((uint32_t)0xFF) << 16)
#define I2C_CR2_NBYTES                        I2C_CR2_NBYTES_Mask
#define I2C_CR2_NBYTES_0                      (((uint32_t)0x1 << I2C_CR2_NBYTES_Pos))
#define I2C_CR2_NBYTES_1                      (((uint32_t)0x2 << I2C_CR2_NBYTES_Pos))
#define I2C_CR2_NBYTES_2                      (((uint32_t)0x4 << I2C_CR2_NBYTES_Pos))
#define I2C_CR2_NBYTES_3                      (((uint32_t)0x8 << I2C_CR2_NBYTES_Pos))
#define I2C_CR2_NBYTES_4                      (((uint32_t)0x10 << I2C_CR2_NBYTES_Pos))
#define I2C_CR2_NBYTES_5                      (((uint32_t)0x20 << I2C_CR2_NBYTES_Pos))
#define I2C_CR2_NBYTES_6                      (((uint32_t)0x40 << I2C_CR2_NBYTES_Pos))
#define I2C_CR2_NBYTES_7                      (((uint32_t)0x80 << I2C_CR2_NBYTES_Pos))
#define I2C_CR2_NACK_Pos                      ((uint32_t)15)                    /* NACK generation of slave mode */
#define I2C_CR2_NACK_Mask                     (((uint32_t)0x01) << 15)
#define I2C_CR2_NACK                          I2C_CR2_NACK_Mask
#define I2C_CR2_STOP_Pos                      ((uint32_t)14)                    /* STOP generation of master mode */
#define I2C_CR2_STOP_Mask                     (((uint32_t)0x01) << 14)
#define I2C_CR2_STOP                          I2C_CR2_STOP_Mask
#define I2C_CR2_START_Pos                     ((uint32_t)13)                    /* Start generation */
#define I2C_CR2_START_Mask                    (((uint32_t)0x01) << 13)
#define I2C_CR2_START                         I2C_CR2_START_Mask
#define I2C_CR2_HEAD10R_Pos                   ((uint32_t)12)                    /* 10-bit address header only read direction of master receiver mode */
#define I2C_CR2_HEAD10R_Mask                  (((uint32_t)0x01) << 12)
#define I2C_CR2_HEAD10R                       I2C_CR2_HEAD10R_Mask
#define I2C_CR2_ADD10_Pos                     ((uint32_t)11)                    /* 10-bit addressing mode of master mode */
#define I2C_CR2_ADD10_Mask                    (((uint32_t)0x01) << 11)
#define I2C_CR2_ADD10                         I2C_CR2_ADD10_Mask
#define I2C_CR2_RD_WRN_Pos                    ((uint32_t)10)                    /* Transfer direction of master mode */
#define I2C_CR2_RD_WRN_Mask                   (((uint32_t)0x01) << 10)
#define I2C_CR2_RD_WRN                        I2C_CR2_RD_WRN_Mask
#define I2C_CR2_SADD_Pos                      ((uint32_t)0)                     /* Slave address bit 9:0 */
#define I2C_CR2_SADD_Mask                     (((uint32_t)0x03FF) << 0)
#define I2C_CR2_SADD                          I2C_CR2_SADD_Mask
#define I2C_CR2_SADD_0                        (((uint32_t)0x1))
#define I2C_CR2_SADD_1                        (((uint32_t)0x2))
#define I2C_CR2_SADD_2                        (((uint32_t)0x4))
#define I2C_CR2_SADD_3                        (((uint32_t)0x8))
#define I2C_CR2_SADD_4                        (((uint32_t)0x10))
#define I2C_CR2_SADD_5                        (((uint32_t)0x20))
#define I2C_CR2_SADD_6                        (((uint32_t)0x40))
#define I2C_CR2_SADD_7                        (((uint32_t)0x80))
#define I2C_CR2_SADD_8                        (((uint32_t)0x100))
#define I2C_CR2_SADD_9                        (((uint32_t)0x200))

/************************************* I2C->OAR1  ***************************************/
#define I2C_OAR1_OA1EN_Pos                    ((uint32_t)15)                    /* Own Address 1 enable */
#define I2C_OAR1_OA1EN_Mask                   (((uint32_t)0x01) << 15)
#define I2C_OAR1_OA1EN                        I2C_OAR1_OA1EN_Mask
#define I2C_OAR1_OA1MODE_Pos                  ((uint32_t)10)                    /* Own Address 1 10-bit mode */
#define I2C_OAR1_OA1MODE_Mask                 (((uint32_t)0x01) << 10)
#define I2C_OAR1_OA1MODE                      I2C_OAR1_OA1MODE_Mask
#define I2C_OAR1_OA1_Pos                      ((uint32_t)0)                     /* Interface address 9:0 bit */
#define I2C_OAR1_OA1_Mask                     (((uint32_t)0x03FF) << 0)
#define I2C_OAR1_OA1                          I2C_OAR1_OA1_Mask
#define I2C_OAR1_OA1_0                        (((uint32_t)0x1))
#define I2C_OAR1_OA1_1                        (((uint32_t)0x2))
#define I2C_OAR1_OA1_2                        (((uint32_t)0x4))
#define I2C_OAR1_OA1_3                        (((uint32_t)0x8))
#define I2C_OAR1_OA1_4                        (((uint32_t)0x10))
#define I2C_OAR1_OA1_5                        (((uint32_t)0x20))
#define I2C_OAR1_OA1_6                        (((uint32_t)0x40))
#define I2C_OAR1_OA1_7                        (((uint32_t)0x80))
#define I2C_OAR1_OA1_8                        (((uint32_t)0x100))
#define I2C_OAR1_OA1_9                        (((uint32_t)0x200))

/************************************* I2C->OAR2  ***************************************/
#define I2C_OAR2_OA2EN_Pos                    ((uint32_t)15)                    /* Own Address 2 enable */
#define I2C_OAR2_OA2EN_Mask                   (((uint32_t)0x01) << 15)
#define I2C_OAR2_OA2EN                        I2C_OAR2_OA2EN_Mask
#define I2C_OAR2_OA2MSK_Pos                   ((uint32_t)8)                     /* Own Address 2 masks */
#define I2C_OAR2_OA2MSK_Mask                  (((uint32_t)0x07) << 8)
#define I2C_OAR2_OA2MSK                       I2C_OAR2_OA2MSK_Mask
#define I2C_OAR2_OA2MSK_0                     (((uint32_t)0x1 << I2C_OAR2_OA2MSK_Pos))
#define I2C_OAR2_OA2MSK_1                     (((uint32_t)0x2 << I2C_OAR2_OA2MSK_Pos))
#define I2C_OAR2_OA2MSK_2                     (((uint32_t)0x4 << I2C_OAR2_OA2MSK_Pos))
#define I2C_OAR2_OA2_Pos                      ((uint32_t)1)                     /* Interface address */
#define I2C_OAR2_OA2_Mask                     (((uint32_t)0x7F) << 1)
#define I2C_OAR2_OA2                          I2C_OAR2_OA2_Mask
#define I2C_OAR2_OA2_0                        (((uint32_t)0x1 << I2C_OAR2_OA2_Pos))
#define I2C_OAR2_OA2_1                        (((uint32_t)0x2 << I2C_OAR2_OA2_Pos))
#define I2C_OAR2_OA2_2                        (((uint32_t)0x4 << I2C_OAR2_OA2_Pos))
#define I2C_OAR2_OA2_3                        (((uint32_t)0x8 << I2C_OAR2_OA2_Pos))
#define I2C_OAR2_OA2_4                        (((uint32_t)0x10 << I2C_OAR2_OA2_Pos))
#define I2C_OAR2_OA2_5                        (((uint32_t)0x20 << I2C_OAR2_OA2_Pos))
#define I2C_OAR2_OA2_6                        (((uint32_t)0x40 << I2C_OAR2_OA2_Pos))

/************************************ I2C->TIMINGR  *************************************/
#define I2C_TIMINGR_PRESC_Pos                 ((uint32_t)28)                    /* Timing prescaler */
#define I2C_TIMINGR_PRESC_Mask                (((uint32_t)0x0F) << 28)
#define I2C_TIMINGR_PRESC                     I2C_TIMINGR_PRESC_Mask
#define I2C_TIMINGR_PRESC_0                   (((uint32_t)0x1 << I2C_TIMINGR_PRESC_Pos))
#define I2C_TIMINGR_PRESC_1                   (((uint32_t)0x2 << I2C_TIMINGR_PRESC_Pos))
#define I2C_TIMINGR_PRESC_2                   (((uint32_t)0x4 << I2C_TIMINGR_PRESC_Pos))
#define I2C_TIMINGR_PRESC_3                   (((uint32_t)0x8 << I2C_TIMINGR_PRESC_Pos))
#define I2C_TIMINGR_SCLDEL_Pos                ((uint32_t)20)                    /* Data setup time */
#define I2C_TIMINGR_SCLDEL_Mask               (((uint32_t)0x0F) << 20)
#define I2C_TIMINGR_SCLDEL                    I2C_TIMINGR_SCLDEL_Mask
#define I2C_TIMINGR_SCLDEL_0                  (((uint32_t)0x1 << I2C_TIMINGR_SCLDEL_Pos))
#define I2C_TIMINGR_SCLDEL_1                  (((uint32_t)0x2 << I2C_TIMINGR_SCLDEL_Pos))
#define I2C_TIMINGR_SCLDEL_2                  (((uint32_t)0x4 << I2C_TIMINGR_SCLDEL_Pos))
#define I2C_TIMINGR_SCLDEL_3                  (((uint32_t)0x8 << I2C_TIMINGR_SCLDEL_Pos))
#define I2C_TIMINGR_SDADEL_Pos                ((uint32_t)16)                    /* Data hold time */
#define I2C_TIMINGR_SDADEL_Mask               (((uint32_t)0x0F) << 16)
#define I2C_TIMINGR_SDADEL                    I2C_TIMINGR_SDADEL_Mask
#define I2C_TIMINGR_SDADEL_0                  (((uint32_t)0x1 << I2C_TIMINGR_SDADEL_Pos))
#define I2C_TIMINGR_SDADEL_1                  (((uint32_t)0x2 << I2C_TIMINGR_SDADEL_Pos))
#define I2C_TIMINGR_SDADEL_2                  (((uint32_t)0x4 << I2C_TIMINGR_SDADEL_Pos))
#define I2C_TIMINGR_SDADEL_3                  (((uint32_t)0x8 << I2C_TIMINGR_SDADEL_Pos))
#define I2C_TIMINGR_SCLH_Pos                  ((uint32_t)8)                     /* SCL high period of master mode */
#define I2C_TIMINGR_SCLH_Mask                 (((uint32_t)0xFF) << 8)
#define I2C_TIMINGR_SCLH                      I2C_TIMINGR_SCLH_Mask
#define I2C_TIMINGR_SCLH_0                    (((uint32_t)0x1 << I2C_TIMINGR_SCLH_Pos))
#define I2C_TIMINGR_SCLH_1                    (((uint32_t)0x2 << I2C_TIMINGR_SCLH_Pos))
#define I2C_TIMINGR_SCLH_2                    (((uint32_t)0x4 << I2C_TIMINGR_SCLH_Pos))
#define I2C_TIMINGR_SCLH_3                    (((uint32_t)0x8 << I2C_TIMINGR_SCLH_Pos))
#define I2C_TIMINGR_SCLH_4                    (((uint32_t)0x10 << I2C_TIMINGR_SCLH_Pos))
#define I2C_TIMINGR_SCLH_5                    (((uint32_t)0x20 << I2C_TIMINGR_SCLH_Pos))
#define I2C_TIMINGR_SCLH_6                    (((uint32_t)0x40 << I2C_TIMINGR_SCLH_Pos))
#define I2C_TIMINGR_SCLH_7                    (((uint32_t)0x80 << I2C_TIMINGR_SCLH_Pos))
#define I2C_TIMINGR_SCLL_Pos                  ((uint32_t)0)                     /* SCL low period of master mode */
#define I2C_TIMINGR_SCLL_Mask                 (((uint32_t)0xFF) << 0)
#define I2C_TIMINGR_SCLL                      I2C_TIMINGR_SCLL_Mask
#define I2C_TIMINGR_SCLL_0                    (((uint32_t)0x1))
#define I2C_TIMINGR_SCLL_1                    (((uint32_t)0x2))
#define I2C_TIMINGR_SCLL_2                    (((uint32_t)0x4))
#define I2C_TIMINGR_SCLL_3                    (((uint32_t)0x8))
#define I2C_TIMINGR_SCLL_4                    (((uint32_t)0x10))
#define I2C_TIMINGR_SCLL_5                    (((uint32_t)0x20))
#define I2C_TIMINGR_SCLL_6                    (((uint32_t)0x40))
#define I2C_TIMINGR_SCLL_7                    (((uint32_t)0x80))

/*********************************** I2C->TIMEOUTR  *************************************/
#define I2C_TIMEOUTR_TEXTEN_Pos               ((uint32_t)31)                    /* Extended clock timeout enable */
#define I2C_TIMEOUTR_TEXTEN_Mask              (((uint32_t)0x01) << 31)
#define I2C_TIMEOUTR_TEXTEN                   I2C_TIMEOUTR_TEXTEN_Mask
#define I2C_TIMEOUTR_TIMEOUTB_Pos             ((uint32_t)16)                    /* Bus timeout B */
#define I2C_TIMEOUTR_TIMEOUTB_Mask            (((uint32_t)0x0FFF) << 16)
#define I2C_TIMEOUTR_TIMEOUTB                 I2C_TIMEOUTR_TIMEOUTB_Mask
#define I2C_TIMEOUTR_TIMEOUTB_0               (((uint32_t)0x1 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_1               (((uint32_t)0x2 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_2               (((uint32_t)0x4 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_3               (((uint32_t)0x8 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_4               (((uint32_t)0x10 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_5               (((uint32_t)0x20 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_6               (((uint32_t)0x40 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_7               (((uint32_t)0x80 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_8               (((uint32_t)0x100 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_9               (((uint32_t)0x200 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_10              (((uint32_t)0x400 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTB_11              (((uint32_t)0x800 << I2C_TIMEOUTR_TIMEOUTB_Pos))
#define I2C_TIMEOUTR_TIMEOUTEN_Pos            ((uint32_t)15)                    /* Clock timeout enable */
#define I2C_TIMEOUTR_TIMEOUTEN_Mask           (((uint32_t)0x01) << 15)
#define I2C_TIMEOUTR_TIMEOUTEN                I2C_TIMEOUTR_TIMEOUTEN_Mask
#define I2C_TIMEOUTR_TIDLE_Pos                ((uint32_t)12)                    /* Idle clock timeout detection */
#define I2C_TIMEOUTR_TIDLE_Mask               (((uint32_t)0x01) << 12)
#define I2C_TIMEOUTR_TIDLE                    I2C_TIMEOUTR_TIDLE_Mask
#define I2C_TIMEOUTR_TIMEOUTA_Pos             ((uint32_t)0)                     /* Bus Timeout A */
#define I2C_TIMEOUTR_TIMEOUTA_Mask            (((uint32_t)0x0FFF) << 0)
#define I2C_TIMEOUTR_TIMEOUTA                 I2C_TIMEOUTR_TIMEOUTA_Mask
#define I2C_TIMEOUTR_TIMEOUTA_0               (((uint32_t)0x1))
#define I2C_TIMEOUTR_TIMEOUTA_1               (((uint32_t)0x2))
#define I2C_TIMEOUTR_TIMEOUTA_2               (((uint32_t)0x4))
#define I2C_TIMEOUTR_TIMEOUTA_3               (((uint32_t)0x8))
#define I2C_TIMEOUTR_TIMEOUTA_4               (((uint32_t)0x10))
#define I2C_TIMEOUTR_TIMEOUTA_5               (((uint32_t)0x20))
#define I2C_TIMEOUTR_TIMEOUTA_6               (((uint32_t)0x40))
#define I2C_TIMEOUTR_TIMEOUTA_7               (((uint32_t)0x80))
#define I2C_TIMEOUTR_TIMEOUTA_8               (((uint32_t)0x100))
#define I2C_TIMEOUTR_TIMEOUTA_9               (((uint32_t)0x200))
#define I2C_TIMEOUTR_TIMEOUTA_10              (((uint32_t)0x400))
#define I2C_TIMEOUTR_TIMEOUTA_11              (((uint32_t)0x800))

/************************************** I2C->ISR  ***************************************/
#define I2C_ISR_ADDCODE_Pos                   ((uint32_t)17)                    /* Address match code of Slave mode */
#define I2C_ISR_ADDCODE_Mask                  (((uint32_t)0x7F) << 17)
#define I2C_ISR_ADDCODE                       I2C_ISR_ADDCODE_Mask
#define I2C_ISR_ADDCODE_0                     (((uint32_t)0x1 << I2C_ISR_ADDCODE_Pos))
#define I2C_ISR_ADDCODE_1                     (((uint32_t)0x2 << I2C_ISR_ADDCODE_Pos))
#define I2C_ISR_ADDCODE_2                     (((uint32_t)0x4 << I2C_ISR_ADDCODE_Pos))
#define I2C_ISR_ADDCODE_3                     (((uint32_t)0x8 << I2C_ISR_ADDCODE_Pos))
#define I2C_ISR_ADDCODE_4                     (((uint32_t)0x10 << I2C_ISR_ADDCODE_Pos))
#define I2C_ISR_ADDCODE_5                     (((uint32_t)0x20 << I2C_ISR_ADDCODE_Pos))
#define I2C_ISR_ADDCODE_6                     (((uint32_t)0x40 << I2C_ISR_ADDCODE_Pos))
#define I2C_ISR_DIR_Pos                       ((uint32_t)16)                    /* Transfer direction of Slave mode */
#define I2C_ISR_DIR_Mask                      (((uint32_t)0x01) << 16)
#define I2C_ISR_DIR                           I2C_ISR_DIR_Mask
#define I2C_ISR_BUSY_Pos                      ((uint32_t)15)                    /* Bus busy */
#define I2C_ISR_BUSY_Mask                     (((uint32_t)0x01) << 15)
#define I2C_ISR_BUSY                          I2C_ISR_BUSY_Mask
#define I2C_ISR_ALERT_Pos                     ((uint32_t)13)                    /* SMBus alert */
#define I2C_ISR_ALERT_Mask                    (((uint32_t)0x01) << 13)
#define I2C_ISR_ALERT                         I2C_ISR_ALERT_Mask
#define I2C_ISR_TIMEOUT_Pos                   ((uint32_t)12)                    /* Timeout or tLOW detection flag */
#define I2C_ISR_TIMEOUT_Mask                  (((uint32_t)0x01) << 12)
#define I2C_ISR_TIMEOUT                       I2C_ISR_TIMEOUT_Mask
#define I2C_ISR_PECERR_Pos                    ((uint32_t)11)                    /* PEC Error in reception */
#define I2C_ISR_PECERR_Mask                   (((uint32_t)0x01) << 11)
#define I2C_ISR_PECERR                        I2C_ISR_PECERR_Mask
#define I2C_ISR_OVR_Pos                       ((uint32_t)10)                    /* Overrun/Underrun of slave mode */
#define I2C_ISR_OVR_Mask                      (((uint32_t)0x01) << 10)
#define I2C_ISR_OVR                           I2C_ISR_OVR_Mask
#define I2C_ISR_ARLO_Pos                      ((uint32_t)9)                     /* Arbitration lost */
#define I2C_ISR_ARLO_Mask                     (((uint32_t)0x01) << 9)
#define I2C_ISR_ARLO                          I2C_ISR_ARLO_Mask
#define I2C_ISR_BERR_Pos                      ((uint32_t)8)                     /* Bus error */
#define I2C_ISR_BERR_Mask                     (((uint32_t)0x01) << 8)
#define I2C_ISR_BERR                          I2C_ISR_BERR_Mask
#define I2C_ISR_TCR_Pos                       ((uint32_t)7)                     /* Transfer complete Reload */
#define I2C_ISR_TCR_Mask                      (((uint32_t)0x01) << 7)
#define I2C_ISR_TCR                           I2C_ISR_TCR_Mask
#define I2C_ISR_TC_Pos                        ((uint32_t)6)                     /* Transfer complete of master mode */
#define I2C_ISR_TC_Mask                       (((uint32_t)0x01) << 6)
#define I2C_ISR_TC                            I2C_ISR_TC_Mask
#define I2C_ISR_STOPF_Pos                     ((uint32_t)5)                     /* STOP detection flag */
#define I2C_ISR_STOPF_Mask                    (((uint32_t)0x01) << 5)
#define I2C_ISR_STOPF                         I2C_ISR_STOPF_Mask
#define I2C_ISR_NACKF_Pos                     ((uint32_t)4)                     /* Not Acknowledge received flag */
#define I2C_ISR_NACKF_Mask                    (((uint32_t)0x01) << 4)
#define I2C_ISR_NACKF                         I2C_ISR_NACKF_Mask
#define I2C_ISR_ADDR_Pos                      ((uint32_t)3)                     /* Address matched of slave mode */
#define I2C_ISR_ADDR_Mask                     (((uint32_t)0x01) << 3)
#define I2C_ISR_ADDR                          I2C_ISR_ADDR_Mask
#define I2C_ISR_RXNE_Pos                      ((uint32_t)2)                     /* Receive data register not empty of receivers */
#define I2C_ISR_RXNE_Mask                     (((uint32_t)0x01) << 2)
#define I2C_ISR_RXNE                          I2C_ISR_RXNE_Mask
#define I2C_ISR_TXIS_Pos                      ((uint32_t)1)                     /* Transmit interrupt status of transmitters */
#define I2C_ISR_TXIS_Mask                     (((uint32_t)0x01) << 1)
#define I2C_ISR_TXIS                          I2C_ISR_TXIS_Mask
#define I2C_ISR_TXE_Pos                       ((uint32_t)0)                     /* Transmit data register empty of transmitters */
#define I2C_ISR_TXE_Mask                      (((uint32_t)0x01) << 0)
#define I2C_ISR_TXE                           I2C_ISR_TXE_Mask

/************************************** I2C->ICR  ***************************************/
#define I2C_ICR_ALERTCF_Pos                   ((uint32_t)13)                    /* Alert flag clear */
#define I2C_ICR_ALERTCF_Mask                  (((uint32_t)0x01) << 13)
#define I2C_ICR_ALERTCF                       I2C_ICR_ALERTCF_Mask
#define I2C_ICR_TIMOUTCF_Pos                  ((uint32_t)12)                    /* Timeout detection flag clear */
#define I2C_ICR_TIMOUTCF_Mask                 (((uint32_t)0x01) << 12)
#define I2C_ICR_TIMOUTCF                      I2C_ICR_TIMOUTCF_Mask
#define I2C_ICR_PECCF_Pos                     ((uint32_t)11)                    /* PEC Error flag clear */
#define I2C_ICR_PECCF_Mask                    (((uint32_t)0x01) << 11)
#define I2C_ICR_PECCF                         I2C_ICR_PECCF_Mask
#define I2C_ICR_OVERCF_Pos                    ((uint32_t)10)                    /* Overrun/Underrun flag clear */
#define I2C_ICR_OVERCF_Mask                   (((uint32_t)0x01) << 10)
#define I2C_ICR_OVERCF                        I2C_ICR_OVERCF_Mask
#define I2C_ICR_ARLOCF_Pos                    ((uint32_t)9)                     /* Arbitration Lost flag clear */
#define I2C_ICR_ARLOCF_Mask                   (((uint32_t)0x01) << 9)
#define I2C_ICR_ARLOCF                        I2C_ICR_ARLOCF_Mask
#define I2C_ICR_BERRCF_Pos                    ((uint32_t)8)                     /* Bus error flag clear */
#define I2C_ICR_BERRCF_Mask                   (((uint32_t)0x01) << 8)
#define I2C_ICR_BERRCF                        I2C_ICR_BERRCF_Mask
#define I2C_ICR_STOPCF_Pos                    ((uint32_t)5)                     /* STOP detection flag clear */
#define I2C_ICR_STOPCF_Mask                   (((uint32_t)0x01) << 5)
#define I2C_ICR_STOPCF                        I2C_ICR_STOPCF_Mask
#define I2C_ICR_NACKCF_Pos                    ((uint32_t)4)                     /* Not Acknowledge flag clear */
#define I2C_ICR_NACKCF_Mask                   (((uint32_t)0x01) << 4)
#define I2C_ICR_NACKCF                        I2C_ICR_NACKCF_Mask
#define I2C_ICR_ADDRCF_Pos                    ((uint32_t)3)                     /* Address matched flag clear */
#define I2C_ICR_ADDRCF_Mask                   (((uint32_t)0x01) << 3)
#define I2C_ICR_ADDRCF                        I2C_ICR_ADDRCF_Mask

/************************************* I2C->PECR  ***************************************/
#define I2C_PECR_PEC_Pos                      ((uint32_t)0)                     /* Packet error checking register */
#define I2C_PECR_PEC_Mask                     (((uint32_t)0xFF) << 0)
#define I2C_PECR_PEC                          I2C_PECR_PEC_Mask
#define I2C_PECR_PEC_0                        (((uint32_t)0x1))
#define I2C_PECR_PEC_1                        (((uint32_t)0x2))
#define I2C_PECR_PEC_2                        (((uint32_t)0x4))
#define I2C_PECR_PEC_3                        (((uint32_t)0x8))
#define I2C_PECR_PEC_4                        (((uint32_t)0x10))
#define I2C_PECR_PEC_5                        (((uint32_t)0x20))
#define I2C_PECR_PEC_6                        (((uint32_t)0x40))
#define I2C_PECR_PEC_7                        (((uint32_t)0x80))

/************************************* I2C->RXDR  ***************************************/
#define I2C_RXDR_RXDATA_Pos                   ((uint32_t)0)                     /* 8-bit receive data */
#define I2C_RXDR_RXDATA_Mask                  (((uint32_t)0xFF) << 0)
#define I2C_RXDR_RXDATA                       I2C_RXDR_RXDATA_Mask
#define I2C_RXDR_RXDATA_0                     (((uint32_t)0x1))
#define I2C_RXDR_RXDATA_1                     (((uint32_t)0x2))
#define I2C_RXDR_RXDATA_2                     (((uint32_t)0x4))
#define I2C_RXDR_RXDATA_3                     (((uint32_t)0x8))
#define I2C_RXDR_RXDATA_4                     (((uint32_t)0x10))
#define I2C_RXDR_RXDATA_5                     (((uint32_t)0x20))
#define I2C_RXDR_RXDATA_6                     (((uint32_t)0x40))
#define I2C_RXDR_RXDATA_7                     (((uint32_t)0x80))

/************************************* I2C->TXDR  ***************************************/
#define I2C_TXDR_TXDATA_Pos                   ((uint32_t)0)                     /* 8-bit transmit data */
#define I2C_TXDR_TXDATA_Mask                  (((uint32_t)0xFF) << 0)
#define I2C_TXDR_TXDATA                       I2C_TXDR_TXDATA_Mask
#define I2C_TXDR_TXDATA_0                     (((uint32_t)0x1))
#define I2C_TXDR_TXDATA_1                     (((uint32_t)0x2))
#define I2C_TXDR_TXDATA_2                     (((uint32_t)0x4))
#define I2C_TXDR_TXDATA_3                     (((uint32_t)0x8))
#define I2C_TXDR_TXDATA_4                     (((uint32_t)0x10))
#define I2C_TXDR_TXDATA_5                     (((uint32_t)0x20))
#define I2C_TXDR_TXDATA_6                     (((uint32_t)0x40))
#define I2C_TXDR_TXDATA_7                     (((uint32_t)0x80))

/*****************************************************************************************
*                                    Peripheral USART                                    *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t CR1;                    /* CR1 */
    __IO uint32_t CR2;                    /* CR2 */
    __IO uint32_t CR3;                    /* CR3 */
    __IO uint32_t BRR;                    /* BRR */
    __IO uint32_t GTPR;                   /* GTPR */
    __IO uint32_t RTOR;                   /* RTOR */
    __O  uint32_t RQR;                    /* RQR */
    __I  uint32_t ISR;                    /* ISR */
    __IO uint32_t ICR;                    /* ICR */
    __I  uint32_t RDR;                    /* RDR */
    __IO uint32_t TDR;                    /* TDR */
} USART_TypeDef;

/************************************* USART->CR1  **************************************/
#define USART_CR1_M1_Pos                      ((uint32_t)28)                    /* Word length */
#define USART_CR1_M1_Mask                     (((uint32_t)0x01) << 28)
#define USART_CR1_M1                          USART_CR1_M1_Mask
#define USART_CR1_EOBIE_Pos                   ((uint32_t)27)                    /* End of Block interrupt enable */
#define USART_CR1_EOBIE_Mask                  (((uint32_t)0x01) << 27)
#define USART_CR1_EOBIE                       USART_CR1_EOBIE_Mask
#define USART_CR1_RTOIE_Pos                   ((uint32_t)26)                    /* Receiver timeout interrupt enable */
#define USART_CR1_RTOIE_Mask                  (((uint32_t)0x01) << 26)
#define USART_CR1_RTOIE                       USART_CR1_RTOIE_Mask
#define USART_CR1_DEAT_Pos                    ((uint32_t)21)                    /* Driver Enable assertion time */
#define USART_CR1_DEAT_Mask                   (((uint32_t)0x1F) << 21)
#define USART_CR1_DEAT                        USART_CR1_DEAT_Mask
#define USART_CR1_DEAT_0                      (((uint32_t)0x1 << USART_CR1_DEAT_Pos))
#define USART_CR1_DEAT_1                      (((uint32_t)0x2 << USART_CR1_DEAT_Pos))
#define USART_CR1_DEAT_2                      (((uint32_t)0x4 << USART_CR1_DEAT_Pos))
#define USART_CR1_DEAT_3                      (((uint32_t)0x8 << USART_CR1_DEAT_Pos))
#define USART_CR1_DEAT_4                      (((uint32_t)0x10 << USART_CR1_DEAT_Pos))
#define USART_CR1_DEDT_Pos                    ((uint32_t)16)                    /* Driver Enable de-assertion time */
#define USART_CR1_DEDT_Mask                   (((uint32_t)0x1F) << 16)
#define USART_CR1_DEDT                        USART_CR1_DEDT_Mask
#define USART_CR1_DEDT_0                      (((uint32_t)0x1 << USART_CR1_DEDT_Pos))
#define USART_CR1_DEDT_1                      (((uint32_t)0x2 << USART_CR1_DEDT_Pos))
#define USART_CR1_DEDT_2                      (((uint32_t)0x4 << USART_CR1_DEDT_Pos))
#define USART_CR1_DEDT_3                      (((uint32_t)0x8 << USART_CR1_DEDT_Pos))
#define USART_CR1_DEDT_4                      (((uint32_t)0x10 << USART_CR1_DEDT_Pos))
#define USART_CR1_OVER8_Pos                   ((uint32_t)15)                    /* Oversampling mode */
#define USART_CR1_OVER8_Mask                  (((uint32_t)0x01) << 15)
#define USART_CR1_OVER8                       USART_CR1_OVER8_Mask
#define USART_CR1_CMIE_Pos                    ((uint32_t)14)                    /* Character match interrupt enable */
#define USART_CR1_CMIE_Mask                   (((uint32_t)0x01) << 14)
#define USART_CR1_CMIE                        USART_CR1_CMIE_Mask
#define USART_CR1_MME_Pos                     ((uint32_t)13)                    /* Mute mode enable */
#define USART_CR1_MME_Mask                    (((uint32_t)0x01) << 13)
#define USART_CR1_MME                         USART_CR1_MME_Mask
#define USART_CR1_M0_Pos                      ((uint32_t)12)                    /* Word length */
#define USART_CR1_M0_Mask                     (((uint32_t)0x01) << 12)
#define USART_CR1_M0                          USART_CR1_M0_Mask
#define USART_CR1_WAKE_Pos                    ((uint32_t)11)                    /* Receiver wakeup method */
#define USART_CR1_WAKE_Mask                   (((uint32_t)0x01) << 11)
#define USART_CR1_WAKE                        USART_CR1_WAKE_Mask
#define USART_CR1_PCE_Pos                     ((uint32_t)10)                    /* Parity control enable */
#define USART_CR1_PCE_Mask                    (((uint32_t)0x01) << 10)
#define USART_CR1_PCE                         USART_CR1_PCE_Mask
#define USART_CR1_PS_Pos                      ((uint32_t)9)                     /* Parity selection */
#define USART_CR1_PS_Mask                     (((uint32_t)0x01) << 9)
#define USART_CR1_PS                          USART_CR1_PS_Mask
#define USART_CR1_PEIE_Pos                    ((uint32_t)8)                     /* PE interrupt enable */
#define USART_CR1_PEIE_Mask                   (((uint32_t)0x01) << 8)
#define USART_CR1_PEIE                        USART_CR1_PEIE_Mask
#define USART_CR1_TXEIE_Pos                   ((uint32_t)7)                     /* TXE interrupt enable */
#define USART_CR1_TXEIE_Mask                  (((uint32_t)0x01) << 7)
#define USART_CR1_TXEIE                       USART_CR1_TXEIE_Mask
#define USART_CR1_TCIE_Pos                    ((uint32_t)6)                     /* Transmission complete interrupt enable */
#define USART_CR1_TCIE_Mask                   (((uint32_t)0x01) << 6)
#define USART_CR1_TCIE                        USART_CR1_TCIE_Mask
#define USART_CR1_RXNEIE_Pos                  ((uint32_t)5)                     /* RXNE interrupt enable */
#define USART_CR1_RXNEIE_Mask                 (((uint32_t)0x01) << 5)
#define USART_CR1_RXNEIE                      USART_CR1_RXNEIE_Mask
#define USART_CR1_IDLEIE_Pos                  ((uint32_t)4)                     /* IDLE interrupt enable */
#define USART_CR1_IDLEIE_Mask                 (((uint32_t)0x01) << 4)
#define USART_CR1_IDLEIE                      USART_CR1_IDLEIE_Mask
#define USART_CR1_TE_Pos                      ((uint32_t)3)                     /* Transmitter enable */
#define USART_CR1_TE_Mask                     (((uint32_t)0x01) << 3)
#define USART_CR1_TE                          USART_CR1_TE_Mask
#define USART_CR1_RE_Pos                      ((uint32_t)2)                     /* Receiver enable */
#define USART_CR1_RE_Mask                     (((uint32_t)0x01) << 2)
#define USART_CR1_RE                          USART_CR1_RE_Mask
#define USART_CR1_UESM_Pos                    ((uint32_t)1)                     /* USART enable in Stop mode */
#define USART_CR1_UESM_Mask                   (((uint32_t)0x01) << 1)
#define USART_CR1_UESM                        USART_CR1_UESM_Mask
#define USART_CR1_UE_Pos                      ((uint32_t)0)                     /* USART enable */
#define USART_CR1_UE_Mask                     (((uint32_t)0x01) << 0)
#define USART_CR1_UE                          USART_CR1_UE_Mask

/************************************* USART->CR2  **************************************/
#define USART_CR2_ADD_Pos                     ((uint32_t)24)                    /* Address of the USART node */
#define USART_CR2_ADD_Mask                    (((uint32_t)0xFF) << 24)
#define USART_CR2_ADD                         USART_CR2_ADD_Mask
#define USART_CR2_ADD_0                       (((uint32_t)0x1 << USART_CR2_ADD_Pos))
#define USART_CR2_ADD_1                       (((uint32_t)0x2 << USART_CR2_ADD_Pos))
#define USART_CR2_ADD_2                       (((uint32_t)0x4 << USART_CR2_ADD_Pos))
#define USART_CR2_ADD_3                       (((uint32_t)0x8 << USART_CR2_ADD_Pos))
#define USART_CR2_ADD_4                       (((uint32_t)0x10 << USART_CR2_ADD_Pos))
#define USART_CR2_ADD_5                       (((uint32_t)0x20 << USART_CR2_ADD_Pos))
#define USART_CR2_ADD_6                       (((uint32_t)0x40 << USART_CR2_ADD_Pos))
#define USART_CR2_ADD_7                       (((uint32_t)0x80 << USART_CR2_ADD_Pos))
#define USART_CR2_RTOEN_Pos                   ((uint32_t)23)                    /* Receiver timeout enable */
#define USART_CR2_RTOEN_Mask                  (((uint32_t)0x01) << 23)
#define USART_CR2_RTOEN                       USART_CR2_RTOEN_Mask
#define USART_CR2_ABRMOD_Pos                  ((uint32_t)21)                    /* Auto baud rate mode */
#define USART_CR2_ABRMOD_Mask                 (((uint32_t)0x03) << 21)
#define USART_CR2_ABRMOD                      USART_CR2_ABRMOD_Mask
#define USART_CR2_ABRMOD_0                    (((uint32_t)0x1 << USART_CR2_ABRMOD_Pos))
#define USART_CR2_ABRMOD_1                    (((uint32_t)0x2 << USART_CR2_ABRMOD_Pos))
#define USART_CR2_ABREN_Pos                   ((uint32_t)20)                    /* Auto baud rate enable */
#define USART_CR2_ABREN_Mask                  (((uint32_t)0x01) << 20)
#define USART_CR2_ABREN                       USART_CR2_ABREN_Mask
#define USART_CR2_MSBFIRST_Pos                ((uint32_t)19)                    /* Most significant bit first */
#define USART_CR2_MSBFIRST_Mask               (((uint32_t)0x01) << 19)
#define USART_CR2_MSBFIRST                    USART_CR2_MSBFIRST_Mask
#define USART_CR2_DATAINV_Pos                 ((uint32_t)18)                    /* Binary data inversion */
#define USART_CR2_DATAINV_Mask                (((uint32_t)0x01) << 18)
#define USART_CR2_DATAINV                     USART_CR2_DATAINV_Mask
#define USART_CR2_TXINV_Pos                   ((uint32_t)17)                    /* TX pin active level inversion */
#define USART_CR2_TXINV_Mask                  (((uint32_t)0x01) << 17)
#define USART_CR2_TXINV                       USART_CR2_TXINV_Mask
#define USART_CR2_RXINV_Pos                   ((uint32_t)16)                    /* RX pin active level inversion */
#define USART_CR2_RXINV_Mask                  (((uint32_t)0x01) << 16)
#define USART_CR2_RXINV                       USART_CR2_RXINV_Mask
#define USART_CR2_SWAP_Pos                    ((uint32_t)15)                    /* Swap TX/RX pins */
#define USART_CR2_SWAP_Mask                   (((uint32_t)0x01) << 15)
#define USART_CR2_SWAP                        USART_CR2_SWAP_Mask
#define USART_CR2_LINEN_Pos                   ((uint32_t)14)                    /* LIN mode enable */
#define USART_CR2_LINEN_Mask                  (((uint32_t)0x01) << 14)
#define USART_CR2_LINEN                       USART_CR2_LINEN_Mask
#define USART_CR2_STOP_Pos                    ((uint32_t)12)                    /* STOP bits */
#define USART_CR2_STOP_Mask                   (((uint32_t)0x03) << 12)
#define USART_CR2_STOP                        USART_CR2_STOP_Mask
#define USART_CR2_STOP_0                      (((uint32_t)0x1 << USART_CR2_STOP_Pos))
#define USART_CR2_STOP_1                      (((uint32_t)0x2 << USART_CR2_STOP_Pos))
#define USART_CR2_CLKEN_Pos                   ((uint32_t)11)                    /* Clock enable */
#define USART_CR2_CLKEN_Mask                  (((uint32_t)0x01) << 11)
#define USART_CR2_CLKEN                       USART_CR2_CLKEN_Mask
#define USART_CR2_CPOL_Pos                    ((uint32_t)10)                    /* Clock polarity */
#define USART_CR2_CPOL_Mask                   (((uint32_t)0x01) << 10)
#define USART_CR2_CPOL                        USART_CR2_CPOL_Mask
#define USART_CR2_CPHA_Pos                    ((uint32_t)9)                     /* Clock phase */
#define USART_CR2_CPHA_Mask                   (((uint32_t)0x01) << 9)
#define USART_CR2_CPHA                        USART_CR2_CPHA_Mask
#define USART_CR2_LBCL_Pos                    ((uint32_t)8)                     /* Last bit clock pulse */
#define USART_CR2_LBCL_Mask                   (((uint32_t)0x01) << 8)
#define USART_CR2_LBCL                        USART_CR2_LBCL_Mask
#define USART_CR2_LBDIE_Pos                   ((uint32_t)6)                     /* LIN break detection interrupt enable */
#define USART_CR2_LBDIE_Mask                  (((uint32_t)0x01) << 6)
#define USART_CR2_LBDIE                       USART_CR2_LBDIE_Mask
#define USART_CR2_LBDL_Pos                    ((uint32_t)5)                     /* LIN break detection length */
#define USART_CR2_LBDL_Mask                   (((uint32_t)0x01) << 5)
#define USART_CR2_LBDL                        USART_CR2_LBDL_Mask
#define USART_CR2_ADDM7_Pos                   ((uint32_t)4)                     /* 7-bit Address Detection/4-bit Address Detection */
#define USART_CR2_ADDM7_Mask                  (((uint32_t)0x01) << 4)
#define USART_CR2_ADDM7                       USART_CR2_ADDM7_Mask

/************************************* USART->CR3  **************************************/
#define USART_CR3_WUFIE_Pos                   ((uint32_t)22)                    /* Wakeup from Stop mode interrupt enable */
#define USART_CR3_WUFIE_Mask                  (((uint32_t)0x01) << 22)
#define USART_CR3_WUFIE                       USART_CR3_WUFIE_Mask
#define USART_CR3_WUS_Pos                     ((uint32_t)20)                    /* Wakeup from Stop mode interrupt flag selection */
#define USART_CR3_WUS_Mask                    (((uint32_t)0x03) << 20)
#define USART_CR3_WUS                         USART_CR3_WUS_Mask
#define USART_CR3_WUS_0                       (((uint32_t)0x1 << USART_CR3_WUS_Pos))
#define USART_CR3_WUS_1                       (((uint32_t)0x2 << USART_CR3_WUS_Pos))
#define USART_CR3_SCARCNT_Pos                 ((uint32_t)17)                    /* Smartcard auto-retry count */
#define USART_CR3_SCARCNT_Mask                (((uint32_t)0x07) << 17)
#define USART_CR3_SCARCNT                     USART_CR3_SCARCNT_Mask
#define USART_CR3_SCARCNT_0                   (((uint32_t)0x1 << USART_CR3_SCARCNT_Pos))
#define USART_CR3_SCARCNT_1                   (((uint32_t)0x2 << USART_CR3_SCARCNT_Pos))
#define USART_CR3_SCARCNT_2                   (((uint32_t)0x4 << USART_CR3_SCARCNT_Pos))
#define USART_CR3_DEP_Pos                     ((uint32_t)15)                    /* Driver enable polarity selection */
#define USART_CR3_DEP_Mask                    (((uint32_t)0x01) << 15)
#define USART_CR3_DEP                         USART_CR3_DEP_Mask
#define USART_CR3_DEM_Pos                     ((uint32_t)14)                    /* Driver enable mode */
#define USART_CR3_DEM_Mask                    (((uint32_t)0x01) << 14)
#define USART_CR3_DEM                         USART_CR3_DEM_Mask
#define USART_CR3_DDRE_Pos                    ((uint32_t)13)                    /* DMA Disable on Reception Error */
#define USART_CR3_DDRE_Mask                   (((uint32_t)0x01) << 13)
#define USART_CR3_DDRE                        USART_CR3_DDRE_Mask
#define USART_CR3_OVRDIS_Pos                  ((uint32_t)12)                    /* Overrun disable */
#define USART_CR3_OVRDIS_Mask                 (((uint32_t)0x01) << 12)
#define USART_CR3_OVRDIS                      USART_CR3_OVRDIS_Mask
#define USART_CR3_ONEBIT_Pos                  ((uint32_t)11)                    /* One sample bit method enable */
#define USART_CR3_ONEBIT_Mask                 (((uint32_t)0x01) << 11)
#define USART_CR3_ONEBIT                      USART_CR3_ONEBIT_Mask
#define USART_CR3_CTSIE_Pos                   ((uint32_t)10)                    /* CTS interrupt enable */
#define USART_CR3_CTSIE_Mask                  (((uint32_t)0x01) << 10)
#define USART_CR3_CTSIE                       USART_CR3_CTSIE_Mask
#define USART_CR3_CTSE_Pos                    ((uint32_t)9)                     /* CTS enable */
#define USART_CR3_CTSE_Mask                   (((uint32_t)0x01) << 9)
#define USART_CR3_CTSE                        USART_CR3_CTSE_Mask
#define USART_CR3_RTSE_Pos                    ((uint32_t)8)                     /* RTS enable */
#define USART_CR3_RTSE_Mask                   (((uint32_t)0x01) << 8)
#define USART_CR3_RTSE                        USART_CR3_RTSE_Mask
#define USART_CR3_DMAT_Pos                    ((uint32_t)7)                     /* DMA enable transmitter */
#define USART_CR3_DMAT_Mask                   (((uint32_t)0x01) << 7)
#define USART_CR3_DMAT                        USART_CR3_DMAT_Mask
#define USART_CR3_DMAR_Pos                    ((uint32_t)6)                     /* DMA enable receiver */
#define USART_CR3_DMAR_Mask                   (((uint32_t)0x01) << 6)
#define USART_CR3_DMAR                        USART_CR3_DMAR_Mask
#define USART_CR3_SCEN_Pos                    ((uint32_t)5)                     /* Smartcard mode enable */
#define USART_CR3_SCEN_Mask                   (((uint32_t)0x01) << 5)
#define USART_CR3_SCEN                        USART_CR3_SCEN_Mask
#define USART_CR3_NACK_Pos                    ((uint32_t)4)                     /* Smartcard NACK enable */
#define USART_CR3_NACK_Mask                   (((uint32_t)0x01) << 4)
#define USART_CR3_NACK                        USART_CR3_NACK_Mask
#define USART_CR3_HDSEL_Pos                   ((uint32_t)3)                     /* Half-duplex selection */
#define USART_CR3_HDSEL_Mask                  (((uint32_t)0x01) << 3)
#define USART_CR3_HDSEL                       USART_CR3_HDSEL_Mask
#define USART_CR3_IRLP_Pos                    ((uint32_t)2)                     /* IrDA low-power */
#define USART_CR3_IRLP_Mask                   (((uint32_t)0x01) << 2)
#define USART_CR3_IRLP                        USART_CR3_IRLP_Mask
#define USART_CR3_IREN_Pos                    ((uint32_t)1)                     /* IrDA mode enable */
#define USART_CR3_IREN_Mask                   (((uint32_t)0x01) << 1)
#define USART_CR3_IREN                        USART_CR3_IREN_Mask
#define USART_CR3_EIE_Pos                     ((uint32_t)0)                     /* Error interrupt enable */
#define USART_CR3_EIE_Mask                    (((uint32_t)0x01) << 0)
#define USART_CR3_EIE                         USART_CR3_EIE_Mask

/************************************* USART->BRR  **************************************/
#define USART_BRR_BRR_Pos                     ((uint32_t)0)                     /* USARTDIV coefficient of the serial port wave rate */
#define USART_BRR_BRR_Mask                    (((uint32_t)0xFFFF) << 0)
#define USART_BRR_BRR                         USART_BRR_BRR_Mask

/************************************ USART->GTPR  **************************************/
#define USART_GTPR_GT_Pos                     ((uint32_t)8)                     /* Guard time value */
#define USART_GTPR_GT_Mask                    (((uint32_t)0xFF) << 8)
#define USART_GTPR_GT                         USART_GTPR_GT_Mask
#define USART_GTPR_GT_0                       (((uint32_t)0x1 << USART_GTPR_GT_Pos))
#define USART_GTPR_GT_1                       (((uint32_t)0x2 << USART_GTPR_GT_Pos))
#define USART_GTPR_GT_2                       (((uint32_t)0x4 << USART_GTPR_GT_Pos))
#define USART_GTPR_GT_3                       (((uint32_t)0x8 << USART_GTPR_GT_Pos))
#define USART_GTPR_GT_4                       (((uint32_t)0x10 << USART_GTPR_GT_Pos))
#define USART_GTPR_GT_5                       (((uint32_t)0x20 << USART_GTPR_GT_Pos))
#define USART_GTPR_GT_6                       (((uint32_t)0x40 << USART_GTPR_GT_Pos))
#define USART_GTPR_GT_7                       (((uint32_t)0x80 << USART_GTPR_GT_Pos))
#define USART_GTPR_PSC_Pos                    ((uint32_t)0)                     /* Prescaler value */
#define USART_GTPR_PSC_Mask                   (((uint32_t)0xFF) << 0)
#define USART_GTPR_PSC                        USART_GTPR_PSC_Mask
#define USART_GTPR_PSC_0                      (((uint32_t)0x1))
#define USART_GTPR_PSC_1                      (((uint32_t)0x2))
#define USART_GTPR_PSC_2                      (((uint32_t)0x4))
#define USART_GTPR_PSC_3                      (((uint32_t)0x8))
#define USART_GTPR_PSC_4                      (((uint32_t)0x10))
#define USART_GTPR_PSC_5                      (((uint32_t)0x20))
#define USART_GTPR_PSC_6                      (((uint32_t)0x40))
#define USART_GTPR_PSC_7                      (((uint32_t)0x80))

/************************************ USART->RTOR  **************************************/
#define USART_RTOR_BLEN_Pos                   ((uint32_t)24)                    /* Block Length */
#define USART_RTOR_BLEN_Mask                  (((uint32_t)0xFF) << 24)
#define USART_RTOR_BLEN                       USART_RTOR_BLEN_Mask
#define USART_RTOR_BLEN_0                     (((uint32_t)0x1 << USART_RTOR_BLEN_Pos))
#define USART_RTOR_BLEN_1                     (((uint32_t)0x2 << USART_RTOR_BLEN_Pos))
#define USART_RTOR_BLEN_2                     (((uint32_t)0x4 << USART_RTOR_BLEN_Pos))
#define USART_RTOR_BLEN_3                     (((uint32_t)0x8 << USART_RTOR_BLEN_Pos))
#define USART_RTOR_BLEN_4                     (((uint32_t)0x10 << USART_RTOR_BLEN_Pos))
#define USART_RTOR_BLEN_5                     (((uint32_t)0x20 << USART_RTOR_BLEN_Pos))
#define USART_RTOR_BLEN_6                     (((uint32_t)0x40 << USART_RTOR_BLEN_Pos))
#define USART_RTOR_BLEN_7                     (((uint32_t)0x80 << USART_RTOR_BLEN_Pos))
#define USART_RTOR_RTO_Pos                    ((uint32_t)0)                     /* Receiver timeout value */
#define USART_RTOR_RTO_Mask                   (((uint32_t)0xFFFFFF) << 0)
#define USART_RTOR_RTO                        USART_RTOR_RTO_Mask

/************************************* USART->RQR  **************************************/
#define USART_RQR_TXFRQ_Pos                   ((uint32_t)4)                     /* Transmit data flush request */
#define USART_RQR_TXFRQ_Mask                  (((uint32_t)0x01) << 4)
#define USART_RQR_TXFRQ                       USART_RQR_TXFRQ_Mask
#define USART_RQR_RXFRQ_Pos                   ((uint32_t)3)                     /* Receive data flush request */
#define USART_RQR_RXFRQ_Mask                  (((uint32_t)0x01) << 3)
#define USART_RQR_RXFRQ                       USART_RQR_RXFRQ_Mask
#define USART_RQR_MMRQ_Pos                    ((uint32_t)2)                     /* Mute mode request */
#define USART_RQR_MMRQ_Mask                   (((uint32_t)0x01) << 2)
#define USART_RQR_MMRQ                        USART_RQR_MMRQ_Mask
#define USART_RQR_SBKRQ_Pos                   ((uint32_t)1)                     /* Send break request */
#define USART_RQR_SBKRQ_Mask                  (((uint32_t)0x01) << 1)
#define USART_RQR_SBKRQ                       USART_RQR_SBKRQ_Mask
#define USART_RQR_ABRRQ_Pos                   ((uint32_t)0)                     /* Auto baud rate request */
#define USART_RQR_ABRRQ_Mask                  (((uint32_t)0x01) << 0)
#define USART_RQR_ABRRQ                       USART_RQR_ABRRQ_Mask

/************************************* USART->ISR  **************************************/
#define USART_ISR_REACK_Pos                   ((uint32_t)22)                    /* Receive enable acknowledge flag */
#define USART_ISR_REACK_Mask                  (((uint32_t)0x01) << 22)
#define USART_ISR_REACK                       USART_ISR_REACK_Mask
#define USART_ISR_TEACK_Pos                   ((uint32_t)21)                    /* Transmit enable acknowledge flag */
#define USART_ISR_TEACK_Mask                  (((uint32_t)0x01) << 21)
#define USART_ISR_TEACK                       USART_ISR_TEACK_Mask
#define USART_ISR_WUF_Pos                     ((uint32_t)20)                    /* Wakeup from Stop mode flag */
#define USART_ISR_WUF_Mask                    (((uint32_t)0x01) << 20)
#define USART_ISR_WUF                         USART_ISR_WUF_Mask
#define USART_ISR_RWU_Pos                     ((uint32_t)19)                    /* Receiver wakeup from Mute mode */
#define USART_ISR_RWU_Mask                    (((uint32_t)0x01) << 19)
#define USART_ISR_RWU                         USART_ISR_RWU_Mask
#define USART_ISR_SBKF_Pos                    ((uint32_t)18)                    /* Send break flag */
#define USART_ISR_SBKF_Mask                   (((uint32_t)0x01) << 18)
#define USART_ISR_SBKF                        USART_ISR_SBKF_Mask
#define USART_ISR_CMF_Pos                     ((uint32_t)17)                    /* Character match flag */
#define USART_ISR_CMF_Mask                    (((uint32_t)0x01) << 17)
#define USART_ISR_CMF                         USART_ISR_CMF_Mask
#define USART_ISR_BUSY_Pos                    ((uint32_t)16)                    /* Busy flag */
#define USART_ISR_BUSY_Mask                   (((uint32_t)0x01) << 16)
#define USART_ISR_BUSY                        USART_ISR_BUSY_Mask
#define USART_ISR_ABRF_Pos                    ((uint32_t)15)                    /* Auto baud rate flag */
#define USART_ISR_ABRF_Mask                   (((uint32_t)0x01) << 15)
#define USART_ISR_ABRF                        USART_ISR_ABRF_Mask
#define USART_ISR_ABRE_Pos                    ((uint32_t)14)                    /* Auto baud rate error */
#define USART_ISR_ABRE_Mask                   (((uint32_t)0x01) << 14)
#define USART_ISR_ABRE                        USART_ISR_ABRE_Mask
#define USART_ISR_EOBF_Pos                    ((uint32_t)12)                    /* End of block flag */
#define USART_ISR_EOBF_Mask                   (((uint32_t)0x01) << 12)
#define USART_ISR_EOBF                        USART_ISR_EOBF_Mask
#define USART_ISR_RTOF_Pos                    ((uint32_t)11)                    /* Receiver timeout */
#define USART_ISR_RTOF_Mask                   (((uint32_t)0x01) << 11)
#define USART_ISR_RTOF                        USART_ISR_RTOF_Mask
#define USART_ISR_CTS_Pos                     ((uint32_t)10)                    /* CTS flag */
#define USART_ISR_CTS_Mask                    (((uint32_t)0x01) << 10)
#define USART_ISR_CTS                         USART_ISR_CTS_Mask
#define USART_ISR_CTSIF_Pos                   ((uint32_t)9)                     /* CTS interrupt flag */
#define USART_ISR_CTSIF_Mask                  (((uint32_t)0x01) << 9)
#define USART_ISR_CTSIF                       USART_ISR_CTSIF_Mask
#define USART_ISR_LBDF_Pos                    ((uint32_t)8)                     /* LIN break detection flag */
#define USART_ISR_LBDF_Mask                   (((uint32_t)0x01) << 8)
#define USART_ISR_LBDF                        USART_ISR_LBDF_Mask
#define USART_ISR_TXE_Pos                     ((uint32_t)7)                     /* Transmit data register empty */
#define USART_ISR_TXE_Mask                    (((uint32_t)0x01) << 7)
#define USART_ISR_TXE                         USART_ISR_TXE_Mask
#define USART_ISR_TC_Pos                      ((uint32_t)6)                     /* Transmission complete */
#define USART_ISR_TC_Mask                     (((uint32_t)0x01) << 6)
#define USART_ISR_TC                          USART_ISR_TC_Mask
#define USART_ISR_RXNE_Pos                    ((uint32_t)5)                     /* Receive data register not empty */
#define USART_ISR_RXNE_Mask                   (((uint32_t)0x01) << 5)
#define USART_ISR_RXNE                        USART_ISR_RXNE_Mask
#define USART_ISR_IDLE_Pos                    ((uint32_t)4)                     /* Idle line detected */
#define USART_ISR_IDLE_Mask                   (((uint32_t)0x01) << 4)
#define USART_ISR_IDLE                        USART_ISR_IDLE_Mask
#define USART_ISR_ORE_Pos                     ((uint32_t)3)                     /* Overrun error */
#define USART_ISR_ORE_Mask                    (((uint32_t)0x01) << 3)
#define USART_ISR_ORE                         USART_ISR_ORE_Mask
#define USART_ISR_NF_Pos                      ((uint32_t)2)                     /* Noise detection flag */
#define USART_ISR_NF_Mask                     (((uint32_t)0x01) << 2)
#define USART_ISR_NF                          USART_ISR_NF_Mask
#define USART_ISR_FE_Pos                      ((uint32_t)1)                     /* Framing error */
#define USART_ISR_FE_Mask                     (((uint32_t)0x01) << 1)
#define USART_ISR_FE                          USART_ISR_FE_Mask
#define USART_ISR_PE_Pos                      ((uint32_t)0)                     /* Parity error */
#define USART_ISR_PE_Mask                     (((uint32_t)0x01) << 0)
#define USART_ISR_PE                          USART_ISR_PE_Mask

/************************************* USART->ICR  **************************************/
#define USART_ICR_WUCF_Pos                    ((uint32_t)20)                    /* Wakeup from Stop mode clear flag */
#define USART_ICR_WUCF_Mask                   (((uint32_t)0x01) << 20)
#define USART_ICR_WUCF                        USART_ICR_WUCF_Mask
#define USART_ICR_CMCF_Pos                    ((uint32_t)17)                    /* Character match clear flag */
#define USART_ICR_CMCF_Mask                   (((uint32_t)0x01) << 17)
#define USART_ICR_CMCF                        USART_ICR_CMCF_Mask
#define USART_ICR_EOBCF_Pos                   ((uint32_t)12)                    /* End of block clear flag */
#define USART_ICR_EOBCF_Mask                  (((uint32_t)0x01) << 12)
#define USART_ICR_EOBCF                       USART_ICR_EOBCF_Mask
#define USART_ICR_RTOCF_Pos                   ((uint32_t)11)                    /* Receiver timeout clear flag */
#define USART_ICR_RTOCF_Mask                  (((uint32_t)0x01) << 11)
#define USART_ICR_RTOCF                       USART_ICR_RTOCF_Mask
#define USART_ICR_CTSCF_Pos                   ((uint32_t)9)                     /* CTS clear flag */
#define USART_ICR_CTSCF_Mask                  (((uint32_t)0x01) << 9)
#define USART_ICR_CTSCF                       USART_ICR_CTSCF_Mask
#define USART_ICR_LBDCF_Pos                   ((uint32_t)8)                     /* LIN break detection clear flag */
#define USART_ICR_LBDCF_Mask                  (((uint32_t)0x01) << 8)
#define USART_ICR_LBDCF                       USART_ICR_LBDCF_Mask
#define USART_ICR_TCCF_Pos                    ((uint32_t)6)                     /* Transmission complete clear flag */
#define USART_ICR_TCCF_Mask                   (((uint32_t)0x01) << 6)
#define USART_ICR_TCCF                        USART_ICR_TCCF_Mask
#define USART_ICR_IDLECF_Pos                  ((uint32_t)4)                     /* Idle line detected clear flag */
#define USART_ICR_IDLECF_Mask                 (((uint32_t)0x01) << 4)
#define USART_ICR_IDLECF                      USART_ICR_IDLECF_Mask
#define USART_ICR_ORECF_Pos                   ((uint32_t)3)                     /* Overrun error clear flag */
#define USART_ICR_ORECF_Mask                  (((uint32_t)0x01) << 3)
#define USART_ICR_ORECF                       USART_ICR_ORECF_Mask
#define USART_ICR_NCF_Pos                     ((uint32_t)2)                     /* Noise detected clear flag */
#define USART_ICR_NCF_Mask                    (((uint32_t)0x01) << 2)
#define USART_ICR_NCF                         USART_ICR_NCF_Mask
#define USART_ICR_FECF_Pos                    ((uint32_t)1)                     /* Framing error clear flag */
#define USART_ICR_FECF_Mask                   (((uint32_t)0x01) << 1)
#define USART_ICR_FECF                        USART_ICR_FECF_Mask
#define USART_ICR_PECF_Pos                    ((uint32_t)0)                     /* Parity error clear flag */
#define USART_ICR_PECF_Mask                   (((uint32_t)0x01) << 0)
#define USART_ICR_PECF                        USART_ICR_PECF_Mask

/************************************* USART->RDR  **************************************/
#define USART_RDR_RDR_Pos                     ((uint32_t)0)                     /* Receive data value */
#define USART_RDR_RDR_Mask                    (((uint32_t)0x01FF) << 0)
#define USART_RDR_RDR                         USART_RDR_RDR_Mask
#define USART_RDR_RDR_0                       (((uint32_t)0x1))
#define USART_RDR_RDR_1                       (((uint32_t)0x2))
#define USART_RDR_RDR_2                       (((uint32_t)0x4))
#define USART_RDR_RDR_3                       (((uint32_t)0x8))
#define USART_RDR_RDR_4                       (((uint32_t)0x10))
#define USART_RDR_RDR_5                       (((uint32_t)0x20))
#define USART_RDR_RDR_6                       (((uint32_t)0x40))
#define USART_RDR_RDR_7                       (((uint32_t)0x80))
#define USART_RDR_RDR_8                       (((uint32_t)0x100))

/************************************* USART->TDR  **************************************/
#define USART_TDR_TDR_Pos                     ((uint32_t)0)                     /* Transmit data value */
#define USART_TDR_TDR_Mask                    (((uint32_t)0x01FF) << 0)
#define USART_TDR_TDR                         USART_TDR_TDR_Mask
#define USART_TDR_TDR_0                       (((uint32_t)0x1))
#define USART_TDR_TDR_1                       (((uint32_t)0x2))
#define USART_TDR_TDR_2                       (((uint32_t)0x4))
#define USART_TDR_TDR_3                       (((uint32_t)0x8))
#define USART_TDR_TDR_4                       (((uint32_t)0x10))
#define USART_TDR_TDR_5                       (((uint32_t)0x20))
#define USART_TDR_TDR_6                       (((uint32_t)0x40))
#define USART_TDR_TDR_7                       (((uint32_t)0x80))
#define USART_TDR_TDR_8                       (((uint32_t)0x100))

/*****************************************************************************************
*                                    Peripheral LPUART                                   *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t CR1;                    /* CR1 */
    __IO uint32_t CR2;                    /* CR2 */
    __IO uint32_t CR3;                    /* CR3 */
    __IO uint32_t BRR;                    /* BRR */
    uint16_t RESERVED1[4];
    __O  uint32_t RQR;                    /* RQR */
    __I  uint32_t ISR;                    /* ISR */
    __O  uint32_t ICR;                    /* ICR */
    __I  uint32_t RDR;                    /* RDR */
    __IO uint32_t TDR;                    /* TDR */
} LPUART_TypeDef;

/************************************ LPUART->CR1  **************************************/
#define LPUART_CR1_M1_Pos                     ((uint32_t)28)                    /* Word length */
#define LPUART_CR1_M1_Mask                    (((uint32_t)0x01) << 28)
#define LPUART_CR1_M1                         LPUART_CR1_M1_Mask
#define LPUART_CR1_DEAT_Pos                   ((uint32_t)21)                    /* Driver Enable assertion time */
#define LPUART_CR1_DEAT_Mask                  (((uint32_t)0x1F) << 21)
#define LPUART_CR1_DEAT                       LPUART_CR1_DEAT_Mask
#define LPUART_CR1_DEAT_0                     (((uint32_t)0x1 << LPUART_CR1_DEAT_Pos))
#define LPUART_CR1_DEAT_1                     (((uint32_t)0x2 << LPUART_CR1_DEAT_Pos))
#define LPUART_CR1_DEAT_2                     (((uint32_t)0x4 << LPUART_CR1_DEAT_Pos))
#define LPUART_CR1_DEAT_3                     (((uint32_t)0x8 << LPUART_CR1_DEAT_Pos))
#define LPUART_CR1_DEAT_4                     (((uint32_t)0x10 << LPUART_CR1_DEAT_Pos))
#define LPUART_CR1_DEDT_Pos                   ((uint32_t)16)                    /* Driver Enable de-assertion time */
#define LPUART_CR1_DEDT_Mask                  (((uint32_t)0x1F) << 16)
#define LPUART_CR1_DEDT                       LPUART_CR1_DEDT_Mask
#define LPUART_CR1_DEDT_0                     (((uint32_t)0x1 << LPUART_CR1_DEDT_Pos))
#define LPUART_CR1_DEDT_1                     (((uint32_t)0x2 << LPUART_CR1_DEDT_Pos))
#define LPUART_CR1_DEDT_2                     (((uint32_t)0x4 << LPUART_CR1_DEDT_Pos))
#define LPUART_CR1_DEDT_3                     (((uint32_t)0x8 << LPUART_CR1_DEDT_Pos))
#define LPUART_CR1_DEDT_4                     (((uint32_t)0x10 << LPUART_CR1_DEDT_Pos))
#define LPUART_CR1_CMIE_Pos                   ((uint32_t)14)                    /* Character match interrupt enable */
#define LPUART_CR1_CMIE_Mask                  (((uint32_t)0x01) << 14)
#define LPUART_CR1_CMIE                       LPUART_CR1_CMIE_Mask
#define LPUART_CR1_MME_Pos                    ((uint32_t)13)                    /* Mute mode enable */
#define LPUART_CR1_MME_Mask                   (((uint32_t)0x01) << 13)
#define LPUART_CR1_MME                        LPUART_CR1_MME_Mask
#define LPUART_CR1_M0_Pos                     ((uint32_t)12)                    /* Word length */
#define LPUART_CR1_M0_Mask                    (((uint32_t)0x01) << 12)
#define LPUART_CR1_M0                         LPUART_CR1_M0_Mask
#define LPUART_CR1_WAKE_Pos                   ((uint32_t)11)                    /* Receiver wakeup method */
#define LPUART_CR1_WAKE_Mask                  (((uint32_t)0x01) << 11)
#define LPUART_CR1_WAKE                       LPUART_CR1_WAKE_Mask
#define LPUART_CR1_PCE_Pos                    ((uint32_t)10)                    /* Parity control enable */
#define LPUART_CR1_PCE_Mask                   (((uint32_t)0x01) << 10)
#define LPUART_CR1_PCE                        LPUART_CR1_PCE_Mask
#define LPUART_CR1_PS_Pos                     ((uint32_t)9)                     /* Parity selection */
#define LPUART_CR1_PS_Mask                    (((uint32_t)0x01) << 9)
#define LPUART_CR1_PS                         LPUART_CR1_PS_Mask
#define LPUART_CR1_PEIE_Pos                   ((uint32_t)8)                     /* PE interrupt enable */
#define LPUART_CR1_PEIE_Mask                  (((uint32_t)0x01) << 8)
#define LPUART_CR1_PEIE                       LPUART_CR1_PEIE_Mask
#define LPUART_CR1_TXEIE_Pos                  ((uint32_t)7)                     /* Interrupt enable */
#define LPUART_CR1_TXEIE_Mask                 (((uint32_t)0x01) << 7)
#define LPUART_CR1_TXEIE                      LPUART_CR1_TXEIE_Mask
#define LPUART_CR1_TCIE_Pos                   ((uint32_t)6)                     /* Transfer complete interrupt enable */
#define LPUART_CR1_TCIE_Mask                  (((uint32_t)0x01) << 6)
#define LPUART_CR1_TCIE                       LPUART_CR1_TCIE_Mask
#define LPUART_CR1_RXNEIE_Pos                 ((uint32_t)5)                     /* RXNE interrupt enable */
#define LPUART_CR1_RXNEIE_Mask                (((uint32_t)0x01) << 5)
#define LPUART_CR1_RXNEIE                     LPUART_CR1_RXNEIE_Mask
#define LPUART_CR1_IDLEIE_Pos                 ((uint32_t)4)                     /* IDLE interrupt enable */
#define LPUART_CR1_IDLEIE_Mask                (((uint32_t)0x01) << 4)
#define LPUART_CR1_IDLEIE                     LPUART_CR1_IDLEIE_Mask
#define LPUART_CR1_TE_Pos                     ((uint32_t)3)                     /* Transmitter enable */
#define LPUART_CR1_TE_Mask                    (((uint32_t)0x01) << 3)
#define LPUART_CR1_TE                         LPUART_CR1_TE_Mask
#define LPUART_CR1_RE_Pos                     ((uint32_t)2)                     /* Receiver enable */
#define LPUART_CR1_RE_Mask                    (((uint32_t)0x01) << 2)
#define LPUART_CR1_RE                         LPUART_CR1_RE_Mask
#define LPUART_CR1_UESM_Pos                   ((uint32_t)1)                     /* LPUART enable in Stop mode */
#define LPUART_CR1_UESM_Mask                  (((uint32_t)0x01) << 1)
#define LPUART_CR1_UESM                       LPUART_CR1_UESM_Mask
#define LPUART_CR1_UE_Pos                     ((uint32_t)0)                     /* LPUART enable */
#define LPUART_CR1_UE_Mask                    (((uint32_t)0x01) << 0)
#define LPUART_CR1_UE                         LPUART_CR1_UE_Mask

/************************************ LPUART->CR2  **************************************/
#define LPUART_CR2_ADD_Pos                    ((uint32_t)24)                    /* Address of the USART node */
#define LPUART_CR2_ADD_Mask                   (((uint32_t)0xFF) << 24)
#define LPUART_CR2_ADD                        LPUART_CR2_ADD_Mask
#define LPUART_CR2_ADD_0                      (((uint32_t)0x1 << LPUART_CR2_ADD_Pos))
#define LPUART_CR2_ADD_1                      (((uint32_t)0x2 << LPUART_CR2_ADD_Pos))
#define LPUART_CR2_ADD_2                      (((uint32_t)0x4 << LPUART_CR2_ADD_Pos))
#define LPUART_CR2_ADD_3                      (((uint32_t)0x8 << LPUART_CR2_ADD_Pos))
#define LPUART_CR2_ADD_4                      (((uint32_t)0x10 << LPUART_CR2_ADD_Pos))
#define LPUART_CR2_ADD_5                      (((uint32_t)0x20 << LPUART_CR2_ADD_Pos))
#define LPUART_CR2_ADD_6                      (((uint32_t)0x40 << LPUART_CR2_ADD_Pos))
#define LPUART_CR2_ADD_7                      (((uint32_t)0x80 << LPUART_CR2_ADD_Pos))
#define LPUART_CR2_MSBFIRST_Pos               ((uint32_t)19)                    /* Most significant bit first */
#define LPUART_CR2_MSBFIRST_Mask              (((uint32_t)0x01) << 19)
#define LPUART_CR2_MSBFIRST                   LPUART_CR2_MSBFIRST_Mask
#define LPUART_CR2_DATAINV_Pos                ((uint32_t)18)                    /* Binary data inversion */
#define LPUART_CR2_DATAINV_Mask               (((uint32_t)0x01) << 18)
#define LPUART_CR2_DATAINV                    LPUART_CR2_DATAINV_Mask
#define LPUART_CR2_TXINV_Pos                  ((uint32_t)17)                    /* TX pin active level inversion */
#define LPUART_CR2_TXINV_Mask                 (((uint32_t)0x01) << 17)
#define LPUART_CR2_TXINV                      LPUART_CR2_TXINV_Mask
#define LPUART_CR2_RXINV_Pos                  ((uint32_t)16)                    /* RX pin active level inversion */
#define LPUART_CR2_RXINV_Mask                 (((uint32_t)0x01) << 16)
#define LPUART_CR2_RXINV                      LPUART_CR2_RXINV_Mask
#define LPUART_CR2_SWAP_Pos                   ((uint32_t)15)                    /* Swap TX/RX pins */
#define LPUART_CR2_SWAP_Mask                  (((uint32_t)0x01) << 15)
#define LPUART_CR2_SWAP                       LPUART_CR2_SWAP_Mask
#define LPUART_CR2_STOP_Pos                   ((uint32_t)12)                    /* STOP bits */
#define LPUART_CR2_STOP_Mask                  (((uint32_t)0x03) << 12)
#define LPUART_CR2_STOP                       LPUART_CR2_STOP_Mask
#define LPUART_CR2_STOP_0                     (((uint32_t)0x1 << LPUART_CR2_STOP_Pos))
#define LPUART_CR2_STOP_1                     (((uint32_t)0x2 << LPUART_CR2_STOP_Pos))
#define LPUART_CR2_ADDM7_Pos                  ((uint32_t)4)                     /* 7-bit Address Detection/4-bit Address Detection */
#define LPUART_CR2_ADDM7_Mask                 (((uint32_t)0x01) << 4)
#define LPUART_CR2_ADDM7                      LPUART_CR2_ADDM7_Mask

/************************************ LPUART->CR3  **************************************/
#define LPUART_CR3_WUFIE_Pos                  ((uint32_t)22)                    /* Wakeup from Stop mode interrupt enable */
#define LPUART_CR3_WUFIE_Mask                 (((uint32_t)0x01) << 22)
#define LPUART_CR3_WUFIE                      LPUART_CR3_WUFIE_Mask
#define LPUART_CR3_WUS_Pos                    ((uint32_t)20)                    /* Wakeup from Stop mode interrupt flag selection */
#define LPUART_CR3_WUS_Mask                   (((uint32_t)0x03) << 20)
#define LPUART_CR3_WUS                        LPUART_CR3_WUS_Mask
#define LPUART_CR3_WUS_0                      (((uint32_t)0x1 << LPUART_CR3_WUS_Pos))
#define LPUART_CR3_WUS_1                      (((uint32_t)0x2 << LPUART_CR3_WUS_Pos))
#define LPUART_CR3_DEP_Pos                    ((uint32_t)15)                    /* Driver enable polarity selection */
#define LPUART_CR3_DEP_Mask                   (((uint32_t)0x01) << 15)
#define LPUART_CR3_DEP                        LPUART_CR3_DEP_Mask
#define LPUART_CR3_DEM_Pos                    ((uint32_t)14)                    /* Driver enable mode */
#define LPUART_CR3_DEM_Mask                   (((uint32_t)0x01) << 14)
#define LPUART_CR3_DEM                        LPUART_CR3_DEM_Mask
#define LPUART_CR3_DDRE_Pos                   ((uint32_t)13)                    /* DMA Disable on Reception Error */
#define LPUART_CR3_DDRE_Mask                  (((uint32_t)0x01) << 13)
#define LPUART_CR3_DDRE                       LPUART_CR3_DDRE_Mask
#define LPUART_CR3_OVRDIS_Pos                 ((uint32_t)12)                    /* Overrun Disable */
#define LPUART_CR3_OVRDIS_Mask                (((uint32_t)0x01) << 12)
#define LPUART_CR3_OVRDIS                     LPUART_CR3_OVRDIS_Mask
#define LPUART_CR3_CTSIE_Pos                  ((uint32_t)10)                    /* CTS interrupt enable */
#define LPUART_CR3_CTSIE_Mask                 (((uint32_t)0x01) << 10)
#define LPUART_CR3_CTSIE                      LPUART_CR3_CTSIE_Mask
#define LPUART_CR3_CTSE_Pos                   ((uint32_t)9)                     /* CTS enable */
#define LPUART_CR3_CTSE_Mask                  (((uint32_t)0x01) << 9)
#define LPUART_CR3_CTSE                       LPUART_CR3_CTSE_Mask
#define LPUART_CR3_RTSE_Pos                   ((uint32_t)8)                     /* RTS enable */
#define LPUART_CR3_RTSE_Mask                  (((uint32_t)0x01) << 8)
#define LPUART_CR3_RTSE                       LPUART_CR3_RTSE_Mask
#define LPUART_CR3_DMAT_Pos                   ((uint32_t)7)                     /* DMA enable transmitter */
#define LPUART_CR3_DMAT_Mask                  (((uint32_t)0x01) << 7)
#define LPUART_CR3_DMAT                       LPUART_CR3_DMAT_Mask
#define LPUART_CR3_DMAR_Pos                   ((uint32_t)6)                     /* DMA enable receiver */
#define LPUART_CR3_DMAR_Mask                  (((uint32_t)0x01) << 6)
#define LPUART_CR3_DMAR                       LPUART_CR3_DMAR_Mask
#define LPUART_CR3_HDSEL_Pos                  ((uint32_t)3)                     /* Half-duplex selection */
#define LPUART_CR3_HDSEL_Mask                 (((uint32_t)0x01) << 3)
#define LPUART_CR3_HDSEL                      LPUART_CR3_HDSEL_Mask
#define LPUART_CR3_EIE_Pos                    ((uint32_t)0)                     /* Error interrupt enable */
#define LPUART_CR3_EIE_Mask                   (((uint32_t)0x01) << 0)
#define LPUART_CR3_EIE                        LPUART_CR3_EIE_Mask

/************************************ LPUART->BRR  **************************************/
#define LPUART_BRR_BRR_Pos                    ((uint32_t)0)                     /* Baud Rate Register parameter */
#define LPUART_BRR_BRR_Mask                   (((uint32_t)0x0FFFFF) << 0)
#define LPUART_BRR_BRR                        LPUART_BRR_BRR_Mask

/************************************ LPUART->RQR  **************************************/
#define LPUART_RQR_RXFRQ_Pos                  ((uint32_t)3)                     /* Receive data flush request */
#define LPUART_RQR_RXFRQ_Mask                 (((uint32_t)0x01) << 3)
#define LPUART_RQR_RXFRQ                      LPUART_RQR_RXFRQ_Mask
#define LPUART_RQR_MMRQ_Pos                   ((uint32_t)2)                     /* Mute mode request */
#define LPUART_RQR_MMRQ_Mask                  (((uint32_t)0x01) << 2)
#define LPUART_RQR_MMRQ                       LPUART_RQR_MMRQ_Mask
#define LPUART_RQR_SBKRQ_Pos                  ((uint32_t)1)                     /* Send break request */
#define LPUART_RQR_SBKRQ_Mask                 (((uint32_t)0x01) << 1)
#define LPUART_RQR_SBKRQ                      LPUART_RQR_SBKRQ_Mask

/************************************ LPUART->ISR  **************************************/
#define LPUART_ISR_REACK_Pos                  ((uint32_t)22)                    /* Receive enable acknowledge flag */
#define LPUART_ISR_REACK_Mask                 (((uint32_t)0x01) << 22)
#define LPUART_ISR_REACK                      LPUART_ISR_REACK_Mask
#define LPUART_ISR_TEACK_Pos                  ((uint32_t)21)                    /* Transmit enable acknowledge flag */
#define LPUART_ISR_TEACK_Mask                 (((uint32_t)0x01) << 21)
#define LPUART_ISR_TEACK                      LPUART_ISR_TEACK_Mask
#define LPUART_ISR_WUF_Pos                    ((uint32_t)20)                    /* Wakeup from Stop mode flag */
#define LPUART_ISR_WUF_Mask                   (((uint32_t)0x01) << 20)
#define LPUART_ISR_WUF                        LPUART_ISR_WUF_Mask
#define LPUART_ISR_RWU_Pos                    ((uint32_t)19)                    /* Receiver wakeup from Mute mode */
#define LPUART_ISR_RWU_Mask                   (((uint32_t)0x01) << 19)
#define LPUART_ISR_RWU                        LPUART_ISR_RWU_Mask
#define LPUART_ISR_SBKF_Pos                   ((uint32_t)18)                    /* Send break flag */
#define LPUART_ISR_SBKF_Mask                  (((uint32_t)0x01) << 18)
#define LPUART_ISR_SBKF                       LPUART_ISR_SBKF_Mask
#define LPUART_ISR_CMF_Pos                    ((uint32_t)17)                    /* Character match flag */
#define LPUART_ISR_CMF_Mask                   (((uint32_t)0x01) << 17)
#define LPUART_ISR_CMF                        LPUART_ISR_CMF_Mask
#define LPUART_ISR_BUSY_Pos                   ((uint32_t)16)                    /* Busy flag */
#define LPUART_ISR_BUSY_Mask                  (((uint32_t)0x01) << 16)
#define LPUART_ISR_BUSY                       LPUART_ISR_BUSY_Mask
#define LPUART_ISR_CTS_Pos                    ((uint32_t)10)                    /* CTS flag */
#define LPUART_ISR_CTS_Mask                   (((uint32_t)0x01) << 10)
#define LPUART_ISR_CTS                        LPUART_ISR_CTS_Mask
#define LPUART_ISR_CTSIF_Pos                  ((uint32_t)9)                     /* CTS interrupt flag */
#define LPUART_ISR_CTSIF_Mask                 (((uint32_t)0x01) << 9)
#define LPUART_ISR_CTSIF                      LPUART_ISR_CTSIF_Mask
#define LPUART_ISR_TXE_Pos                    ((uint32_t)7)                     /* Transmit data register empty */
#define LPUART_ISR_TXE_Mask                   (((uint32_t)0x01) << 7)
#define LPUART_ISR_TXE                        LPUART_ISR_TXE_Mask
#define LPUART_ISR_TC_Pos                     ((uint32_t)6)                     /* Transmission complete */
#define LPUART_ISR_TC_Mask                    (((uint32_t)0x01) << 6)
#define LPUART_ISR_TC                         LPUART_ISR_TC_Mask
#define LPUART_ISR_RXNE_Pos                   ((uint32_t)5)                     /* Read data register not empty */
#define LPUART_ISR_RXNE_Mask                  (((uint32_t)0x01) << 5)
#define LPUART_ISR_RXNE                       LPUART_ISR_RXNE_Mask
#define LPUART_ISR_IDLE_Pos                   ((uint32_t)4)                     /* IDLE line detected */
#define LPUART_ISR_IDLE_Mask                  (((uint32_t)0x01) << 4)
#define LPUART_ISR_IDLE                       LPUART_ISR_IDLE_Mask
#define LPUART_ISR_ORE_Pos                    ((uint32_t)3)                     /* Overrun error */
#define LPUART_ISR_ORE_Mask                   (((uint32_t)0x01) << 3)
#define LPUART_ISR_ORE                        LPUART_ISR_ORE_Mask
#define LPUART_ISR_NF_Pos                     ((uint32_t)2)                     /* START bit Noise detection flag */
#define LPUART_ISR_NF_Mask                    (((uint32_t)0x01) << 2)
#define LPUART_ISR_NF                         LPUART_ISR_NF_Mask
#define LPUART_ISR_FE_Pos                     ((uint32_t)1)                     /* Framing error */
#define LPUART_ISR_FE_Mask                    (((uint32_t)0x01) << 1)
#define LPUART_ISR_FE                         LPUART_ISR_FE_Mask
#define LPUART_ISR_PE_Pos                     ((uint32_t)0)                     /* Parity error */
#define LPUART_ISR_PE_Mask                    (((uint32_t)0x01) << 0)
#define LPUART_ISR_PE                         LPUART_ISR_PE_Mask

/************************************ LPUART->ICR  **************************************/
#define LPUART_ICR_WUCF_Pos                   ((uint32_t)20)                    /* Wakeup from Stop mode clear flag */
#define LPUART_ICR_WUCF_Mask                  (((uint32_t)0x01) << 20)
#define LPUART_ICR_WUCF                       LPUART_ICR_WUCF_Mask
#define LPUART_ICR_CMCF_Pos                   ((uint32_t)17)                    /* Character match clear flag */
#define LPUART_ICR_CMCF_Mask                  (((uint32_t)0x01) << 17)
#define LPUART_ICR_CMCF                       LPUART_ICR_CMCF_Mask
#define LPUART_ICR_CTSCF_Pos                  ((uint32_t)9)                     /* CTS clear flag */
#define LPUART_ICR_CTSCF_Mask                 (((uint32_t)0x01) << 9)
#define LPUART_ICR_CTSCF                      LPUART_ICR_CTSCF_Mask
#define LPUART_ICR_TCCF_Pos                   ((uint32_t)6)                     /* Transmission complete clear flag */
#define LPUART_ICR_TCCF_Mask                  (((uint32_t)0x01) << 6)
#define LPUART_ICR_TCCF                       LPUART_ICR_TCCF_Mask
#define LPUART_ICR_IDLECF_Pos                 ((uint32_t)4)                     /* Idle line detected clear flag */
#define LPUART_ICR_IDLECF_Mask                (((uint32_t)0x01) << 4)
#define LPUART_ICR_IDLECF                     LPUART_ICR_IDLECF_Mask
#define LPUART_ICR_ORECF_Pos                  ((uint32_t)3)                     /* Overrun error clear flag */
#define LPUART_ICR_ORECF_Mask                 (((uint32_t)0x01) << 3)
#define LPUART_ICR_ORECF                      LPUART_ICR_ORECF_Mask
#define LPUART_ICR_NCF_Pos                    ((uint32_t)2)                     /* Noise detected clear flag */
#define LPUART_ICR_NCF_Mask                   (((uint32_t)0x01) << 2)
#define LPUART_ICR_NCF                        LPUART_ICR_NCF_Mask
#define LPUART_ICR_FECF_Pos                   ((uint32_t)1)                     /* Framing error clear flag */
#define LPUART_ICR_FECF_Mask                  (((uint32_t)0x01) << 1)
#define LPUART_ICR_FECF                       LPUART_ICR_FECF_Mask
#define LPUART_ICR_PECF_Pos                   ((uint32_t)0)                     /* Parity error clear flag */
#define LPUART_ICR_PECF_Mask                  (((uint32_t)0x01) << 0)
#define LPUART_ICR_PECF                       LPUART_ICR_PECF_Mask

/************************************ LPUART->RDR  **************************************/
#define LPUART_RDR_RDR_Pos                    ((uint32_t)0)                     /* Receive data value */
#define LPUART_RDR_RDR_Mask                   (((uint32_t)0x01FF) << 0)
#define LPUART_RDR_RDR                        LPUART_RDR_RDR_Mask
#define LPUART_RDR_RDR_0                      (((uint32_t)0x1))
#define LPUART_RDR_RDR_1                      (((uint32_t)0x2))
#define LPUART_RDR_RDR_2                      (((uint32_t)0x4))
#define LPUART_RDR_RDR_3                      (((uint32_t)0x8))
#define LPUART_RDR_RDR_4                      (((uint32_t)0x10))
#define LPUART_RDR_RDR_5                      (((uint32_t)0x20))
#define LPUART_RDR_RDR_6                      (((uint32_t)0x40))
#define LPUART_RDR_RDR_7                      (((uint32_t)0x80))
#define LPUART_RDR_RDR_8                      (((uint32_t)0x100))

/************************************ LPUART->TDR  **************************************/
#define LPUART_TDR_TDR_Pos                    ((uint32_t)0)                     /* Transmit data value */
#define LPUART_TDR_TDR_Mask                   (((uint32_t)0x01FF) << 0)
#define LPUART_TDR_TDR                        LPUART_TDR_TDR_Mask
#define LPUART_TDR_TDR_0                      (((uint32_t)0x1))
#define LPUART_TDR_TDR_1                      (((uint32_t)0x2))
#define LPUART_TDR_TDR_2                      (((uint32_t)0x4))
#define LPUART_TDR_TDR_3                      (((uint32_t)0x8))
#define LPUART_TDR_TDR_4                      (((uint32_t)0x10))
#define LPUART_TDR_TDR_5                      (((uint32_t)0x20))
#define LPUART_TDR_TDR_6                      (((uint32_t)0x40))
#define LPUART_TDR_TDR_7                      (((uint32_t)0x80))
#define LPUART_TDR_TDR_8                      (((uint32_t)0x100))

/*****************************************************************************************
*                                     Peripheral SPI                                     *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t CR1;                    /* CR1 */
    __IO uint32_t CR2;                    /* CR2 */
    __IO uint32_t SR;                     /* SR */
    __IO uint32_t DR;                     /* DR */
    __IO uint32_t CRCPR;                  /* CRCPR */
    __I  uint32_t RXCRCR;                 /* RXCRCR */
    __I  uint32_t TXCRCR;                 /* TXCRCR */
    __IO uint32_t I2SCFGR;                /* I2SCFGR */
    __IO uint32_t I2SPR;                  /* I2SPR */
    uint16_t RESERVED1[2];
    __IO uint32_t PLUS;                   /* PLUS */
} SPI_TypeDef;

/************************************** SPI->CR1  ***************************************/
#define SPI_CR1_BIDIMODE_Pos                  ((uint32_t)15)                    /* Bidirectional data mode enable */
#define SPI_CR1_BIDIMODE_Mask                 (((uint32_t)0x01) << 15)
#define SPI_CR1_BIDIMODE                      SPI_CR1_BIDIMODE_Mask
#define SPI_CR1_BIDIOE_Pos                    ((uint32_t)14)                    /* Output enable in bidirectional mode */
#define SPI_CR1_BIDIOE_Mask                   (((uint32_t)0x01) << 14)
#define SPI_CR1_BIDIOE                        SPI_CR1_BIDIOE_Mask
#define SPI_CR1_CRCEN_Pos                     ((uint32_t)13)                    /* Hardware CRC calculation enable */
#define SPI_CR1_CRCEN_Mask                    (((uint32_t)0x01) << 13)
#define SPI_CR1_CRCEN                         SPI_CR1_CRCEN_Mask
#define SPI_CR1_CRCNEXT_Pos                   ((uint32_t)12)                    /* Transmit CRC next */
#define SPI_CR1_CRCNEXT_Mask                  (((uint32_t)0x01) << 12)
#define SPI_CR1_CRCNEXT                       SPI_CR1_CRCNEXT_Mask
#define SPI_CR1_CRCL_Pos                      ((uint32_t)11)                    /* CRC length */
#define SPI_CR1_CRCL_Mask                     (((uint32_t)0x01) << 11)
#define SPI_CR1_CRCL                          SPI_CR1_CRCL_Mask
#define SPI_CR1_RXONLY_Pos                    ((uint32_t)10)                    /* Receive only mode enabled */
#define SPI_CR1_RXONLY_Mask                   (((uint32_t)0x01) << 10)
#define SPI_CR1_RXONLY                        SPI_CR1_RXONLY_Mask
#define SPI_CR1_SSM_Pos                       ((uint32_t)9)                     /* Software slave management */
#define SPI_CR1_SSM_Mask                      (((uint32_t)0x01) << 9)
#define SPI_CR1_SSM                           SPI_CR1_SSM_Mask
#define SPI_CR1_SSI_Pos                       ((uint32_t)8)                     /* Internal slave select */
#define SPI_CR1_SSI_Mask                      (((uint32_t)0x01) << 8)
#define SPI_CR1_SSI                           SPI_CR1_SSI_Mask
#define SPI_CR1_LSBFIRST_Pos                  ((uint32_t)7)                     /* Frame format */
#define SPI_CR1_LSBFIRST_Mask                 (((uint32_t)0x01) << 7)
#define SPI_CR1_LSBFIRST                      SPI_CR1_LSBFIRST_Mask
#define SPI_CR1_SPE_Pos                       ((uint32_t)6)                     /* SPI enable */
#define SPI_CR1_SPE_Mask                      (((uint32_t)0x01) << 6)
#define SPI_CR1_SPE                           SPI_CR1_SPE_Mask
#define SPI_CR1_BR_Pos                        ((uint32_t)3)                     /* Baud rate control */
#define SPI_CR1_BR_Mask                       (((uint32_t)0x07) << 3)
#define SPI_CR1_BR                            SPI_CR1_BR_Mask
#define SPI_CR1_BR_0                          (((uint32_t)0x1 << SPI_CR1_BR_Pos))
#define SPI_CR1_BR_1                          (((uint32_t)0x2 << SPI_CR1_BR_Pos))
#define SPI_CR1_BR_2                          (((uint32_t)0x4 << SPI_CR1_BR_Pos))
#define SPI_CR1_MSTR_Pos                      ((uint32_t)2)                     /* Master selection */
#define SPI_CR1_MSTR_Mask                     (((uint32_t)0x01) << 2)
#define SPI_CR1_MSTR                          SPI_CR1_MSTR_Mask
#define SPI_CR1_CPOL_Pos                      ((uint32_t)1)                     /* Clock polarity */
#define SPI_CR1_CPOL_Mask                     (((uint32_t)0x01) << 1)
#define SPI_CR1_CPOL                          SPI_CR1_CPOL_Mask
#define SPI_CR1_CPHA_Pos                      ((uint32_t)0)                     /* Clock phase */
#define SPI_CR1_CPHA_Mask                     (((uint32_t)0x01) << 0)
#define SPI_CR1_CPHA                          SPI_CR1_CPHA_Mask

/************************************** SPI->CR2  ***************************************/
#define SPI_CR2_LDMA_TX_Pos                   ((uint32_t)14)                    /* Last DMA transfer for transmission */
#define SPI_CR2_LDMA_TX_Mask                  (((uint32_t)0x01) << 14)
#define SPI_CR2_LDMA_TX                       SPI_CR2_LDMA_TX_Mask
#define SPI_CR2_LDMA_RX_Pos                   ((uint32_t)13)                    /* Last DMA transfer for reception */
#define SPI_CR2_LDMA_RX_Mask                  (((uint32_t)0x01) << 13)
#define SPI_CR2_LDMA_RX                       SPI_CR2_LDMA_RX_Mask
#define SPI_CR2_FRXTH_Pos                     ((uint32_t)12)                    /* FIFO reception threshold */
#define SPI_CR2_FRXTH_Mask                    (((uint32_t)0x01) << 12)
#define SPI_CR2_FRXTH                         SPI_CR2_FRXTH_Mask
#define SPI_CR2_DS_Pos                        ((uint32_t)8)                     /* Data size */
#define SPI_CR2_DS_Mask                       (((uint32_t)0x0F) << 8)
#define SPI_CR2_DS                            SPI_CR2_DS_Mask
#define SPI_CR2_DS_0                          (((uint32_t)0x1 << SPI_CR2_DS_Pos))
#define SPI_CR2_DS_1                          (((uint32_t)0x2 << SPI_CR2_DS_Pos))
#define SPI_CR2_DS_2                          (((uint32_t)0x4 << SPI_CR2_DS_Pos))
#define SPI_CR2_DS_3                          (((uint32_t)0x8 << SPI_CR2_DS_Pos))
#define SPI_CR2_TXEIE_Pos                     ((uint32_t)7)                     /* Tx buffer empty interrupt enable */
#define SPI_CR2_TXEIE_Mask                    (((uint32_t)0x01) << 7)
#define SPI_CR2_TXEIE                         SPI_CR2_TXEIE_Mask
#define SPI_CR2_RXNEIE_Pos                    ((uint32_t)6)                     /* RX buffer not empty interrupt enable */
#define SPI_CR2_RXNEIE_Mask                   (((uint32_t)0x01) << 6)
#define SPI_CR2_RXNEIE                        SPI_CR2_RXNEIE_Mask
#define SPI_CR2_ERRIE_Pos                     ((uint32_t)5)                     /* Error interrupt enable */
#define SPI_CR2_ERRIE_Mask                    (((uint32_t)0x01) << 5)
#define SPI_CR2_ERRIE                         SPI_CR2_ERRIE_Mask
#define SPI_CR2_FRF_Pos                       ((uint32_t)4)                     /* Frame format */
#define SPI_CR2_FRF_Mask                      (((uint32_t)0x01) << 4)
#define SPI_CR2_FRF                           SPI_CR2_FRF_Mask
#define SPI_CR2_NSSP_Pos                      ((uint32_t)3)                     /* NSS pulse management */
#define SPI_CR2_NSSP_Mask                     (((uint32_t)0x01) << 3)
#define SPI_CR2_NSSP                          SPI_CR2_NSSP_Mask
#define SPI_CR2_SSOE_Pos                      ((uint32_t)2)                     /* SS output enable */
#define SPI_CR2_SSOE_Mask                     (((uint32_t)0x01) << 2)
#define SPI_CR2_SSOE                          SPI_CR2_SSOE_Mask
#define SPI_CR2_TXDMAEN_Pos                   ((uint32_t)1)                     /* Tx buffer DMA enable */
#define SPI_CR2_TXDMAEN_Mask                  (((uint32_t)0x01) << 1)
#define SPI_CR2_TXDMAEN                       SPI_CR2_TXDMAEN_Mask
#define SPI_CR2_RXDMAEN_Pos                   ((uint32_t)0)                     /* Rx buffer DMA enable */
#define SPI_CR2_RXDMAEN_Mask                  (((uint32_t)0x01) << 0)
#define SPI_CR2_RXDMAEN                       SPI_CR2_RXDMAEN_Mask

/************************************** SPI->SR  ****************************************/
#define SPI_SR_FTLVL_Pos                      ((uint32_t)11)                    /* FIFO Transmission Level */
#define SPI_SR_FTLVL_Mask                     (((uint32_t)0x03) << 11)
#define SPI_SR_FTLVL                          SPI_SR_FTLVL_Mask
#define SPI_SR_FTLVL_0                        (((uint32_t)0x1 << SPI_SR_FTLVL_Pos))
#define SPI_SR_FTLVL_1                        (((uint32_t)0x2 << SPI_SR_FTLVL_Pos))
#define SPI_SR_FRLVL_Pos                      ((uint32_t)9)                     /* FIFO reception level */
#define SPI_SR_FRLVL_Mask                     (((uint32_t)0x03) << 9)
#define SPI_SR_FRLVL                          SPI_SR_FRLVL_Mask
#define SPI_SR_FRLVL_0                        (((uint32_t)0x1 << SPI_SR_FRLVL_Pos))
#define SPI_SR_FRLVL_1                        (((uint32_t)0x2 << SPI_SR_FRLVL_Pos))
#define SPI_SR_FRE_Pos                        ((uint32_t)8)                     /* Frame format error */
#define SPI_SR_FRE_Mask                       (((uint32_t)0x01) << 8)
#define SPI_SR_FRE                            SPI_SR_FRE_Mask
#define SPI_SR_BSY_Pos                        ((uint32_t)7)                     /* Busy flag */
#define SPI_SR_BSY_Mask                       (((uint32_t)0x01) << 7)
#define SPI_SR_BSY                            SPI_SR_BSY_Mask
#define SPI_SR_OVR_Pos                        ((uint32_t)6)                     /* Overrun flag */
#define SPI_SR_OVR_Mask                       (((uint32_t)0x01) << 6)
#define SPI_SR_OVR                            SPI_SR_OVR_Mask
#define SPI_SR_MODF_Pos                       ((uint32_t)5)                     /* Mode fault */
#define SPI_SR_MODF_Mask                      (((uint32_t)0x01) << 5)
#define SPI_SR_MODF                           SPI_SR_MODF_Mask
#define SPI_SR_CRCERR_Pos                     ((uint32_t)4)                     /* CRC error flag */
#define SPI_SR_CRCERR_Mask                    (((uint32_t)0x01) << 4)
#define SPI_SR_CRCERR                         SPI_SR_CRCERR_Mask
#define SPI_SR_UDR_Pos                        ((uint32_t)3)                     /* Underrun flag */
#define SPI_SR_UDR_Mask                       (((uint32_t)0x01) << 3)
#define SPI_SR_UDR                            SPI_SR_UDR_Mask
#define SPI_SR_CHSIDE_Pos                     ((uint32_t)2)                     /* Channel side */
#define SPI_SR_CHSIDE_Mask                    (((uint32_t)0x01) << 2)
#define SPI_SR_CHSIDE                         SPI_SR_CHSIDE_Mask
#define SPI_SR_TXE_Pos                        ((uint32_t)1)                     /* Transmit buffer empty */
#define SPI_SR_TXE_Mask                       (((uint32_t)0x01) << 1)
#define SPI_SR_TXE                            SPI_SR_TXE_Mask
#define SPI_SR_RXNE_Pos                       ((uint32_t)0)                     /* Receive buffer not empty */
#define SPI_SR_RXNE_Mask                      (((uint32_t)0x01) << 0)
#define SPI_SR_RXNE                           SPI_SR_RXNE_Mask

/************************************** SPI->DR  ****************************************/
#define SPI_DR_DR_Pos                         ((uint32_t)0)                     /* Data register */
#define SPI_DR_DR_Mask                        (((uint32_t)0xFFFF) << 0)
#define SPI_DR_DR                             SPI_DR_DR_Mask

/************************************* SPI->CRCPR  **************************************/
#define SPI_CRCPR_CRCPOLY_Pos                 ((uint32_t)0)                     /* CRC polynomial register */
#define SPI_CRCPR_CRCPOLY_Mask                (((uint32_t)0xFFFF) << 0)
#define SPI_CRCPR_CRCPOLY                     SPI_CRCPR_CRCPOLY_Mask

/************************************ SPI->RXCRCR  **************************************/
#define SPI_RXCRCR_RXCRC_Pos                  ((uint32_t)0)                     /* RX CRC register */
#define SPI_RXCRCR_RXCRC_Mask                 (((uint32_t)0xFFFF) << 0)
#define SPI_RXCRCR_RXCRC                      SPI_RXCRCR_RXCRC_Mask

/************************************ SPI->TXCRCR  **************************************/
#define SPI_TXCRCR_TXCRC_Pos                  ((uint32_t)0)                     /* TX CRC register */
#define SPI_TXCRCR_TXCRC_Mask                 (((uint32_t)0xFFFF) << 0)
#define SPI_TXCRCR_TXCRC                      SPI_TXCRCR_TXCRC_Mask

/************************************ SPI->I2SCFGR  *************************************/
#define SPI_I2SCFGR_I2SMOD_Pos                ((uint32_t)11)                    /* I2S mode selection */
#define SPI_I2SCFGR_I2SMOD_Mask               (((uint32_t)0x01) << 11)
#define SPI_I2SCFGR_I2SMOD                    SPI_I2SCFGR_I2SMOD_Mask
#define SPI_I2SCFGR_I2SE_Pos                  ((uint32_t)10)                    /* I2S enable */
#define SPI_I2SCFGR_I2SE_Mask                 (((uint32_t)0x01) << 10)
#define SPI_I2SCFGR_I2SE                      SPI_I2SCFGR_I2SE_Mask
#define SPI_I2SCFGR_I2SCFG_Pos                ((uint32_t)8)                     /* I2S configuration mode */
#define SPI_I2SCFGR_I2SCFG_Mask               (((uint32_t)0x03) << 8)
#define SPI_I2SCFGR_I2SCFG                    SPI_I2SCFGR_I2SCFG_Mask
#define SPI_I2SCFGR_I2SCFG_0                  (((uint32_t)0x1 << SPI_I2SCFGR_I2SCFG_Pos))
#define SPI_I2SCFGR_I2SCFG_1                  (((uint32_t)0x2 << SPI_I2SCFGR_I2SCFG_Pos))
#define SPI_I2SCFGR_PCMSYNC_Pos               ((uint32_t)7)                     /* PCM frame synchronization */
#define SPI_I2SCFGR_PCMSYNC_Mask              (((uint32_t)0x01) << 7)
#define SPI_I2SCFGR_PCMSYNC                   SPI_I2SCFGR_PCMSYNC_Mask
#define SPI_I2SCFGR_I2SSTD_Pos                ((uint32_t)4)                     /* I2S standard selection */
#define SPI_I2SCFGR_I2SSTD_Mask               (((uint32_t)0x03) << 4)
#define SPI_I2SCFGR_I2SSTD                    SPI_I2SCFGR_I2SSTD_Mask
#define SPI_I2SCFGR_I2SSTD_0                  (((uint32_t)0x1 << SPI_I2SCFGR_I2SSTD_Pos))
#define SPI_I2SCFGR_I2SSTD_1                  (((uint32_t)0x2 << SPI_I2SCFGR_I2SSTD_Pos))
#define SPI_I2SCFGR_CKPOL_Pos                 ((uint32_t)3)                     /* Inactive state clock polarity */
#define SPI_I2SCFGR_CKPOL_Mask                (((uint32_t)0x01) << 3)
#define SPI_I2SCFGR_CKPOL                     SPI_I2SCFGR_CKPOL_Mask
#define SPI_I2SCFGR_DATLEN_Pos                ((uint32_t)1)                     /* Data length to be transferred */
#define SPI_I2SCFGR_DATLEN_Mask               (((uint32_t)0x03) << 1)
#define SPI_I2SCFGR_DATLEN                    SPI_I2SCFGR_DATLEN_Mask
#define SPI_I2SCFGR_DATLEN_0                  (((uint32_t)0x1 << SPI_I2SCFGR_DATLEN_Pos))
#define SPI_I2SCFGR_DATLEN_1                  (((uint32_t)0x2 << SPI_I2SCFGR_DATLEN_Pos))
#define SPI_I2SCFGR_CHLEN_Pos                 ((uint32_t)0)                     /* Channel length means number of bits per audio channel */
#define SPI_I2SCFGR_CHLEN_Mask                (((uint32_t)0x01) << 0)
#define SPI_I2SCFGR_CHLEN                     SPI_I2SCFGR_CHLEN_Mask

/************************************* SPI->I2SPR  **************************************/
#define SPI_I2SPR_MCKOE_Pos                   ((uint32_t)9)                     /* Master clock output enable */
#define SPI_I2SPR_MCKOE_Mask                  (((uint32_t)0x01) << 9)
#define SPI_I2SPR_MCKOE                       SPI_I2SPR_MCKOE_Mask
#define SPI_I2SPR_ODD_Pos                     ((uint32_t)8)                     /* Odd factor for the prescaler */
#define SPI_I2SPR_ODD_Mask                    (((uint32_t)0x01) << 8)
#define SPI_I2SPR_ODD                         SPI_I2SPR_ODD_Mask
#define SPI_I2SPR_I2SDIV_Pos                  ((uint32_t)0)                     /* I2S linear prescaler */
#define SPI_I2SPR_I2SDIV_Mask                 (((uint32_t)0xFF) << 0)
#define SPI_I2SPR_I2SDIV                      SPI_I2SPR_I2SDIV_Mask
#define SPI_I2SPR_I2SDIV_0                    (((uint32_t)0x1))
#define SPI_I2SPR_I2SDIV_1                    (((uint32_t)0x2))
#define SPI_I2SPR_I2SDIV_2                    (((uint32_t)0x4))
#define SPI_I2SPR_I2SDIV_3                    (((uint32_t)0x8))
#define SPI_I2SPR_I2SDIV_4                    (((uint32_t)0x10))
#define SPI_I2SPR_I2SDIV_5                    (((uint32_t)0x20))
#define SPI_I2SPR_I2SDIV_6                    (((uint32_t)0x40))
#define SPI_I2SPR_I2SDIV_7                    (((uint32_t)0x80))

/************************************* SPI->PLUS  ***************************************/
#define SPI_PLUS_SWAPNS_Pos                   ((uint32_t)1)                     /* Swap NSS and SCLK */
#define SPI_PLUS_SWAPNS_Mask                  (((uint32_t)0x01) << 1)
#define SPI_PLUS_SWAPNS                       SPI_PLUS_SWAPNS_Mask

/*****************************************************************************************
*                                     Peripheral DVSQ                                    *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t DIVIDEND;               /* DIVIDEND */
    __IO uint32_t DIVISOR;                /* DIVISOR */
    __IO uint32_t CSR;                    /* CSR */
    __IO uint32_t RADICAND;               /* RADICAND */
    __IO uint32_t RES;                    /* RES */
    __IO uint32_t REMAINDER;              /* REMAINDER */
} DVSQ_TypeDef;

/*********************************** DVSQ->DIVIDEND  ************************************/
#define DVSQ_DIVIDEND_DIVIDEND_Pos            ((uint32_t)0)                     /* Dividend */
#define DVSQ_DIVIDEND_DIVIDEND_Mask           (((uint32_t)0xFFFFFFFF) << 0)
#define DVSQ_DIVIDEND_DIVIDEND                DVSQ_DIVIDEND_DIVIDEND_Mask

/*********************************** DVSQ->DIVISOR  *************************************/
#define DVSQ_DIVISOR_DIVISOR_Pos              ((uint32_t)0)                     /* Divisor */
#define DVSQ_DIVISOR_DIVISOR_Mask             (((uint32_t)0xFFFFFFFF) << 0)
#define DVSQ_DIVISOR_DIVISOR                  DVSQ_DIVISOR_DIVISOR_Mask

/************************************* DVSQ->CSR  ***************************************/
#define DVSQ_CSR_BUSY_Pos                     ((uint32_t)31)                    /* Busy bit */
#define DVSQ_CSR_BUSY_Mask                    (((uint32_t)0x01) << 31)
#define DVSQ_CSR_BUSY                         DVSQ_CSR_BUSY_Mask
#define DVSQ_CSR_DIV_Pos                      ((uint32_t)30)                    /* Divide operation flag */
#define DVSQ_CSR_DIV_Mask                     (((uint32_t)0x01) << 30)
#define DVSQ_CSR_DIV                          DVSQ_CSR_DIV_Mask
#define DVSQ_CSR_SQRT_Pos                     ((uint32_t)29)                    /* Square-root operation flag */
#define DVSQ_CSR_SQRT_Mask                    (((uint32_t)0x01) << 29)
#define DVSQ_CSR_SQRT                         DVSQ_CSR_SQRT_Mask
#define DVSQ_CSR_HPRESQRT_Pos                 ((uint32_t)7)                     /* High precision square-root operation selection */
#define DVSQ_CSR_HPRESQRT_Mask                (((uint32_t)0x01) << 7)
#define DVSQ_CSR_HPRESQRT                     DVSQ_CSR_HPRESQRT_Mask
#define DVSQ_CSR_OV_FLAG_Pos                  ((uint32_t)6)                     /* Sign divide overflow flag */
#define DVSQ_CSR_OV_FLAG_Mask                 (((uint32_t)0x01) << 6)
#define DVSQ_CSR_OV_FLAG                      DVSQ_CSR_OV_FLAG_Mask
#define DVSQ_CSR_OV_INT_EN_Pos                ((uint32_t)5)                     /* Sign divide overflow interrupt enable */
#define DVSQ_CSR_OV_INT_EN_Mask               (((uint32_t)0x01) << 5)
#define DVSQ_CSR_OV_INT_EN                    DVSQ_CSR_OV_INT_EN_Mask
#define DVSQ_CSR_DZ_FLAG_Pos                  ((uint32_t)4)                     /* Zero divisor flag */
#define DVSQ_CSR_DZ_FLAG_Mask                 (((uint32_t)0x01) << 4)
#define DVSQ_CSR_DZ_FLAG                      DVSQ_CSR_DZ_FLAG_Mask
#define DVSQ_CSR_DZ_INT_EN_Pos                ((uint32_t)3)                     /* Zero divisor interrupt enable */
#define DVSQ_CSR_DZ_INT_EN_Mask               (((uint32_t)0x01) << 3)
#define DVSQ_CSR_DZ_INT_EN                    DVSQ_CSR_DZ_INT_EN_Mask
#define DVSQ_CSR_DFS_Pos                      ((uint32_t)2)                     /* Divide operation fast start disable */
#define DVSQ_CSR_DFS_Mask                     (((uint32_t)0x01) << 2)
#define DVSQ_CSR_DFS                          DVSQ_CSR_DFS_Mask
#define DVSQ_CSR_UNSIGN_DIV_Pos               ((uint32_t)1)                     /* Unsign divide operation enable */
#define DVSQ_CSR_UNSIGN_DIV_Mask              (((uint32_t)0x01) << 1)
#define DVSQ_CSR_UNSIGN_DIV                   DVSQ_CSR_UNSIGN_DIV_Mask
#define DVSQ_CSR_DIV_SRT_Pos                  ((uint32_t)0)                     /* Divide operation start */
#define DVSQ_CSR_DIV_SRT_Mask                 (((uint32_t)0x01) << 0)
#define DVSQ_CSR_DIV_SRT                      DVSQ_CSR_DIV_SRT_Mask

/*********************************** DVSQ->RADICAND  ************************************/
#define DVSQ_RADICAND_RADICAND_Pos            ((uint32_t)0)                     /* Radicand */
#define DVSQ_RADICAND_RADICAND_Mask           (((uint32_t)0xFFFFFFFF) << 0)
#define DVSQ_RADICAND_RADICAND                DVSQ_RADICAND_RADICAND_Mask

/************************************* DVSQ->RES  ***************************************/
#define DVSQ_RES_RESULT_Pos                   ((uint32_t)0)                     /* Result */
#define DVSQ_RES_RESULT_Mask                  (((uint32_t)0xFFFFFFFF) << 0)
#define DVSQ_RES_RESULT                       DVSQ_RES_RESULT_Mask

/********************************** DVSQ->REMAINDER  ************************************/
#define DVSQ_REMAINDER_REMAINDER_Pos          ((uint32_t)0)                     /* Remainder */
#define DVSQ_REMAINDER_REMAINDER_Mask         (((uint32_t)0xFFFFFFFF) << 0)
#define DVSQ_REMAINDER_REMAINDER              DVSQ_REMAINDER_REMAINDER_Mask

/*****************************************************************************************
*                                     Peripheral USB                                     *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t EP0R;                   /* EP0R */
    __IO uint32_t EP1R;                   /* EP1R */
    __IO uint32_t EP2R;                   /* EP2R */
    __IO uint32_t EP3R;                   /* EP3R */
    __IO uint32_t EP4R;                   /* EP4R */
    __IO uint32_t EP5R;                   /* EP5R */
    __IO uint32_t EP6R;                   /* EP6R */
    __IO uint32_t EP7R;                   /* EP7R */
    uint16_t RESERVED1[16];
    __IO uint32_t CNTR;                   /* CNTR */
    __IO uint32_t ISTR;                   /* ISTR */
    __I  uint32_t FNR;                    /* FNR */
    __IO uint32_t DADDR;                  /* DADDR */
    __IO uint32_t BTABLE;                 /* BTABLE */
} USB_TypeDef;

/************************************* USB->CNTR  ***************************************/
#define USB_CNTR_CTRM_Pos                     ((uint32_t)15)                    /* Correct transfer interrupt mask */
#define USB_CNTR_CTRM_Mask                    (((uint32_t)0x01) << 15)
#define USB_CNTR_CTRM                         USB_CNTR_CTRM_Mask
#define USB_CNTR_PMAOVRM_Pos                  ((uint32_t)14)                    /* Packet memory area over/underrun interrupt mask */
#define USB_CNTR_PMAOVRM_Mask                 (((uint32_t)0x01) << 14)
#define USB_CNTR_PMAOVRM                      USB_CNTR_PMAOVRM_Mask
#define USB_CNTR_ERRM_Pos                     ((uint32_t)13)                    /* Error interrupt mask */
#define USB_CNTR_ERRM_Mask                    (((uint32_t)0x01) << 13)
#define USB_CNTR_ERRM                         USB_CNTR_ERRM_Mask
#define USB_CNTR_WKUPM_Pos                    ((uint32_t)12)                    /* Wakeup interrupt mask */
#define USB_CNTR_WKUPM_Mask                   (((uint32_t)0x01) << 12)
#define USB_CNTR_WKUPM                        USB_CNTR_WKUPM_Mask
#define USB_CNTR_SUSPM_Pos                    ((uint32_t)11)                    /* Suspend mode interrupt mask */
#define USB_CNTR_SUSPM_Mask                   (((uint32_t)0x01) << 11)
#define USB_CNTR_SUSPM                        USB_CNTR_SUSPM_Mask
#define USB_CNTR_RESETM_Pos                   ((uint32_t)10)                    /* USB reset interrupt mask */
#define USB_CNTR_RESETM_Mask                  (((uint32_t)0x01) << 10)
#define USB_CNTR_RESETM                       USB_CNTR_RESETM_Mask
#define USB_CNTR_SOFM_Pos                     ((uint32_t)9)                     /* Start of frame interrupt mask */
#define USB_CNTR_SOFM_Mask                    (((uint32_t)0x01) << 9)
#define USB_CNTR_SOFM                         USB_CNTR_SOFM_Mask
#define USB_CNTR_ESOFM_Pos                    ((uint32_t)8)                     /* Expected start of frame interrupt mask */
#define USB_CNTR_ESOFM_Mask                   (((uint32_t)0x01) << 8)
#define USB_CNTR_ESOFM                        USB_CNTR_ESOFM_Mask
#define USB_CNTR_RESUME_Pos                   ((uint32_t)4)                     /* Resume request */
#define USB_CNTR_RESUME_Mask                  (((uint32_t)0x01) << 4)
#define USB_CNTR_RESUME                       USB_CNTR_RESUME_Mask
#define USB_CNTR_FSUSP_Pos                    ((uint32_t)3)                     /* Force suspend */
#define USB_CNTR_FSUSP_Mask                   (((uint32_t)0x01) << 3)
#define USB_CNTR_FSUSP                        USB_CNTR_FSUSP_Mask
#define USB_CNTR_FRES_Pos                     ((uint32_t)0)                     /* Force USB reset */
#define USB_CNTR_FRES_Mask                    (((uint32_t)0x01) << 0)
#define USB_CNTR_FRES                         USB_CNTR_FRES_Mask

/************************************* USB->ISTR  ***************************************/
#define USB_ISTR_CTR_Pos                      ((uint32_t)15)                    /* Correct transfer */
#define USB_ISTR_CTR_Mask                     (((uint32_t)0x01) << 15)
#define USB_ISTR_CTR                          USB_ISTR_CTR_Mask
#define USB_ISTR_PMAOVR_Pos                   ((uint32_t)14)                    /* Packet memory area over/underrun */
#define USB_ISTR_PMAOVR_Mask                  (((uint32_t)0x01) << 14)
#define USB_ISTR_PMAOVR                       USB_ISTR_PMAOVR_Mask
#define USB_ISTR_ERR_Pos                      ((uint32_t)13)                    /* Error */
#define USB_ISTR_ERR_Mask                     (((uint32_t)0x01) << 13)
#define USB_ISTR_ERR                          USB_ISTR_ERR_Mask
#define USB_ISTR_WKUP_Pos                     ((uint32_t)12)                    /* Wakeup request */
#define USB_ISTR_WKUP_Mask                    (((uint32_t)0x01) << 12)
#define USB_ISTR_WKUP                         USB_ISTR_WKUP_Mask
#define USB_ISTR_SUSP_Pos                     ((uint32_t)11)                    /* Suspend mode request */
#define USB_ISTR_SUSP_Mask                    (((uint32_t)0x01) << 11)
#define USB_ISTR_SUSP                         USB_ISTR_SUSP_Mask
#define USB_ISTR_RESET_Pos                    ((uint32_t)10)                    /* USB reset request */
#define USB_ISTR_RESET_Mask                   (((uint32_t)0x01) << 10)
#define USB_ISTR_RESET                        USB_ISTR_RESET_Mask
#define USB_ISTR_SOF_Pos                      ((uint32_t)9)                     /* Start of frame */
#define USB_ISTR_SOF_Mask                     (((uint32_t)0x01) << 9)
#define USB_ISTR_SOF                          USB_ISTR_SOF_Mask
#define USB_ISTR_ESOF_Pos                     ((uint32_t)8)                     /* Expected start of frame */
#define USB_ISTR_ESOF_Mask                    (((uint32_t)0x01) << 8)
#define USB_ISTR_ESOF                         USB_ISTR_ESOF_Mask
#define USB_ISTR_DIR_Pos                      ((uint32_t)4)                     /* Direction of transaction */
#define USB_ISTR_DIR_Mask                     (((uint32_t)0x01) << 4)
#define USB_ISTR_DIR                          USB_ISTR_DIR_Mask
#define USB_ISTR_EP_ID_Pos                    ((uint32_t)0)                     /* Endpoint Identifier */
#define USB_ISTR_EP_ID_Mask                   (((uint32_t)0x0F) << 0)
#define USB_ISTR_EP_ID                        USB_ISTR_EP_ID_Mask
#define USB_ISTR_EP_ID_0                      (((uint32_t)0x1))
#define USB_ISTR_EP_ID_1                      (((uint32_t)0x2))
#define USB_ISTR_EP_ID_2                      (((uint32_t)0x4))
#define USB_ISTR_EP_ID_3                      (((uint32_t)0x8))

/************************************** USB->FNR  ***************************************/
#define USB_FNR_RXDP_Pos                      ((uint32_t)15)                    /* Receive data+line status */
#define USB_FNR_RXDP_Mask                     (((uint32_t)0x01) << 15)
#define USB_FNR_RXDP                          USB_FNR_RXDP_Mask
#define USB_FNR_RXDM_Pos                      ((uint32_t)14)                    /* Receive data-line status */
#define USB_FNR_RXDM_Mask                     (((uint32_t)0x01) << 14)
#define USB_FNR_RXDM                          USB_FNR_RXDM_Mask
#define USB_FNR_LCK_Pos                       ((uint32_t)13)                    /* Locked */
#define USB_FNR_LCK_Mask                      (((uint32_t)0x01) << 13)
#define USB_FNR_LCK                           USB_FNR_LCK_Mask
#define USB_FNR_LSOF_Pos                      ((uint32_t)11)                    /* Lost SOF */
#define USB_FNR_LSOF_Mask                     (((uint32_t)0x03) << 11)
#define USB_FNR_LSOF                          USB_FNR_LSOF_Mask
#define USB_FNR_LSOF_0                        (((uint32_t)0x1 << USB_FNR_LSOF_Pos))
#define USB_FNR_LSOF_1                        (((uint32_t)0x2 << USB_FNR_LSOF_Pos))
#define USB_FNR_FN_Pos                        ((uint32_t)0)                     /* Frame number */
#define USB_FNR_FN_Mask                       (((uint32_t)0x07FF) << 0)
#define USB_FNR_FN                            USB_FNR_FN_Mask
#define USB_FNR_FN_0                          (((uint32_t)0x1))
#define USB_FNR_FN_1                          (((uint32_t)0x2))
#define USB_FNR_FN_2                          (((uint32_t)0x4))
#define USB_FNR_FN_3                          (((uint32_t)0x8))
#define USB_FNR_FN_4                          (((uint32_t)0x10))
#define USB_FNR_FN_5                          (((uint32_t)0x20))
#define USB_FNR_FN_6                          (((uint32_t)0x40))
#define USB_FNR_FN_7                          (((uint32_t)0x80))
#define USB_FNR_FN_8                          (((uint32_t)0x100))
#define USB_FNR_FN_9                          (((uint32_t)0x200))
#define USB_FNR_FN_10                         (((uint32_t)0x400))

/************************************* USB->DADDR  **************************************/
#define USB_DADDR_EF_Pos                      ((uint32_t)7)                     /* Enable function */
#define USB_DADDR_EF_Mask                     (((uint32_t)0x01) << 7)
#define USB_DADDR_EF                          USB_DADDR_EF_Mask
#define USB_DADDR_ADD_Pos                     ((uint32_t)0)                     /* Device address */
#define USB_DADDR_ADD_Mask                    (((uint32_t)0x7F) << 0)
#define USB_DADDR_ADD                         USB_DADDR_ADD_Mask
#define USB_DADDR_ADD_0                       (((uint32_t)0x1))
#define USB_DADDR_ADD_1                       (((uint32_t)0x2))
#define USB_DADDR_ADD_2                       (((uint32_t)0x4))
#define USB_DADDR_ADD_3                       (((uint32_t)0x8))
#define USB_DADDR_ADD_4                       (((uint32_t)0x10))
#define USB_DADDR_ADD_5                       (((uint32_t)0x20))
#define USB_DADDR_ADD_6                       (((uint32_t)0x40))

/************************************ USB->BTABLE  **************************************/
#define USB_BTABLE_BTABLE_Pos                 ((uint32_t)3)                     /* Buffer table */
#define USB_BTABLE_BTABLE_Mask                (((uint32_t)0x1FFF) << 3)
#define USB_BTABLE_BTABLE                     USB_BTABLE_BTABLE_Mask
#define USB_BTABLE_BTABLE_0                   (((uint32_t)0x1 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_1                   (((uint32_t)0x2 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_2                   (((uint32_t)0x4 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_3                   (((uint32_t)0x8 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_4                   (((uint32_t)0x10 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_5                   (((uint32_t)0x20 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_6                   (((uint32_t)0x40 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_7                   (((uint32_t)0x80 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_8                   (((uint32_t)0x100 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_9                   (((uint32_t)0x200 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_10                  (((uint32_t)0x400 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_11                  (((uint32_t)0x800 << USB_BTABLE_BTABLE_Pos))
#define USB_BTABLE_BTABLE_12                  (((uint32_t)0x1000 << USB_BTABLE_BTABLE_Pos))

/************************************* USB->EP0R  ***************************************/
#define USB_EP0R_CTR_RX_Pos                   ((uint32_t)15)                    /* Correct Transfer for reception */
#define USB_EP0R_CTR_RX_Mask                  (((uint32_t)0x01) << 15)
#define USB_EP0R_CTR_RX                       USB_EP0R_CTR_RX_Mask
#define USB_EP0R_DTOG_RX_Pos                  ((uint32_t)14)                    /* Data Toggle, for reception transfers */
#define USB_EP0R_DTOG_RX_Mask                 (((uint32_t)0x01) << 14)
#define USB_EP0R_DTOG_RX                      USB_EP0R_DTOG_RX_Mask
#define USB_EP0R_STAT_RX_Pos                  ((uint32_t)12)                    /* Status bits,for reception transfers */
#define USB_EP0R_STAT_RX_Mask                 (((uint32_t)0x03) << 12)
#define USB_EP0R_STAT_RX                      USB_EP0R_STAT_RX_Mask
#define USB_EP0R_STAT_RX_0                    (((uint32_t)0x1 << USB_EP0R_STAT_RX_Pos))
#define USB_EP0R_STAT_RX_1                    (((uint32_t)0x2 << USB_EP0R_STAT_RX_Pos))
#define USB_EP0R_SETUP_Pos                    ((uint32_t)11)                    /* Setup transaction completed */
#define USB_EP0R_SETUP_Mask                   (((uint32_t)0x01) << 11)
#define USB_EP0R_SETUP                        USB_EP0R_SETUP_Mask
#define USB_EP0R_EP_TYPE_Pos                  ((uint32_t)9)                     /* Endpoint type */
#define USB_EP0R_EP_TYPE_Mask                 (((uint32_t)0x03) << 9)
#define USB_EP0R_EP_TYPE                      USB_EP0R_EP_TYPE_Mask
#define USB_EP0R_EP_TYPE_0                    (((uint32_t)0x1 << USB_EP0R_EP_TYPE_Pos))
#define USB_EP0R_EP_TYPE_1                    (((uint32_t)0x2 << USB_EP0R_EP_TYPE_Pos))
#define USB_EP0R_EP_KIND_Pos                  ((uint32_t)8)                     /* Endpoint kind */
#define USB_EP0R_EP_KIND_Mask                 (((uint32_t)0x01) << 8)
#define USB_EP0R_EP_KIND                      USB_EP0R_EP_KIND_Mask
#define USB_EP0R_CTR_TX_Pos                   ((uint32_t)7)                     /* Correct Transfer for transmission */
#define USB_EP0R_CTR_TX_Mask                  (((uint32_t)0x01) << 7)
#define USB_EP0R_CTR_TX                       USB_EP0R_CTR_TX_Mask
#define USB_EP0R_DTOG_TX_Pos                  ((uint32_t)6)                     /* Data Toggle, for transmission transfers */
#define USB_EP0R_DTOG_TX_Mask                 (((uint32_t)0x01) << 6)
#define USB_EP0R_DTOG_TX                      USB_EP0R_DTOG_TX_Mask
#define USB_EP0R_STAT_TX_Pos                  ((uint32_t)4)                     /* Status bits, for transmission transfers */
#define USB_EP0R_STAT_TX_Mask                 (((uint32_t)0x03) << 4)
#define USB_EP0R_STAT_TX                      USB_EP0R_STAT_TX_Mask
#define USB_EP0R_STAT_TX_0                    (((uint32_t)0x1 << USB_EP0R_STAT_TX_Pos))
#define USB_EP0R_STAT_TX_1                    (((uint32_t)0x2 << USB_EP0R_STAT_TX_Pos))
#define USB_EP0R_EA_Pos                       ((uint32_t)0)                     /* Endpoint address */
#define USB_EP0R_EA_Mask                      (((uint32_t)0x0F) << 0)
#define USB_EP0R_EA                           USB_EP0R_EA_Mask
#define USB_EP0R_EA_0                         (((uint32_t)0x1))
#define USB_EP0R_EA_1                         (((uint32_t)0x2))
#define USB_EP0R_EA_2                         (((uint32_t)0x4))
#define USB_EP0R_EA_3                         (((uint32_t)0x8))

/************************************* USB->EP1R  ***************************************/
#define USB_EP1R_CTR_RX_Pos                   ((uint32_t)15)                    /* Correct Transfer for reception */
#define USB_EP1R_CTR_RX_Mask                  (((uint32_t)0x01) << 15)
#define USB_EP1R_CTR_RX                       USB_EP1R_CTR_RX_Mask
#define USB_EP1R_DTOG_RX_Pos                  ((uint32_t)14)                    /* Data Toggle, for reception transfers */
#define USB_EP1R_DTOG_RX_Mask                 (((uint32_t)0x01) << 14)
#define USB_EP1R_DTOG_RX                      USB_EP1R_DTOG_RX_Mask
#define USB_EP1R_STAT_RX_Pos                  ((uint32_t)12)                    /* Status bits,for reception transfers */
#define USB_EP1R_STAT_RX_Mask                 (((uint32_t)0x03) << 12)
#define USB_EP1R_STAT_RX                      USB_EP1R_STAT_RX_Mask
#define USB_EP1R_STAT_RX_0                    (((uint32_t)0x1 << USB_EP1R_STAT_RX_Pos))
#define USB_EP1R_STAT_RX_1                    (((uint32_t)0x2 << USB_EP1R_STAT_RX_Pos))
#define USB_EP1R_SETUP_Pos                    ((uint32_t)11)                    /* Setup transaction completed */
#define USB_EP1R_SETUP_Mask                   (((uint32_t)0x01) << 11)
#define USB_EP1R_SETUP                        USB_EP1R_SETUP_Mask
#define USB_EP1R_EP_TYPE_Pos                  ((uint32_t)9)                     /* Endpoint type */
#define USB_EP1R_EP_TYPE_Mask                 (((uint32_t)0x03) << 9)
#define USB_EP1R_EP_TYPE                      USB_EP1R_EP_TYPE_Mask
#define USB_EP1R_EP_TYPE_0                    (((uint32_t)0x1 << USB_EP1R_EP_TYPE_Pos))
#define USB_EP1R_EP_TYPE_1                    (((uint32_t)0x2 << USB_EP1R_EP_TYPE_Pos))
#define USB_EP1R_EP_KIND_Pos                  ((uint32_t)8)                     /* Endpoint kind */
#define USB_EP1R_EP_KIND_Mask                 (((uint32_t)0x01) << 8)
#define USB_EP1R_EP_KIND                      USB_EP1R_EP_KIND_Mask
#define USB_EP1R_CTR_TX_Pos                   ((uint32_t)7)                     /* Correct Transfer for transmission */
#define USB_EP1R_CTR_TX_Mask                  (((uint32_t)0x01) << 7)
#define USB_EP1R_CTR_TX                       USB_EP1R_CTR_TX_Mask
#define USB_EP1R_DTOG_TX_Pos                  ((uint32_t)6)                     /* Data Toggle, for transmission transfers */
#define USB_EP1R_DTOG_TX_Mask                 (((uint32_t)0x01) << 6)
#define USB_EP1R_DTOG_TX                      USB_EP1R_DTOG_TX_Mask
#define USB_EP1R_STAT_TX_Pos                  ((uint32_t)4)                     /* Status bits, for transmission transfers */
#define USB_EP1R_STAT_TX_Mask                 (((uint32_t)0x03) << 4)
#define USB_EP1R_STAT_TX                      USB_EP1R_STAT_TX_Mask
#define USB_EP1R_STAT_TX_0                    (((uint32_t)0x1 << USB_EP1R_STAT_TX_Pos))
#define USB_EP1R_STAT_TX_1                    (((uint32_t)0x2 << USB_EP1R_STAT_TX_Pos))
#define USB_EP1R_EA_Pos                       ((uint32_t)0)                     /* Endpoint address */
#define USB_EP1R_EA_Mask                      (((uint32_t)0x0F) << 0)
#define USB_EP1R_EA                           USB_EP1R_EA_Mask
#define USB_EP1R_EA_0                         (((uint32_t)0x1))
#define USB_EP1R_EA_1                         (((uint32_t)0x2))
#define USB_EP1R_EA_2                         (((uint32_t)0x4))
#define USB_EP1R_EA_3                         (((uint32_t)0x8))

/************************************* USB->EP2R  ***************************************/
#define USB_EP2R_CTR_RX_Pos                   ((uint32_t)15)                    /* Correct Transfer for reception */
#define USB_EP2R_CTR_RX_Mask                  (((uint32_t)0x01) << 15)
#define USB_EP2R_CTR_RX                       USB_EP2R_CTR_RX_Mask
#define USB_EP2R_DTOG_RX_Pos                  ((uint32_t)14)                    /* Data Toggle, for reception transfers */
#define USB_EP2R_DTOG_RX_Mask                 (((uint32_t)0x01) << 14)
#define USB_EP2R_DTOG_RX                      USB_EP2R_DTOG_RX_Mask
#define USB_EP2R_STAT_RX_Pos                  ((uint32_t)12)                    /* Status bits,for reception transfers */
#define USB_EP2R_STAT_RX_Mask                 (((uint32_t)0x03) << 12)
#define USB_EP2R_STAT_RX                      USB_EP2R_STAT_RX_Mask
#define USB_EP2R_STAT_RX_0                    (((uint32_t)0x1 << USB_EP2R_STAT_RX_Pos))
#define USB_EP2R_STAT_RX_1                    (((uint32_t)0x2 << USB_EP2R_STAT_RX_Pos))
#define USB_EP2R_SETUP_Pos                    ((uint32_t)11)                    /* Setup transaction completed */
#define USB_EP2R_SETUP_Mask                   (((uint32_t)0x01) << 11)
#define USB_EP2R_SETUP                        USB_EP2R_SETUP_Mask
#define USB_EP2R_EP_TYPE_Pos                  ((uint32_t)9)                     /* Endpoint type */
#define USB_EP2R_EP_TYPE_Mask                 (((uint32_t)0x03) << 9)
#define USB_EP2R_EP_TYPE                      USB_EP2R_EP_TYPE_Mask
#define USB_EP2R_EP_TYPE_0                    (((uint32_t)0x1 << USB_EP2R_EP_TYPE_Pos))
#define USB_EP2R_EP_TYPE_1                    (((uint32_t)0x2 << USB_EP2R_EP_TYPE_Pos))
#define USB_EP2R_EP_KIND_Pos                  ((uint32_t)8)                     /* Endpoint kind */
#define USB_EP2R_EP_KIND_Mask                 (((uint32_t)0x01) << 8)
#define USB_EP2R_EP_KIND                      USB_EP2R_EP_KIND_Mask
#define USB_EP2R_CTR_TX_Pos                   ((uint32_t)7)                     /* Correct Transfer for transmission */
#define USB_EP2R_CTR_TX_Mask                  (((uint32_t)0x01) << 7)
#define USB_EP2R_CTR_TX                       USB_EP2R_CTR_TX_Mask
#define USB_EP2R_DTOG_TX_Pos                  ((uint32_t)6)                     /* Data Toggle, for transmission transfers */
#define USB_EP2R_DTOG_TX_Mask                 (((uint32_t)0x01) << 6)
#define USB_EP2R_DTOG_TX                      USB_EP2R_DTOG_TX_Mask
#define USB_EP2R_STAT_TX_Pos                  ((uint32_t)4)                     /* Status bits, for transmission transfers */
#define USB_EP2R_STAT_TX_Mask                 (((uint32_t)0x03) << 4)
#define USB_EP2R_STAT_TX                      USB_EP2R_STAT_TX_Mask
#define USB_EP2R_STAT_TX_0                    (((uint32_t)0x1 << USB_EP2R_STAT_TX_Pos))
#define USB_EP2R_STAT_TX_1                    (((uint32_t)0x2 << USB_EP2R_STAT_TX_Pos))
#define USB_EP2R_EA_Pos                       ((uint32_t)0)                     /* Endpoint address */
#define USB_EP2R_EA_Mask                      (((uint32_t)0x0F) << 0)
#define USB_EP2R_EA                           USB_EP2R_EA_Mask
#define USB_EP2R_EA_0                         (((uint32_t)0x1))
#define USB_EP2R_EA_1                         (((uint32_t)0x2))
#define USB_EP2R_EA_2                         (((uint32_t)0x4))
#define USB_EP2R_EA_3                         (((uint32_t)0x8))

/************************************* USB->EP3R  ***************************************/
#define USB_EP3R_CTR_RX_Pos                   ((uint32_t)15)                    /* Correct Transfer for reception */
#define USB_EP3R_CTR_RX_Mask                  (((uint32_t)0x01) << 15)
#define USB_EP3R_CTR_RX                       USB_EP3R_CTR_RX_Mask
#define USB_EP3R_DTOG_RX_Pos                  ((uint32_t)14)                    /* Data Toggle, for reception transfers */
#define USB_EP3R_DTOG_RX_Mask                 (((uint32_t)0x01) << 14)
#define USB_EP3R_DTOG_RX                      USB_EP3R_DTOG_RX_Mask
#define USB_EP3R_STAT_RX_Pos                  ((uint32_t)12)                    /* Status bits,for reception transfers */
#define USB_EP3R_STAT_RX_Mask                 (((uint32_t)0x03) << 12)
#define USB_EP3R_STAT_RX                      USB_EP3R_STAT_RX_Mask
#define USB_EP3R_STAT_RX_0                    (((uint32_t)0x1 << USB_EP3R_STAT_RX_Pos))
#define USB_EP3R_STAT_RX_1                    (((uint32_t)0x2 << USB_EP3R_STAT_RX_Pos))
#define USB_EP3R_SETUP_Pos                    ((uint32_t)11)                    /* Setup transaction completed */
#define USB_EP3R_SETUP_Mask                   (((uint32_t)0x01) << 11)
#define USB_EP3R_SETUP                        USB_EP3R_SETUP_Mask
#define USB_EP3R_EP_TYPE_Pos                  ((uint32_t)9)                     /* Endpoint type */
#define USB_EP3R_EP_TYPE_Mask                 (((uint32_t)0x03) << 9)
#define USB_EP3R_EP_TYPE                      USB_EP3R_EP_TYPE_Mask
#define USB_EP3R_EP_TYPE_0                    (((uint32_t)0x1 << USB_EP3R_EP_TYPE_Pos))
#define USB_EP3R_EP_TYPE_1                    (((uint32_t)0x2 << USB_EP3R_EP_TYPE_Pos))
#define USB_EP3R_EP_KIND_Pos                  ((uint32_t)8)                     /* Endpoint kind */
#define USB_EP3R_EP_KIND_Mask                 (((uint32_t)0x01) << 8)
#define USB_EP3R_EP_KIND                      USB_EP3R_EP_KIND_Mask
#define USB_EP3R_CTR_TX_Pos                   ((uint32_t)7)                     /* Correct Transfer for transmission */
#define USB_EP3R_CTR_TX_Mask                  (((uint32_t)0x01) << 7)
#define USB_EP3R_CTR_TX                       USB_EP3R_CTR_TX_Mask
#define USB_EP3R_DTOG_TX_Pos                  ((uint32_t)6)                     /* Data Toggle, for transmission transfers */
#define USB_EP3R_DTOG_TX_Mask                 (((uint32_t)0x01) << 6)
#define USB_EP3R_DTOG_TX                      USB_EP3R_DTOG_TX_Mask
#define USB_EP3R_STAT_TX_Pos                  ((uint32_t)4)                     /* Status bits, for transmission transfers */
#define USB_EP3R_STAT_TX_Mask                 (((uint32_t)0x03) << 4)
#define USB_EP3R_STAT_TX                      USB_EP3R_STAT_TX_Mask
#define USB_EP3R_STAT_TX_0                    (((uint32_t)0x1 << USB_EP3R_STAT_TX_Pos))
#define USB_EP3R_STAT_TX_1                    (((uint32_t)0x2 << USB_EP3R_STAT_TX_Pos))
#define USB_EP3R_EA_Pos                       ((uint32_t)0)                     /* Endpoint address */
#define USB_EP3R_EA_Mask                      (((uint32_t)0x0F) << 0)
#define USB_EP3R_EA                           USB_EP3R_EA_Mask
#define USB_EP3R_EA_0                         (((uint32_t)0x1))
#define USB_EP3R_EA_1                         (((uint32_t)0x2))
#define USB_EP3R_EA_2                         (((uint32_t)0x4))
#define USB_EP3R_EA_3                         (((uint32_t)0x8))

/************************************* USB->EP4R  ***************************************/
#define USB_EP4R_CTR_RX_Pos                   ((uint32_t)15)                    /* Correct Transfer for reception */
#define USB_EP4R_CTR_RX_Mask                  (((uint32_t)0x01) << 15)
#define USB_EP4R_CTR_RX                       USB_EP4R_CTR_RX_Mask
#define USB_EP4R_DTOG_RX_Pos                  ((uint32_t)14)                    /* Data Toggle, for reception transfers */
#define USB_EP4R_DTOG_RX_Mask                 (((uint32_t)0x01) << 14)
#define USB_EP4R_DTOG_RX                      USB_EP4R_DTOG_RX_Mask
#define USB_EP4R_STAT_RX_Pos                  ((uint32_t)12)                    /* Status bits,for reception transfers */
#define USB_EP4R_STAT_RX_Mask                 (((uint32_t)0x03) << 12)
#define USB_EP4R_STAT_RX                      USB_EP4R_STAT_RX_Mask
#define USB_EP4R_STAT_RX_0                    (((uint32_t)0x1 << USB_EP4R_STAT_RX_Pos))
#define USB_EP4R_STAT_RX_1                    (((uint32_t)0x2 << USB_EP4R_STAT_RX_Pos))
#define USB_EP4R_SETUP_Pos                    ((uint32_t)11)                    /* Setup transaction completed */
#define USB_EP4R_SETUP_Mask                   (((uint32_t)0x01) << 11)
#define USB_EP4R_SETUP                        USB_EP4R_SETUP_Mask
#define USB_EP4R_EP_TYPE_Pos                  ((uint32_t)9)                     /* Endpoint type */
#define USB_EP4R_EP_TYPE_Mask                 (((uint32_t)0x03) << 9)
#define USB_EP4R_EP_TYPE                      USB_EP4R_EP_TYPE_Mask
#define USB_EP4R_EP_TYPE_0                    (((uint32_t)0x1 << USB_EP4R_EP_TYPE_Pos))
#define USB_EP4R_EP_TYPE_1                    (((uint32_t)0x2 << USB_EP4R_EP_TYPE_Pos))
#define USB_EP4R_EP_KIND_Pos                  ((uint32_t)8)                     /* Endpoint kind */
#define USB_EP4R_EP_KIND_Mask                 (((uint32_t)0x01) << 8)
#define USB_EP4R_EP_KIND                      USB_EP4R_EP_KIND_Mask
#define USB_EP4R_CTR_TX_Pos                   ((uint32_t)7)                     /* Correct Transfer for transmission */
#define USB_EP4R_CTR_TX_Mask                  (((uint32_t)0x01) << 7)
#define USB_EP4R_CTR_TX                       USB_EP4R_CTR_TX_Mask
#define USB_EP4R_DTOG_TX_Pos                  ((uint32_t)6)                     /* Data Toggle, for transmission transfers */
#define USB_EP4R_DTOG_TX_Mask                 (((uint32_t)0x01) << 6)
#define USB_EP4R_DTOG_TX                      USB_EP4R_DTOG_TX_Mask
#define USB_EP4R_STAT_TX_Pos                  ((uint32_t)4)                     /* Status bits, for transmission transfers */
#define USB_EP4R_STAT_TX_Mask                 (((uint32_t)0x03) << 4)
#define USB_EP4R_STAT_TX                      USB_EP4R_STAT_TX_Mask
#define USB_EP4R_STAT_TX_0                    (((uint32_t)0x1 << USB_EP4R_STAT_TX_Pos))
#define USB_EP4R_STAT_TX_1                    (((uint32_t)0x2 << USB_EP4R_STAT_TX_Pos))
#define USB_EP4R_EA_Pos                       ((uint32_t)0)                     /* Endpoint address */
#define USB_EP4R_EA_Mask                      (((uint32_t)0x0F) << 0)
#define USB_EP4R_EA                           USB_EP4R_EA_Mask
#define USB_EP4R_EA_0                         (((uint32_t)0x1))
#define USB_EP4R_EA_1                         (((uint32_t)0x2))
#define USB_EP4R_EA_2                         (((uint32_t)0x4))
#define USB_EP4R_EA_3                         (((uint32_t)0x8))

/************************************* USB->EP5R  ***************************************/
#define USB_EP5R_CTR_RX_Pos                   ((uint32_t)15)                    /* Correct Transfer for reception */
#define USB_EP5R_CTR_RX_Mask                  (((uint32_t)0x01) << 15)
#define USB_EP5R_CTR_RX                       USB_EP5R_CTR_RX_Mask
#define USB_EP5R_DTOG_RX_Pos                  ((uint32_t)14)                    /* Data Toggle, for reception transfers */
#define USB_EP5R_DTOG_RX_Mask                 (((uint32_t)0x01) << 14)
#define USB_EP5R_DTOG_RX                      USB_EP5R_DTOG_RX_Mask
#define USB_EP5R_STAT_RX_Pos                  ((uint32_t)12)                    /* Status bits,for reception transfers */
#define USB_EP5R_STAT_RX_Mask                 (((uint32_t)0x03) << 12)
#define USB_EP5R_STAT_RX                      USB_EP5R_STAT_RX_Mask
#define USB_EP5R_STAT_RX_0                    (((uint32_t)0x1 << USB_EP5R_STAT_RX_Pos))
#define USB_EP5R_STAT_RX_1                    (((uint32_t)0x2 << USB_EP5R_STAT_RX_Pos))
#define USB_EP5R_SETUP_Pos                    ((uint32_t)11)                    /* Setup transaction completed */
#define USB_EP5R_SETUP_Mask                   (((uint32_t)0x01) << 11)
#define USB_EP5R_SETUP                        USB_EP5R_SETUP_Mask
#define USB_EP5R_EP_TYPE_Pos                  ((uint32_t)9)                     /* Endpoint type */
#define USB_EP5R_EP_TYPE_Mask                 (((uint32_t)0x03) << 9)
#define USB_EP5R_EP_TYPE                      USB_EP5R_EP_TYPE_Mask
#define USB_EP5R_EP_TYPE_0                    (((uint32_t)0x1 << USB_EP5R_EP_TYPE_Pos))
#define USB_EP5R_EP_TYPE_1                    (((uint32_t)0x2 << USB_EP5R_EP_TYPE_Pos))
#define USB_EP5R_EP_KIND_Pos                  ((uint32_t)8)                     /* Endpoint kind */
#define USB_EP5R_EP_KIND_Mask                 (((uint32_t)0x01) << 8)
#define USB_EP5R_EP_KIND                      USB_EP5R_EP_KIND_Mask
#define USB_EP5R_CTR_TX_Pos                   ((uint32_t)7)                     /* Correct Transfer for transmission */
#define USB_EP5R_CTR_TX_Mask                  (((uint32_t)0x01) << 7)
#define USB_EP5R_CTR_TX                       USB_EP5R_CTR_TX_Mask
#define USB_EP5R_DTOG_TX_Pos                  ((uint32_t)6)                     /* Data Toggle, for transmission transfers */
#define USB_EP5R_DTOG_TX_Mask                 (((uint32_t)0x01) << 6)
#define USB_EP5R_DTOG_TX                      USB_EP5R_DTOG_TX_Mask
#define USB_EP5R_STAT_TX_Pos                  ((uint32_t)4)                     /* Status bits, for transmission transfers */
#define USB_EP5R_STAT_TX_Mask                 (((uint32_t)0x03) << 4)
#define USB_EP5R_STAT_TX                      USB_EP5R_STAT_TX_Mask
#define USB_EP5R_STAT_TX_0                    (((uint32_t)0x1 << USB_EP5R_STAT_TX_Pos))
#define USB_EP5R_STAT_TX_1                    (((uint32_t)0x2 << USB_EP5R_STAT_TX_Pos))
#define USB_EP5R_EA_Pos                       ((uint32_t)0)                     /* Endpoint address */
#define USB_EP5R_EA_Mask                      (((uint32_t)0x0F) << 0)
#define USB_EP5R_EA                           USB_EP5R_EA_Mask
#define USB_EP5R_EA_0                         (((uint32_t)0x1))
#define USB_EP5R_EA_1                         (((uint32_t)0x2))
#define USB_EP5R_EA_2                         (((uint32_t)0x4))
#define USB_EP5R_EA_3                         (((uint32_t)0x8))

/************************************* USB->EP6R  ***************************************/
#define USB_EP6R_CTR_RX_Pos                   ((uint32_t)15)                    /* Correct Transfer for reception */
#define USB_EP6R_CTR_RX_Mask                  (((uint32_t)0x01) << 15)
#define USB_EP6R_CTR_RX                       USB_EP6R_CTR_RX_Mask
#define USB_EP6R_DTOG_RX_Pos                  ((uint32_t)14)                    /* Data Toggle, for reception transfers */
#define USB_EP6R_DTOG_RX_Mask                 (((uint32_t)0x01) << 14)
#define USB_EP6R_DTOG_RX                      USB_EP6R_DTOG_RX_Mask
#define USB_EP6R_STAT_RX_Pos                  ((uint32_t)12)                    /* Status bits,for reception transfers */
#define USB_EP6R_STAT_RX_Mask                 (((uint32_t)0x03) << 12)
#define USB_EP6R_STAT_RX                      USB_EP6R_STAT_RX_Mask
#define USB_EP6R_STAT_RX_0                    (((uint32_t)0x1 << USB_EP6R_STAT_RX_Pos))
#define USB_EP6R_STAT_RX_1                    (((uint32_t)0x2 << USB_EP6R_STAT_RX_Pos))
#define USB_EP6R_SETUP_Pos                    ((uint32_t)11)                    /* Setup transaction completed */
#define USB_EP6R_SETUP_Mask                   (((uint32_t)0x01) << 11)
#define USB_EP6R_SETUP                        USB_EP6R_SETUP_Mask
#define USB_EP6R_EP_TYPE_Pos                  ((uint32_t)9)                     /* Endpoint type */
#define USB_EP6R_EP_TYPE_Mask                 (((uint32_t)0x03) << 9)
#define USB_EP6R_EP_TYPE                      USB_EP6R_EP_TYPE_Mask
#define USB_EP6R_EP_TYPE_0                    (((uint32_t)0x1 << USB_EP6R_EP_TYPE_Pos))
#define USB_EP6R_EP_TYPE_1                    (((uint32_t)0x2 << USB_EP6R_EP_TYPE_Pos))
#define USB_EP6R_EP_KIND_Pos                  ((uint32_t)8)                     /* Endpoint kind */
#define USB_EP6R_EP_KIND_Mask                 (((uint32_t)0x01) << 8)
#define USB_EP6R_EP_KIND                      USB_EP6R_EP_KIND_Mask
#define USB_EP6R_CTR_TX_Pos                   ((uint32_t)7)                     /* Correct Transfer for transmission */
#define USB_EP6R_CTR_TX_Mask                  (((uint32_t)0x01) << 7)
#define USB_EP6R_CTR_TX                       USB_EP6R_CTR_TX_Mask
#define USB_EP6R_DTOG_TX_Pos                  ((uint32_t)6)                     /* Data Toggle, for transmission transfers */
#define USB_EP6R_DTOG_TX_Mask                 (((uint32_t)0x01) << 6)
#define USB_EP6R_DTOG_TX                      USB_EP6R_DTOG_TX_Mask
#define USB_EP6R_STAT_TX_Pos                  ((uint32_t)4)                     /* Status bits, for transmission transfers */
#define USB_EP6R_STAT_TX_Mask                 (((uint32_t)0x03) << 4)
#define USB_EP6R_STAT_TX                      USB_EP6R_STAT_TX_Mask
#define USB_EP6R_STAT_TX_0                    (((uint32_t)0x1 << USB_EP6R_STAT_TX_Pos))
#define USB_EP6R_STAT_TX_1                    (((uint32_t)0x2 << USB_EP6R_STAT_TX_Pos))
#define USB_EP6R_EA_Pos                       ((uint32_t)0)                     /* Endpoint address */
#define USB_EP6R_EA_Mask                      (((uint32_t)0x0F) << 0)
#define USB_EP6R_EA                           USB_EP6R_EA_Mask
#define USB_EP6R_EA_0                         (((uint32_t)0x1))
#define USB_EP6R_EA_1                         (((uint32_t)0x2))
#define USB_EP6R_EA_2                         (((uint32_t)0x4))
#define USB_EP6R_EA_3                         (((uint32_t)0x8))

/************************************* USB->EP7R  ***************************************/
#define USB_EP7R_CTR_RX_Pos                   ((uint32_t)15)                    /* Correct Transfer for reception */
#define USB_EP7R_CTR_RX_Mask                  (((uint32_t)0x01) << 15)
#define USB_EP7R_CTR_RX                       USB_EP7R_CTR_RX_Mask
#define USB_EP7R_DTOG_RX_Pos                  ((uint32_t)14)                    /* Data Toggle, for reception transfers */
#define USB_EP7R_DTOG_RX_Mask                 (((uint32_t)0x01) << 14)
#define USB_EP7R_DTOG_RX                      USB_EP7R_DTOG_RX_Mask
#define USB_EP7R_STAT_RX_Pos                  ((uint32_t)12)                    /* Status bits,for reception transfers */
#define USB_EP7R_STAT_RX_Mask                 (((uint32_t)0x03) << 12)
#define USB_EP7R_STAT_RX                      USB_EP7R_STAT_RX_Mask
#define USB_EP7R_STAT_RX_0                    (((uint32_t)0x1 << USB_EP7R_STAT_RX_Pos))
#define USB_EP7R_STAT_RX_1                    (((uint32_t)0x2 << USB_EP7R_STAT_RX_Pos))
#define USB_EP7R_SETUP_Pos                    ((uint32_t)11)                    /* Setup transaction completed */
#define USB_EP7R_SETUP_Mask                   (((uint32_t)0x01) << 11)
#define USB_EP7R_SETUP                        USB_EP7R_SETUP_Mask
#define USB_EP7R_EP_TYPE_Pos                  ((uint32_t)9)                     /* Endpoint type */
#define USB_EP7R_EP_TYPE_Mask                 (((uint32_t)0x03) << 9)
#define USB_EP7R_EP_TYPE                      USB_EP7R_EP_TYPE_Mask
#define USB_EP7R_EP_TYPE_0                    (((uint32_t)0x1 << USB_EP7R_EP_TYPE_Pos))
#define USB_EP7R_EP_TYPE_1                    (((uint32_t)0x2 << USB_EP7R_EP_TYPE_Pos))
#define USB_EP7R_EP_KIND_Pos                  ((uint32_t)8)                     /* Endpoint kind */
#define USB_EP7R_EP_KIND_Mask                 (((uint32_t)0x01) << 8)
#define USB_EP7R_EP_KIND                      USB_EP7R_EP_KIND_Mask
#define USB_EP7R_CTR_TX_Pos                   ((uint32_t)7)                     /* Correct Transfer for transmission */
#define USB_EP7R_CTR_TX_Mask                  (((uint32_t)0x01) << 7)
#define USB_EP7R_CTR_TX                       USB_EP7R_CTR_TX_Mask
#define USB_EP7R_DTOG_TX_Pos                  ((uint32_t)6)                     /* Data Toggle, for transmission transfers */
#define USB_EP7R_DTOG_TX_Mask                 (((uint32_t)0x01) << 6)
#define USB_EP7R_DTOG_TX                      USB_EP7R_DTOG_TX_Mask
#define USB_EP7R_STAT_TX_Pos                  ((uint32_t)4)                     /* Status bits, for transmission transfers */
#define USB_EP7R_STAT_TX_Mask                 (((uint32_t)0x03) << 4)
#define USB_EP7R_STAT_TX                      USB_EP7R_STAT_TX_Mask
#define USB_EP7R_STAT_TX_0                    (((uint32_t)0x1 << USB_EP7R_STAT_TX_Pos))
#define USB_EP7R_STAT_TX_1                    (((uint32_t)0x2 << USB_EP7R_STAT_TX_Pos))
#define USB_EP7R_EA_Pos                       ((uint32_t)0)                     /* Endpoint address */
#define USB_EP7R_EA_Mask                      (((uint32_t)0x0F) << 0)
#define USB_EP7R_EA                           USB_EP7R_EA_Mask
#define USB_EP7R_EA_0                         (((uint32_t)0x1))
#define USB_EP7R_EA_1                         (((uint32_t)0x2))
#define USB_EP7R_EA_2                         (((uint32_t)0x4))
#define USB_EP7R_EA_3                         (((uint32_t)0x8))

/*****************************************************************************************
*                                     Peripheral CLU                                     *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t CTL;                    /* CTL */
    __I  uint32_t OUT_SYNC;               /* OUT_SYNC */
    uint16_t RESERVED1[4];
    __IO uint32_t CLU0_MX;                /* CLU0_MX */
    __IO uint32_t CLU0_FN;                /* CLU0_FN */
    __IO uint32_t CLU0_CTL;               /* CLU0_CTL */
    uint16_t RESERVED2[2];
    __IO uint32_t CLU1_MX;                /* CLU1_MX */
    __IO uint32_t CLU1_FN;                /* CLU1_FN */
    __IO uint32_t CLU1_CTL;               /* CLU1_CTL */
    uint16_t RESERVED3[2];
    __IO uint32_t CLU2_MX;                /* CLU2_MX */
    __IO uint32_t CLU2_FN;                /* CLU2_FN */
    __IO uint32_t CLU2_CTL;               /* CLU2_CTL */
    uint16_t RESERVED4[2];
    __IO uint32_t CLU3_MX;                /* CLU3_MX */
    __IO uint32_t CLU3_FN;                /* CLU3_FN */
    __IO uint32_t CLU3_CTL;               /* CLU3_CTL */
} CLU_TypeDef;

/************************************** CLU->CTL  ***************************************/
#define CLU_CTL_TO_DAC_SEL_Pos                ((uint32_t)6)                     /* Select CLU channel to trigger DAC */
#define CLU_CTL_TO_DAC_SEL_Mask               (((uint32_t)0x03) << 6)
#define CLU_CTL_TO_DAC_SEL                    CLU_CTL_TO_DAC_SEL_Mask
#define CLU_CTL_TO_DAC_SEL_0                  (((uint32_t)0x1 << CLU_CTL_TO_DAC_SEL_Pos))
#define CLU_CTL_TO_DAC_SEL_1                  (((uint32_t)0x2 << CLU_CTL_TO_DAC_SEL_Pos))
#define CLU_CTL_TO_ADC_SEL_Pos                ((uint32_t)4)                     /* Selecte CLU channel to trigger ADC */
#define CLU_CTL_TO_ADC_SEL_Mask               (((uint32_t)0x03) << 4)
#define CLU_CTL_TO_ADC_SEL                    CLU_CTL_TO_ADC_SEL_Mask
#define CLU_CTL_TO_ADC_SEL_0                  (((uint32_t)0x1 << CLU_CTL_TO_ADC_SEL_Pos))
#define CLU_CTL_TO_ADC_SEL_1                  (((uint32_t)0x2 << CLU_CTL_TO_ADC_SEL_Pos))
#define CLU_CTL_CLU3_EN_Pos                   ((uint32_t)3)                     /* Configurable logic unit 3 enable */
#define CLU_CTL_CLU3_EN_Mask                  (((uint32_t)0x01) << 3)
#define CLU_CTL_CLU3_EN                       CLU_CTL_CLU3_EN_Mask
#define CLU_CTL_CLU2_EN_Pos                   ((uint32_t)2)                     /* Configurable logic unit 2 enable */
#define CLU_CTL_CLU2_EN_Mask                  (((uint32_t)0x01) << 2)
#define CLU_CTL_CLU2_EN                       CLU_CTL_CLU2_EN_Mask
#define CLU_CTL_CLU1_EN_Pos                   ((uint32_t)1)                     /* Configurable logic unit 1 enable */
#define CLU_CTL_CLU1_EN_Mask                  (((uint32_t)0x01) << 1)
#define CLU_CTL_CLU1_EN                       CLU_CTL_CLU1_EN_Mask
#define CLU_CTL_CLU0_EN_Pos                   ((uint32_t)0)                     /* Configurable logic unit 0 enable */
#define CLU_CTL_CLU0_EN_Mask                  (((uint32_t)0x01) << 0)
#define CLU_CTL_CLU0_EN                       CLU_CTL_CLU0_EN_Mask

/*********************************** CLU->OUT_SYNC  *************************************/
#define CLU_OUT_SYNC_CLU3_OUT_SYNC_Pos        ((uint32_t)3)                     /* Configurable logic unit 3 synchronous output */
#define CLU_OUT_SYNC_CLU3_OUT_SYNC_Mask       (((uint32_t)0x01) << 3)
#define CLU_OUT_SYNC_CLU3_OUT_SYNC            CLU_OUT_SYNC_CLU3_OUT_SYNC_Mask
#define CLU_OUT_SYNC_CLU2_OUT_SYNC_Pos        ((uint32_t)2)                     /* Configurable logic unit 2 synchronous output */
#define CLU_OUT_SYNC_CLU2_OUT_SYNC_Mask       (((uint32_t)0x01) << 2)
#define CLU_OUT_SYNC_CLU2_OUT_SYNC            CLU_OUT_SYNC_CLU2_OUT_SYNC_Mask
#define CLU_OUT_SYNC_CLU1_OUT_SYNC_Pos        ((uint32_t)1)                     /* Configurable logic unit 1 synchronous output */
#define CLU_OUT_SYNC_CLU1_OUT_SYNC_Mask       (((uint32_t)0x01) << 1)
#define CLU_OUT_SYNC_CLU1_OUT_SYNC            CLU_OUT_SYNC_CLU1_OUT_SYNC_Mask
#define CLU_OUT_SYNC_CLU0_OUT_SYNC_Pos        ((uint32_t)0)                     /* Configurable logic unit 0 synchronous output */
#define CLU_OUT_SYNC_CLU0_OUT_SYNC_Mask       (((uint32_t)0x01) << 0)
#define CLU_OUT_SYNC_CLU0_OUT_SYNC            CLU_OUT_SYNC_CLU0_OUT_SYNC_Mask

/************************************ CLU->CLU0_MX  *************************************/
#define CLU_CLU0_MX_CARRY_EN_Pos              ((uint32_t)20)                    /* Enable carry in */
#define CLU_CLU0_MX_CARRY_EN_Mask             (((uint32_t)0x01) << 20)
#define CLU_CLU0_MX_CARRY_EN                  CLU_CLU0_MX_CARRY_EN_Mask
#define CLU_CLU0_MX_MXD_EN_Pos                ((uint32_t)19)                    /* Enable CLUx multiplexer D */
#define CLU_CLU0_MX_MXD_EN_Mask               (((uint32_t)0x01) << 19)
#define CLU_CLU0_MX_MXD_EN                    CLU_CLU0_MX_MXD_EN_Mask
#define CLU_CLU0_MX_MXC_EN_Pos                ((uint32_t)18)                    /* Enable CLUx multiplexer C */
#define CLU_CLU0_MX_MXC_EN_Mask               (((uint32_t)0x01) << 18)
#define CLU_CLU0_MX_MXC_EN                    CLU_CLU0_MX_MXC_EN_Mask
#define CLU_CLU0_MX_MXB_EN_Pos                ((uint32_t)17)                    /* Enable CLUx multiplexer B */
#define CLU_CLU0_MX_MXB_EN_Mask               (((uint32_t)0x01) << 17)
#define CLU_CLU0_MX_MXB_EN                    CLU_CLU0_MX_MXB_EN_Mask
#define CLU_CLU0_MX_MXA_EN_Pos                ((uint32_t)16)                    /* Enable CLUx multiplexer A */
#define CLU_CLU0_MX_MXA_EN_Mask               (((uint32_t)0x01) << 16)
#define CLU_CLU0_MX_MXA_EN                    CLU_CLU0_MX_MXA_EN_Mask
#define CLU_CLU0_MX_MXD_Pos                   ((uint32_t)12)                    /* Select the input source to CLUx multiplex channel D */
#define CLU_CLU0_MX_MXD_Mask                  (((uint32_t)0x0F) << 12)
#define CLU_CLU0_MX_MXD                       CLU_CLU0_MX_MXD_Mask
#define CLU_CLU0_MX_MXD_0                     (((uint32_t)0x1 << CLU_CLU0_MX_MXD_Pos))
#define CLU_CLU0_MX_MXD_1                     (((uint32_t)0x2 << CLU_CLU0_MX_MXD_Pos))
#define CLU_CLU0_MX_MXD_2                     (((uint32_t)0x4 << CLU_CLU0_MX_MXD_Pos))
#define CLU_CLU0_MX_MXD_3                     (((uint32_t)0x8 << CLU_CLU0_MX_MXD_Pos))
#define CLU_CLU0_MX_MXC_Pos                   ((uint32_t)8)                     /* Select the input source to CLUx multiplex channel C */
#define CLU_CLU0_MX_MXC_Mask                  (((uint32_t)0x0F) << 8)
#define CLU_CLU0_MX_MXC                       CLU_CLU0_MX_MXC_Mask
#define CLU_CLU0_MX_MXC_0                     (((uint32_t)0x1 << CLU_CLU0_MX_MXC_Pos))
#define CLU_CLU0_MX_MXC_1                     (((uint32_t)0x2 << CLU_CLU0_MX_MXC_Pos))
#define CLU_CLU0_MX_MXC_2                     (((uint32_t)0x4 << CLU_CLU0_MX_MXC_Pos))
#define CLU_CLU0_MX_MXC_3                     (((uint32_t)0x8 << CLU_CLU0_MX_MXC_Pos))
#define CLU_CLU0_MX_MXB_Pos                   ((uint32_t)4)                     /* Select the input source to CLUx multiplex channel B */
#define CLU_CLU0_MX_MXB_Mask                  (((uint32_t)0x0F) << 4)
#define CLU_CLU0_MX_MXB                       CLU_CLU0_MX_MXB_Mask
#define CLU_CLU0_MX_MXB_0                     (((uint32_t)0x1 << CLU_CLU0_MX_MXB_Pos))
#define CLU_CLU0_MX_MXB_1                     (((uint32_t)0x2 << CLU_CLU0_MX_MXB_Pos))
#define CLU_CLU0_MX_MXB_2                     (((uint32_t)0x4 << CLU_CLU0_MX_MXB_Pos))
#define CLU_CLU0_MX_MXB_3                     (((uint32_t)0x8 << CLU_CLU0_MX_MXB_Pos))
#define CLU_CLU0_MX_MXA_Pos                   ((uint32_t)0)                     /* Select the input source to CLUx multiplex channel A */
#define CLU_CLU0_MX_MXA_Mask                  (((uint32_t)0x0F) << 0)
#define CLU_CLU0_MX_MXA                       CLU_CLU0_MX_MXA_Mask
#define CLU_CLU0_MX_MXA_0                     (((uint32_t)0x1))
#define CLU_CLU0_MX_MXA_1                     (((uint32_t)0x2))
#define CLU_CLU0_MX_MXA_2                     (((uint32_t)0x4))
#define CLU_CLU0_MX_MXA_3                     (((uint32_t)0x8))

/************************************ CLU->CLU1_MX  *************************************/
#define CLU_CLU1_MX_CARRY_EN_Pos              ((uint32_t)20)                    /* Enable carry in */
#define CLU_CLU1_MX_CARRY_EN_Mask             (((uint32_t)0x01) << 20)
#define CLU_CLU1_MX_CARRY_EN                  CLU_CLU1_MX_CARRY_EN_Mask
#define CLU_CLU1_MX_MXD_EN_Pos                ((uint32_t)19)                    /* Enable CLUx multiplexer D */
#define CLU_CLU1_MX_MXD_EN_Mask               (((uint32_t)0x01) << 19)
#define CLU_CLU1_MX_MXD_EN                    CLU_CLU1_MX_MXD_EN_Mask
#define CLU_CLU1_MX_MXC_EN_Pos                ((uint32_t)18)                    /* Enable CLUx multiplexer C */
#define CLU_CLU1_MX_MXC_EN_Mask               (((uint32_t)0x01) << 18)
#define CLU_CLU1_MX_MXC_EN                    CLU_CLU1_MX_MXC_EN_Mask
#define CLU_CLU1_MX_MXB_EN_Pos                ((uint32_t)17)                    /* Enable CLUx multiplexer B */
#define CLU_CLU1_MX_MXB_EN_Mask               (((uint32_t)0x01) << 17)
#define CLU_CLU1_MX_MXB_EN                    CLU_CLU1_MX_MXB_EN_Mask
#define CLU_CLU1_MX_MXA_EN_Pos                ((uint32_t)16)                    /* Enable CLUx multiplexer A */
#define CLU_CLU1_MX_MXA_EN_Mask               (((uint32_t)0x01) << 16)
#define CLU_CLU1_MX_MXA_EN                    CLU_CLU1_MX_MXA_EN_Mask
#define CLU_CLU1_MX_MXD_Pos                   ((uint32_t)12)                    /* Select the input source to CLUx multiplex channel D */
#define CLU_CLU1_MX_MXD_Mask                  (((uint32_t)0x0F) << 12)
#define CLU_CLU1_MX_MXD                       CLU_CLU1_MX_MXD_Mask
#define CLU_CLU1_MX_MXD_0                     (((uint32_t)0x1 << CLU_CLU1_MX_MXD_Pos))
#define CLU_CLU1_MX_MXD_1                     (((uint32_t)0x2 << CLU_CLU1_MX_MXD_Pos))
#define CLU_CLU1_MX_MXD_2                     (((uint32_t)0x4 << CLU_CLU1_MX_MXD_Pos))
#define CLU_CLU1_MX_MXD_3                     (((uint32_t)0x8 << CLU_CLU1_MX_MXD_Pos))
#define CLU_CLU1_MX_MXC_Pos                   ((uint32_t)8)                     /* Select the input source to CLUx multiplex channel C */
#define CLU_CLU1_MX_MXC_Mask                  (((uint32_t)0x0F) << 8)
#define CLU_CLU1_MX_MXC                       CLU_CLU1_MX_MXC_Mask
#define CLU_CLU1_MX_MXC_0                     (((uint32_t)0x1 << CLU_CLU1_MX_MXC_Pos))
#define CLU_CLU1_MX_MXC_1                     (((uint32_t)0x2 << CLU_CLU1_MX_MXC_Pos))
#define CLU_CLU1_MX_MXC_2                     (((uint32_t)0x4 << CLU_CLU1_MX_MXC_Pos))
#define CLU_CLU1_MX_MXC_3                     (((uint32_t)0x8 << CLU_CLU1_MX_MXC_Pos))
#define CLU_CLU1_MX_MXB_Pos                   ((uint32_t)4)                     /* Select the input source to CLUx multiplex channel B */
#define CLU_CLU1_MX_MXB_Mask                  (((uint32_t)0x0F) << 4)
#define CLU_CLU1_MX_MXB                       CLU_CLU1_MX_MXB_Mask
#define CLU_CLU1_MX_MXB_0                     (((uint32_t)0x1 << CLU_CLU1_MX_MXB_Pos))
#define CLU_CLU1_MX_MXB_1                     (((uint32_t)0x2 << CLU_CLU1_MX_MXB_Pos))
#define CLU_CLU1_MX_MXB_2                     (((uint32_t)0x4 << CLU_CLU1_MX_MXB_Pos))
#define CLU_CLU1_MX_MXB_3                     (((uint32_t)0x8 << CLU_CLU1_MX_MXB_Pos))
#define CLU_CLU1_MX_MXA_Pos                   ((uint32_t)0)                     /* Select the input source to CLUx multiplex channel A */
#define CLU_CLU1_MX_MXA_Mask                  (((uint32_t)0x0F) << 0)
#define CLU_CLU1_MX_MXA                       CLU_CLU1_MX_MXA_Mask
#define CLU_CLU1_MX_MXA_0                     (((uint32_t)0x1))
#define CLU_CLU1_MX_MXA_1                     (((uint32_t)0x2))
#define CLU_CLU1_MX_MXA_2                     (((uint32_t)0x4))
#define CLU_CLU1_MX_MXA_3                     (((uint32_t)0x8))

/************************************ CLU->CLU2_MX  *************************************/
#define CLU_CLU2_MX_CARRY_EN_Pos              ((uint32_t)20)                    /* Enable carry in */
#define CLU_CLU2_MX_CARRY_EN_Mask             (((uint32_t)0x01) << 20)
#define CLU_CLU2_MX_CARRY_EN                  CLU_CLU2_MX_CARRY_EN_Mask
#define CLU_CLU2_MX_MXD_EN_Pos                ((uint32_t)19)                    /* Enable CLUx multiplexer D */
#define CLU_CLU2_MX_MXD_EN_Mask               (((uint32_t)0x01) << 19)
#define CLU_CLU2_MX_MXD_EN                    CLU_CLU2_MX_MXD_EN_Mask
#define CLU_CLU2_MX_MXC_EN_Pos                ((uint32_t)18)                    /* Enable CLUx multiplexer C */
#define CLU_CLU2_MX_MXC_EN_Mask               (((uint32_t)0x01) << 18)
#define CLU_CLU2_MX_MXC_EN                    CLU_CLU2_MX_MXC_EN_Mask
#define CLU_CLU2_MX_MXB_EN_Pos                ((uint32_t)17)                    /* Enable CLUx multiplexer B */
#define CLU_CLU2_MX_MXB_EN_Mask               (((uint32_t)0x01) << 17)
#define CLU_CLU2_MX_MXB_EN                    CLU_CLU2_MX_MXB_EN_Mask
#define CLU_CLU2_MX_MXA_EN_Pos                ((uint32_t)16)                    /* Enable CLUx multiplexer A */
#define CLU_CLU2_MX_MXA_EN_Mask               (((uint32_t)0x01) << 16)
#define CLU_CLU2_MX_MXA_EN                    CLU_CLU2_MX_MXA_EN_Mask
#define CLU_CLU2_MX_MXD_Pos                   ((uint32_t)12)                    /* Select the input source to CLUx multiplex channel D */
#define CLU_CLU2_MX_MXD_Mask                  (((uint32_t)0x0F) << 12)
#define CLU_CLU2_MX_MXD                       CLU_CLU2_MX_MXD_Mask
#define CLU_CLU2_MX_MXD_0                     (((uint32_t)0x1 << CLU_CLU2_MX_MXD_Pos))
#define CLU_CLU2_MX_MXD_1                     (((uint32_t)0x2 << CLU_CLU2_MX_MXD_Pos))
#define CLU_CLU2_MX_MXD_2                     (((uint32_t)0x4 << CLU_CLU2_MX_MXD_Pos))
#define CLU_CLU2_MX_MXD_3                     (((uint32_t)0x8 << CLU_CLU2_MX_MXD_Pos))
#define CLU_CLU2_MX_MXC_Pos                   ((uint32_t)8)                     /* Select the input source to CLUx multiplex channel C */
#define CLU_CLU2_MX_MXC_Mask                  (((uint32_t)0x0F) << 8)
#define CLU_CLU2_MX_MXC                       CLU_CLU2_MX_MXC_Mask
#define CLU_CLU2_MX_MXC_0                     (((uint32_t)0x1 << CLU_CLU2_MX_MXC_Pos))
#define CLU_CLU2_MX_MXC_1                     (((uint32_t)0x2 << CLU_CLU2_MX_MXC_Pos))
#define CLU_CLU2_MX_MXC_2                     (((uint32_t)0x4 << CLU_CLU2_MX_MXC_Pos))
#define CLU_CLU2_MX_MXC_3                     (((uint32_t)0x8 << CLU_CLU2_MX_MXC_Pos))
#define CLU_CLU2_MX_MXB_Pos                   ((uint32_t)4)                     /* Select the input source to CLUx multiplex channel B */
#define CLU_CLU2_MX_MXB_Mask                  (((uint32_t)0x0F) << 4)
#define CLU_CLU2_MX_MXB                       CLU_CLU2_MX_MXB_Mask
#define CLU_CLU2_MX_MXB_0                     (((uint32_t)0x1 << CLU_CLU2_MX_MXB_Pos))
#define CLU_CLU2_MX_MXB_1                     (((uint32_t)0x2 << CLU_CLU2_MX_MXB_Pos))
#define CLU_CLU2_MX_MXB_2                     (((uint32_t)0x4 << CLU_CLU2_MX_MXB_Pos))
#define CLU_CLU2_MX_MXB_3                     (((uint32_t)0x8 << CLU_CLU2_MX_MXB_Pos))
#define CLU_CLU2_MX_MXA_Pos                   ((uint32_t)0)                     /* Select the input source to CLUx multiplex channel A */
#define CLU_CLU2_MX_MXA_Mask                  (((uint32_t)0x0F) << 0)
#define CLU_CLU2_MX_MXA                       CLU_CLU2_MX_MXA_Mask
#define CLU_CLU2_MX_MXA_0                     (((uint32_t)0x1))
#define CLU_CLU2_MX_MXA_1                     (((uint32_t)0x2))
#define CLU_CLU2_MX_MXA_2                     (((uint32_t)0x4))
#define CLU_CLU2_MX_MXA_3                     (((uint32_t)0x8))

/************************************ CLU->CLU3_MX  *************************************/
#define CLU_CLU3_MX_CARRY_EN_Pos              ((uint32_t)20)                    /* Enable carry in */
#define CLU_CLU3_MX_CARRY_EN_Mask             (((uint32_t)0x01) << 20)
#define CLU_CLU3_MX_CARRY_EN                  CLU_CLU3_MX_CARRY_EN_Mask
#define CLU_CLU3_MX_MXD_EN_Pos                ((uint32_t)19)                    /* Enable CLUx multiplexer D */
#define CLU_CLU3_MX_MXD_EN_Mask               (((uint32_t)0x01) << 19)
#define CLU_CLU3_MX_MXD_EN                    CLU_CLU3_MX_MXD_EN_Mask
#define CLU_CLU3_MX_MXC_EN_Pos                ((uint32_t)18)                    /* Enable CLUx multiplexer C */
#define CLU_CLU3_MX_MXC_EN_Mask               (((uint32_t)0x01) << 18)
#define CLU_CLU3_MX_MXC_EN                    CLU_CLU3_MX_MXC_EN_Mask
#define CLU_CLU3_MX_MXB_EN_Pos                ((uint32_t)17)                    /* Enable CLUx multiplexer B */
#define CLU_CLU3_MX_MXB_EN_Mask               (((uint32_t)0x01) << 17)
#define CLU_CLU3_MX_MXB_EN                    CLU_CLU3_MX_MXB_EN_Mask
#define CLU_CLU3_MX_MXA_EN_Pos                ((uint32_t)16)                    /* Enable CLUx multiplexer A */
#define CLU_CLU3_MX_MXA_EN_Mask               (((uint32_t)0x01) << 16)
#define CLU_CLU3_MX_MXA_EN                    CLU_CLU3_MX_MXA_EN_Mask
#define CLU_CLU3_MX_MXD_Pos                   ((uint32_t)12)                    /* Select the input source to CLUx multiplex channel D */
#define CLU_CLU3_MX_MXD_Mask                  (((uint32_t)0x0F) << 12)
#define CLU_CLU3_MX_MXD                       CLU_CLU3_MX_MXD_Mask
#define CLU_CLU3_MX_MXD_0                     (((uint32_t)0x1 << CLU_CLU3_MX_MXD_Pos))
#define CLU_CLU3_MX_MXD_1                     (((uint32_t)0x2 << CLU_CLU3_MX_MXD_Pos))
#define CLU_CLU3_MX_MXD_2                     (((uint32_t)0x4 << CLU_CLU3_MX_MXD_Pos))
#define CLU_CLU3_MX_MXD_3                     (((uint32_t)0x8 << CLU_CLU3_MX_MXD_Pos))
#define CLU_CLU3_MX_MXC_Pos                   ((uint32_t)8)                     /* Select the input source to CLUx multiplex channel C */
#define CLU_CLU3_MX_MXC_Mask                  (((uint32_t)0x0F) << 8)
#define CLU_CLU3_MX_MXC                       CLU_CLU3_MX_MXC_Mask
#define CLU_CLU3_MX_MXC_0                     (((uint32_t)0x1 << CLU_CLU3_MX_MXC_Pos))
#define CLU_CLU3_MX_MXC_1                     (((uint32_t)0x2 << CLU_CLU3_MX_MXC_Pos))
#define CLU_CLU3_MX_MXC_2                     (((uint32_t)0x4 << CLU_CLU3_MX_MXC_Pos))
#define CLU_CLU3_MX_MXC_3                     (((uint32_t)0x8 << CLU_CLU3_MX_MXC_Pos))
#define CLU_CLU3_MX_MXB_Pos                   ((uint32_t)4)                     /* Select the input source to CLUx multiplex channel B */
#define CLU_CLU3_MX_MXB_Mask                  (((uint32_t)0x0F) << 4)
#define CLU_CLU3_MX_MXB                       CLU_CLU3_MX_MXB_Mask
#define CLU_CLU3_MX_MXB_0                     (((uint32_t)0x1 << CLU_CLU3_MX_MXB_Pos))
#define CLU_CLU3_MX_MXB_1                     (((uint32_t)0x2 << CLU_CLU3_MX_MXB_Pos))
#define CLU_CLU3_MX_MXB_2                     (((uint32_t)0x4 << CLU_CLU3_MX_MXB_Pos))
#define CLU_CLU3_MX_MXB_3                     (((uint32_t)0x8 << CLU_CLU3_MX_MXB_Pos))
#define CLU_CLU3_MX_MXA_Pos                   ((uint32_t)0)                     /* Select the input source to CLUx multiplex channel A */
#define CLU_CLU3_MX_MXA_Mask                  (((uint32_t)0x0F) << 0)
#define CLU_CLU3_MX_MXA                       CLU_CLU3_MX_MXA_Mask
#define CLU_CLU3_MX_MXA_0                     (((uint32_t)0x1))
#define CLU_CLU3_MX_MXA_1                     (((uint32_t)0x2))
#define CLU_CLU3_MX_MXA_2                     (((uint32_t)0x4))
#define CLU_CLU3_MX_MXA_3                     (((uint32_t)0x8))

/************************************ CLU->CLU0_FN  *************************************/
#define CLU_CLU0_FN_CLUx_FN_Pos               ((uint32_t)0)                     /* Function selection for CLUx */
#define CLU_CLU0_FN_CLUx_FN_Mask              (((uint32_t)0xFFFFFFFF) << 0)
#define CLU_CLU0_FN_CLUx_FN                   CLU_CLU0_FN_CLUx_FN_Mask

/************************************ CLU->CLU1_FN  *************************************/
#define CLU_CLU1_FN_CLUx_FN_Pos               ((uint32_t)0)                     /* Function selection for CLUx */
#define CLU_CLU1_FN_CLUx_FN_Mask              (((uint32_t)0xFFFFFFFF) << 0)
#define CLU_CLU1_FN_CLUx_FN                   CLU_CLU1_FN_CLUx_FN_Mask

/************************************ CLU->CLU2_FN  *************************************/
#define CLU_CLU2_FN_CLUx_FN_Pos               ((uint32_t)0)                     /* Function selection for CLUx */
#define CLU_CLU2_FN_CLUx_FN_Mask              (((uint32_t)0xFFFFFFFF) << 0)
#define CLU_CLU2_FN_CLUx_FN                   CLU_CLU2_FN_CLUx_FN_Mask

/************************************ CLU->CLU3_FN  *************************************/
#define CLU_CLU3_FN_CLUx_FN_Pos               ((uint32_t)0)                     /* Function selection for CLUx */
#define CLU_CLU3_FN_CLUx_FN_Mask              (((uint32_t)0xFFFFFFFF) << 0)
#define CLU_CLU3_FN_CLUx_FN                   CLU_CLU3_FN_CLUx_FN_Mask

/*********************************** CLU->CLU0_CTL  *************************************/
#define CLU_CLU0_CTL_OUTSEL_Pos               ((uint32_t)7)                     /* CLUx output selection */
#define CLU_CLU0_CTL_OUTSEL_Mask              (((uint32_t)0x01) << 7)
#define CLU_CLU0_CTL_OUTSEL                   CLU_CLU0_CTL_OUTSEL_Mask
#define CLU_CLU0_CTL_OEN_Pos                  ((uint32_t)6)                     /* CLU port output enable */
#define CLU_CLU0_CTL_OEN_Mask                 (((uint32_t)0x01) << 6)
#define CLU_CLU0_CTL_OEN                      CLU_CLU0_CTL_OEN_Mask
#define CLU_CLU0_CTL_SET_Pos                  ((uint32_t)4)                     /* Set CLUx */
#define CLU_CLU0_CTL_SET_Mask                 (((uint32_t)0x01) << 4)
#define CLU_CLU0_CTL_SET                      CLU_CLU0_CTL_SET_Mask
#define CLU_CLU0_CTL_RST_Pos                  ((uint32_t)3)                     /* Reset CLUx */
#define CLU_CLU0_CTL_RST_Mask                 (((uint32_t)0x01) << 3)
#define CLU_CLU0_CTL_RST                      CLU_CLU0_CTL_RST_Mask
#define CLU_CLU0_CTL_CLKINV_Pos               ((uint32_t)2)                     /* CLUx D flip-flop Clock Invert */
#define CLU_CLU0_CTL_CLKINV_Mask              (((uint32_t)0x01) << 2)
#define CLU_CLU0_CTL_CLKINV                   CLU_CLU0_CTL_CLKINV_Mask
#define CLU_CLU0_CTL_CLKSEL_Pos               ((uint32_t)0)                     /* CLUx D flip-flop Clock Selection */
#define CLU_CLU0_CTL_CLKSEL_Mask              (((uint32_t)0x03) << 0)
#define CLU_CLU0_CTL_CLKSEL                   CLU_CLU0_CTL_CLKSEL_Mask
#define CLU_CLU0_CTL_CLKSEL_0                 (((uint32_t)0x1))
#define CLU_CLU0_CTL_CLKSEL_1                 (((uint32_t)0x2))

/*********************************** CLU->CLU1_CTL  *************************************/
#define CLU_CLU1_CTL_OUTSEL_Pos               ((uint32_t)7)                     /* CLUx output selection */
#define CLU_CLU1_CTL_OUTSEL_Mask              (((uint32_t)0x01) << 7)
#define CLU_CLU1_CTL_OUTSEL                   CLU_CLU1_CTL_OUTSEL_Mask
#define CLU_CLU1_CTL_OEN_Pos                  ((uint32_t)6)                     /* CLU port output enable */
#define CLU_CLU1_CTL_OEN_Mask                 (((uint32_t)0x01) << 6)
#define CLU_CLU1_CTL_OEN                      CLU_CLU1_CTL_OEN_Mask
#define CLU_CLU1_CTL_SET_Pos                  ((uint32_t)4)                     /* Set CLUx */
#define CLU_CLU1_CTL_SET_Mask                 (((uint32_t)0x01) << 4)
#define CLU_CLU1_CTL_SET                      CLU_CLU1_CTL_SET_Mask
#define CLU_CLU1_CTL_RST_Pos                  ((uint32_t)3)                     /* Reset CLUx */
#define CLU_CLU1_CTL_RST_Mask                 (((uint32_t)0x01) << 3)
#define CLU_CLU1_CTL_RST                      CLU_CLU1_CTL_RST_Mask
#define CLU_CLU1_CTL_CLKINV_Pos               ((uint32_t)2)                     /* CLUx D flip-flop Clock Invert */
#define CLU_CLU1_CTL_CLKINV_Mask              (((uint32_t)0x01) << 2)
#define CLU_CLU1_CTL_CLKINV                   CLU_CLU1_CTL_CLKINV_Mask
#define CLU_CLU1_CTL_CLKSEL_Pos               ((uint32_t)0)                     /* CLUx D flip-flop Clock Selection */
#define CLU_CLU1_CTL_CLKSEL_Mask              (((uint32_t)0x03) << 0)
#define CLU_CLU1_CTL_CLKSEL                   CLU_CLU1_CTL_CLKSEL_Mask
#define CLU_CLU1_CTL_CLKSEL_0                 (((uint32_t)0x1))
#define CLU_CLU1_CTL_CLKSEL_1                 (((uint32_t)0x2))

/*********************************** CLU->CLU2_CTL  *************************************/
#define CLU_CLU2_CTL_OUTSEL_Pos               ((uint32_t)7)                     /* CLUx output selection */
#define CLU_CLU2_CTL_OUTSEL_Mask              (((uint32_t)0x01) << 7)
#define CLU_CLU2_CTL_OUTSEL                   CLU_CLU2_CTL_OUTSEL_Mask
#define CLU_CLU2_CTL_OEN_Pos                  ((uint32_t)6)                     /* CLU port output enable */
#define CLU_CLU2_CTL_OEN_Mask                 (((uint32_t)0x01) << 6)
#define CLU_CLU2_CTL_OEN                      CLU_CLU2_CTL_OEN_Mask
#define CLU_CLU2_CTL_SET_Pos                  ((uint32_t)4)                     /* Set CLUx */
#define CLU_CLU2_CTL_SET_Mask                 (((uint32_t)0x01) << 4)
#define CLU_CLU2_CTL_SET                      CLU_CLU2_CTL_SET_Mask
#define CLU_CLU2_CTL_RST_Pos                  ((uint32_t)3)                     /* Reset CLUx */
#define CLU_CLU2_CTL_RST_Mask                 (((uint32_t)0x01) << 3)
#define CLU_CLU2_CTL_RST                      CLU_CLU2_CTL_RST_Mask
#define CLU_CLU2_CTL_CLKINV_Pos               ((uint32_t)2)                     /* CLUx D flip-flop Clock Invert */
#define CLU_CLU2_CTL_CLKINV_Mask              (((uint32_t)0x01) << 2)
#define CLU_CLU2_CTL_CLKINV                   CLU_CLU2_CTL_CLKINV_Mask
#define CLU_CLU2_CTL_CLKSEL_Pos               ((uint32_t)0)                     /* CLUx D flip-flop Clock Selection */
#define CLU_CLU2_CTL_CLKSEL_Mask              (((uint32_t)0x03) << 0)
#define CLU_CLU2_CTL_CLKSEL                   CLU_CLU2_CTL_CLKSEL_Mask
#define CLU_CLU2_CTL_CLKSEL_0                 (((uint32_t)0x1))
#define CLU_CLU2_CTL_CLKSEL_1                 (((uint32_t)0x2))

/*********************************** CLU->CLU3_CTL  *************************************/
#define CLU_CLU3_CTL_OUTSEL_Pos               ((uint32_t)7)                     /* CLUx output selection */
#define CLU_CLU3_CTL_OUTSEL_Mask              (((uint32_t)0x01) << 7)
#define CLU_CLU3_CTL_OUTSEL                   CLU_CLU3_CTL_OUTSEL_Mask
#define CLU_CLU3_CTL_OEN_Pos                  ((uint32_t)6)                     /* CLU port output enable */
#define CLU_CLU3_CTL_OEN_Mask                 (((uint32_t)0x01) << 6)
#define CLU_CLU3_CTL_OEN                      CLU_CLU3_CTL_OEN_Mask
#define CLU_CLU3_CTL_SET_Pos                  ((uint32_t)4)                     /* Set CLUx */
#define CLU_CLU3_CTL_SET_Mask                 (((uint32_t)0x01) << 4)
#define CLU_CLU3_CTL_SET                      CLU_CLU3_CTL_SET_Mask
#define CLU_CLU3_CTL_RST_Pos                  ((uint32_t)3)                     /* Reset CLUx */
#define CLU_CLU3_CTL_RST_Mask                 (((uint32_t)0x01) << 3)
#define CLU_CLU3_CTL_RST                      CLU_CLU3_CTL_RST_Mask
#define CLU_CLU3_CTL_CLKINV_Pos               ((uint32_t)2)                     /* CLUx D flip-flop Clock Invert */
#define CLU_CLU3_CTL_CLKINV_Mask              (((uint32_t)0x01) << 2)
#define CLU_CLU3_CTL_CLKINV                   CLU_CLU3_CTL_CLKINV_Mask
#define CLU_CLU3_CTL_CLKSEL_Pos               ((uint32_t)0)                     /* CLUx D flip-flop Clock Selection */
#define CLU_CLU3_CTL_CLKSEL_Mask              (((uint32_t)0x03) << 0)
#define CLU_CLU3_CTL_CLKSEL                   CLU_CLU3_CTL_CLKSEL_Mask
#define CLU_CLU3_CTL_CLKSEL_0                 (((uint32_t)0x1))
#define CLU_CLU3_CTL_CLKSEL_1                 (((uint32_t)0x2))

/*****************************************************************************************
*                                     Peripheral CAN                                     *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t MCR;                    /* MCR */
    __IO uint32_t MSR;                    /* MSR */
    __IO uint32_t TSR;                    /* TSR */
    __IO uint32_t RF0R;                   /* RF0R */
    __IO uint32_t RF1R;                   /* RF1R */
    __IO uint32_t IER;                    /* IER */
    __IO uint32_t ESR;                    /* ESR */
    __IO uint32_t BTR;                    /* BTR */
    uint16_t RESERVED1[176];
    __IO uint32_t TI0R;                   /* TI0R */
    __IO uint32_t TDT0R;                  /* TDT0R */
    __IO uint32_t TDL0R;                  /* TDL0R */
    __IO uint32_t TDH0R;                  /* TDH0R */
    __IO uint32_t TI1R;                   /* TI1R */
    __IO uint32_t TDT1R;                  /* TDT1R */
    __IO uint32_t TDL1R;                  /* TDL1R */
    __IO uint32_t TDH1R;                  /* TDH1R */
    __IO uint32_t TI2R;                   /* TI2R */
    __IO uint32_t TDT2R;                  /* TDT2R */
    __IO uint32_t TDL2R;                  /* TDL2R */
    __IO uint32_t TDH2R;                  /* TDH2R */
    __I  uint32_t RI0R;                   /* RI0R */
    __I  uint32_t RDT0R;                  /* RDT0R */
    __I  uint32_t RDL0R;                  /* RDL0R */
    __I  uint32_t RDH0R;                  /* RDH0R */
    __I  uint32_t RI1R;                   /* RI1R */
    __I  uint32_t RDT1R;                  /* RDT1R */
    __I  uint32_t RDL1R;                  /* RDL1R */
    __I  uint32_t RDH1R;                  /* RDH1R */
    uint16_t RESERVED2[24];
    __IO uint32_t FMR;                    /* FMR */
    __IO uint32_t FM1R;                   /* FM1R */
    uint16_t RESERVED3[2];
    __IO uint32_t FS1R;                   /* FS1R */
    uint16_t RESERVED4[2];
    __IO uint32_t FFA1R;                  /* FFA1R */
    uint16_t RESERVED5[2];
    __IO uint32_t FA1R;                   /* FA1R */
    uint16_t RESERVED6[16];
    __IO uint32_t F0R1;                   /* F0R1 */
    __IO uint32_t F0R2;                   /* F0R2 */
    __IO uint32_t F1R1;                   /* F1R1 */
    __IO uint32_t F1R2;                   /* F1R2 */
    __IO uint32_t F2R1;                   /* F2R1 */
    __IO uint32_t F2R2;                   /* F2R2 */
    __IO uint32_t F3R1;                   /* F3R1 */
    __IO uint32_t F3R2;                   /* F3R2 */
    __IO uint32_t F4R1;                   /* F4R1 */
    __IO uint32_t F4R2;                   /* F4R2 */
    __IO uint32_t F5R1;                   /* F5R1 */
    __IO uint32_t F5R2;                   /* F5R2 */
    __IO uint32_t F6R1;                   /* F6R1 */
    __IO uint32_t F6R2;                   /* F6R2 */
    __IO uint32_t F7R1;                   /* F7R1 */
    __IO uint32_t F7R2;                   /* F7R2 */
    __IO uint32_t F8R1;                   /* F8R1 */
    __IO uint32_t F8R2;                   /* F8R2 */
    __IO uint32_t F9R1;                   /* F9R1 */
    __IO uint32_t F9R2;                   /* F9R2 */
    __IO uint32_t F10R1;                  /* F10R1 */
    __IO uint32_t F10R2;                  /* F10R2 */
    __IO uint32_t F11R1;                  /* F11R1 */
    __IO uint32_t F11R2;                  /* F11R2 */
    __IO uint32_t F12R1;                  /* F12R1 */
    __IO uint32_t F12R2;                  /* F12R2 */
    __IO uint32_t F13R1;                  /* F13R1 */
    __IO uint32_t F13R2;                  /* F13R2 */
} CAN_TypeDef;

/************************************** CAN->MCR  ***************************************/
#define CAN_MCR_DBF_Pos                       ((uint32_t)16)                    /* Debug freeze */
#define CAN_MCR_DBF_Mask                      (((uint32_t)0x01) << 16)
#define CAN_MCR_DBF                           CAN_MCR_DBF_Mask
#define CAN_MCR_RESET_Pos                     ((uint32_t)15)                    /* CAN software master reset */
#define CAN_MCR_RESET_Mask                    (((uint32_t)0x01) << 15)
#define CAN_MCR_RESET                         CAN_MCR_RESET_Mask
#define CAN_MCR_TTCM_Pos                      ((uint32_t)7)                     /* Time triggered communication mode */
#define CAN_MCR_TTCM_Mask                     (((uint32_t)0x01) << 7)
#define CAN_MCR_TTCM                          CAN_MCR_TTCM_Mask
#define CAN_MCR_ABOM_Pos                      ((uint32_t)6)                     /* Automatic bus-off management */
#define CAN_MCR_ABOM_Mask                     (((uint32_t)0x01) << 6)
#define CAN_MCR_ABOM                          CAN_MCR_ABOM_Mask
#define CAN_MCR_AWUM_Pos                      ((uint32_t)5)                     /* Automatic wakeup mode */
#define CAN_MCR_AWUM_Mask                     (((uint32_t)0x01) << 5)
#define CAN_MCR_AWUM                          CAN_MCR_AWUM_Mask
#define CAN_MCR_NART_Pos                      ((uint32_t)4)                     /* No automatic retransmission */
#define CAN_MCR_NART_Mask                     (((uint32_t)0x01) << 4)
#define CAN_MCR_NART                          CAN_MCR_NART_Mask
#define CAN_MCR_RFLM_Pos                      ((uint32_t)3)                     /* Receive FIFO locked mode */
#define CAN_MCR_RFLM_Mask                     (((uint32_t)0x01) << 3)
#define CAN_MCR_RFLM                          CAN_MCR_RFLM_Mask
#define CAN_MCR_TXFP_Pos                      ((uint32_t)2)                     /* Transmit FIFO priority */
#define CAN_MCR_TXFP_Mask                     (((uint32_t)0x01) << 2)
#define CAN_MCR_TXFP                          CAN_MCR_TXFP_Mask
#define CAN_MCR_SLEEP_Pos                     ((uint32_t)1)                     /* Sleep mode request */
#define CAN_MCR_SLEEP_Mask                    (((uint32_t)0x01) << 1)
#define CAN_MCR_SLEEP                         CAN_MCR_SLEEP_Mask
#define CAN_MCR_INRQ_Pos                      ((uint32_t)0)                     /* Initialization request */
#define CAN_MCR_INRQ_Mask                     (((uint32_t)0x01) << 0)
#define CAN_MCR_INRQ                          CAN_MCR_INRQ_Mask

/************************************** CAN->MSR  ***************************************/
#define CAN_MSR_RX_Pos                        ((uint32_t)11)                    /* CAN RX signal */
#define CAN_MSR_RX_Mask                       (((uint32_t)0x01) << 11)
#define CAN_MSR_RX                            CAN_MSR_RX_Mask
#define CAN_MSR_SAMP_Pos                      ((uint32_t)10)                    /* Last sample point */
#define CAN_MSR_SAMP_Mask                     (((uint32_t)0x01) << 10)
#define CAN_MSR_SAMP                          CAN_MSR_SAMP_Mask
#define CAN_MSR_RXM_Pos                       ((uint32_t)9)                     /* Receive mode */
#define CAN_MSR_RXM_Mask                      (((uint32_t)0x01) << 9)
#define CAN_MSR_RXM                           CAN_MSR_RXM_Mask
#define CAN_MSR_TXM_Pos                       ((uint32_t)8)                     /* Transmit mode */
#define CAN_MSR_TXM_Mask                      (((uint32_t)0x01) << 8)
#define CAN_MSR_TXM                           CAN_MSR_TXM_Mask
#define CAN_MSR_SLAKI_Pos                     ((uint32_t)4)                     /* Sleep acknowledge interrupt */
#define CAN_MSR_SLAKI_Mask                    (((uint32_t)0x01) << 4)
#define CAN_MSR_SLAKI                         CAN_MSR_SLAKI_Mask
#define CAN_MSR_WKUI_Pos                      ((uint32_t)3)                     /* Wakeup interrupt */
#define CAN_MSR_WKUI_Mask                     (((uint32_t)0x01) << 3)
#define CAN_MSR_WKUI                          CAN_MSR_WKUI_Mask
#define CAN_MSR_ERRI_Pos                      ((uint32_t)2)                     /* Error interrupt */
#define CAN_MSR_ERRI_Mask                     (((uint32_t)0x01) << 2)
#define CAN_MSR_ERRI                          CAN_MSR_ERRI_Mask
#define CAN_MSR_SLAK_Pos                      ((uint32_t)1)                     /* Sleep acknowledge */
#define CAN_MSR_SLAK_Mask                     (((uint32_t)0x01) << 1)
#define CAN_MSR_SLAK                          CAN_MSR_SLAK_Mask
#define CAN_MSR_INAK_Pos                      ((uint32_t)0)                     /* Initialization acknowledge */
#define CAN_MSR_INAK_Mask                     (((uint32_t)0x01) << 0)
#define CAN_MSR_INAK                          CAN_MSR_INAK_Mask

/************************************** CAN->TSR  ***************************************/
#define CAN_TSR_LOW2_Pos                      ((uint32_t)31)                    /* Lowest priority flag for mailbox 2 */
#define CAN_TSR_LOW2_Mask                     (((uint32_t)0x01) << 31)
#define CAN_TSR_LOW2                          CAN_TSR_LOW2_Mask
#define CAN_TSR_LOW1_Pos                      ((uint32_t)30)                    /* Lowest priority flag for mailbox 1 */
#define CAN_TSR_LOW1_Mask                     (((uint32_t)0x01) << 30)
#define CAN_TSR_LOW1                          CAN_TSR_LOW1_Mask
#define CAN_TSR_LOW0_Pos                      ((uint32_t)29)                    /* Lowest priority flag for mailbox 0 */
#define CAN_TSR_LOW0_Mask                     (((uint32_t)0x01) << 29)
#define CAN_TSR_LOW0                          CAN_TSR_LOW0_Mask
#define CAN_TSR_TME2_Pos                      ((uint32_t)28)                    /* Transmit mailbox 2 empty */
#define CAN_TSR_TME2_Mask                     (((uint32_t)0x01) << 28)
#define CAN_TSR_TME2                          CAN_TSR_TME2_Mask
#define CAN_TSR_TME1_Pos                      ((uint32_t)27)                    /* Transmit mailbox 1 empty */
#define CAN_TSR_TME1_Mask                     (((uint32_t)0x01) << 27)
#define CAN_TSR_TME1                          CAN_TSR_TME1_Mask
#define CAN_TSR_TME0_Pos                      ((uint32_t)26)                    /* Transmit mailbox 0 empty */
#define CAN_TSR_TME0_Mask                     (((uint32_t)0x01) << 26)
#define CAN_TSR_TME0                          CAN_TSR_TME0_Mask
#define CAN_TSR_CODE_Pos                      ((uint32_t)24)                    /* Mailbox code */
#define CAN_TSR_CODE_Mask                     (((uint32_t)0x03) << 24)
#define CAN_TSR_CODE                          CAN_TSR_CODE_Mask
#define CAN_TSR_CODE_0                        (((uint32_t)0x1 << CAN_TSR_CODE_Pos))
#define CAN_TSR_CODE_1                        (((uint32_t)0x2 << CAN_TSR_CODE_Pos))
#define CAN_TSR_ABRQ2_Pos                     ((uint32_t)23)                    /* Abort request for mailbox 2 */
#define CAN_TSR_ABRQ2_Mask                    (((uint32_t)0x01) << 23)
#define CAN_TSR_ABRQ2                         CAN_TSR_ABRQ2_Mask
#define CAN_TSR_TERR2_Pos                     ((uint32_t)19)                    /* Transmission error of mailbox 2 */
#define CAN_TSR_TERR2_Mask                    (((uint32_t)0x01) << 19)
#define CAN_TSR_TERR2                         CAN_TSR_TERR2_Mask
#define CAN_TSR_ALST2_Pos                     ((uint32_t)18)                    /* Arbitration lost for mailbox 2 */
#define CAN_TSR_ALST2_Mask                    (((uint32_t)0x01) << 18)
#define CAN_TSR_ALST2                         CAN_TSR_ALST2_Mask
#define CAN_TSR_TXOK2_Pos                     ((uint32_t)17)                    /* Transmission OK of mailbox 2 */
#define CAN_TSR_TXOK2_Mask                    (((uint32_t)0x01) << 17)
#define CAN_TSR_TXOK2                         CAN_TSR_TXOK2_Mask
#define CAN_TSR_RQCP2_Pos                     ((uint32_t)16)                    /* Request completed mailbox2 */
#define CAN_TSR_RQCP2_Mask                    (((uint32_t)0x01) << 16)
#define CAN_TSR_RQCP2                         CAN_TSR_RQCP2_Mask
#define CAN_TSR_ABRQ1_Pos                     ((uint32_t)15)                    /* Abort request for mailbox 1 */
#define CAN_TSR_ABRQ1_Mask                    (((uint32_t)0x01) << 15)
#define CAN_TSR_ABRQ1                         CAN_TSR_ABRQ1_Mask
#define CAN_TSR_TERR1_Pos                     ((uint32_t)11)                    /* Transmission error of mailbox1 */
#define CAN_TSR_TERR1_Mask                    (((uint32_t)0x01) << 11)
#define CAN_TSR_TERR1                         CAN_TSR_TERR1_Mask
#define CAN_TSR_ALST1_Pos                     ((uint32_t)10)                    /* Arbitration lost for mailbox1 */
#define CAN_TSR_ALST1_Mask                    (((uint32_t)0x01) << 10)
#define CAN_TSR_ALST1                         CAN_TSR_ALST1_Mask
#define CAN_TSR_TXOK1_Pos                     ((uint32_t)9)                     /* Transmission OK of mailbox1 */
#define CAN_TSR_TXOK1_Mask                    (((uint32_t)0x01) << 9)
#define CAN_TSR_TXOK1                         CAN_TSR_TXOK1_Mask
#define CAN_TSR_RQCP1_Pos                     ((uint32_t)8)                     /* Request completed mailbox1 */
#define CAN_TSR_RQCP1_Mask                    (((uint32_t)0x01) << 8)
#define CAN_TSR_RQCP1                         CAN_TSR_RQCP1_Mask
#define CAN_TSR_ABRQ0_Pos                     ((uint32_t)7)                     /* Abort request for mailbox0 */
#define CAN_TSR_ABRQ0_Mask                    (((uint32_t)0x01) << 7)
#define CAN_TSR_ABRQ0                         CAN_TSR_ABRQ0_Mask
#define CAN_TSR_TERR0_Pos                     ((uint32_t)3)                     /* Transmission error of mailbox0 */
#define CAN_TSR_TERR0_Mask                    (((uint32_t)0x01) << 3)
#define CAN_TSR_TERR0                         CAN_TSR_TERR0_Mask
#define CAN_TSR_ALST0_Pos                     ((uint32_t)2)                     /* Arbitration lost for mailbox0 */
#define CAN_TSR_ALST0_Mask                    (((uint32_t)0x01) << 2)
#define CAN_TSR_ALST0                         CAN_TSR_ALST0_Mask
#define CAN_TSR_TXOK0_Pos                     ((uint32_t)1)                     /* Transmission OK of mailbox0 */
#define CAN_TSR_TXOK0_Mask                    (((uint32_t)0x01) << 1)
#define CAN_TSR_TXOK0                         CAN_TSR_TXOK0_Mask
#define CAN_TSR_RQCP0_Pos                     ((uint32_t)0)                     /* Request completed mailbox0 */
#define CAN_TSR_RQCP0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_TSR_RQCP0                         CAN_TSR_RQCP0_Mask

/************************************* CAN->RF0R  ***************************************/
#define CAN_RF0R_RFOM0_Pos                    ((uint32_t)5)                     /* Release FIFO 0 output mailbox */
#define CAN_RF0R_RFOM0_Mask                   (((uint32_t)0x01) << 5)
#define CAN_RF0R_RFOM0                        CAN_RF0R_RFOM0_Mask
#define CAN_RF0R_FOVR0_Pos                    ((uint32_t)4)                     /* FIFO 0 overrun */
#define CAN_RF0R_FOVR0_Mask                   (((uint32_t)0x01) << 4)
#define CAN_RF0R_FOVR0                        CAN_RF0R_FOVR0_Mask
#define CAN_RF0R_FULL0_Pos                    ((uint32_t)3)                     /* FIFO 0 full */
#define CAN_RF0R_FULL0_Mask                   (((uint32_t)0x01) << 3)
#define CAN_RF0R_FULL0                        CAN_RF0R_FULL0_Mask
#define CAN_RF0R_FMP0_Pos                     ((uint32_t)0)                     /* FIFO 0 message pending */
#define CAN_RF0R_FMP0_Mask                    (((uint32_t)0x03) << 0)
#define CAN_RF0R_FMP0                         CAN_RF0R_FMP0_Mask
#define CAN_RF0R_FMP0_0                       (((uint32_t)0x1))
#define CAN_RF0R_FMP0_1                       (((uint32_t)0x2))

/************************************* CAN->RF1R  ***************************************/
#define CAN_RF1R_RFOM1_Pos                    ((uint32_t)5)                     /* Release FIFO 1 output mailbox */
#define CAN_RF1R_RFOM1_Mask                   (((uint32_t)0x01) << 5)
#define CAN_RF1R_RFOM1                        CAN_RF1R_RFOM1_Mask
#define CAN_RF1R_FOVR1_Pos                    ((uint32_t)4)                     /* FIFO 1 overrun */
#define CAN_RF1R_FOVR1_Mask                   (((uint32_t)0x01) << 4)
#define CAN_RF1R_FOVR1                        CAN_RF1R_FOVR1_Mask
#define CAN_RF1R_FULL1_Pos                    ((uint32_t)3)                     /* FIFO 1 full */
#define CAN_RF1R_FULL1_Mask                   (((uint32_t)0x01) << 3)
#define CAN_RF1R_FULL1                        CAN_RF1R_FULL1_Mask
#define CAN_RF1R_FMP1_Pos                     ((uint32_t)0)                     /* FIFO 1 message pending */
#define CAN_RF1R_FMP1_Mask                    (((uint32_t)0x03) << 0)
#define CAN_RF1R_FMP1                         CAN_RF1R_FMP1_Mask
#define CAN_RF1R_FMP1_0                       (((uint32_t)0x1))
#define CAN_RF1R_FMP1_1                       (((uint32_t)0x2))

/************************************** CAN->IER  ***************************************/
#define CAN_IER_SLKIE_Pos                     ((uint32_t)17)                    /* Sleep interrupt enable */
#define CAN_IER_SLKIE_Mask                    (((uint32_t)0x01) << 17)
#define CAN_IER_SLKIE                         CAN_IER_SLKIE_Mask
#define CAN_IER_WKUIE_Pos                     ((uint32_t)16)                    /* Wakeup interrupt enable */
#define CAN_IER_WKUIE_Mask                    (((uint32_t)0x01) << 16)
#define CAN_IER_WKUIE                         CAN_IER_WKUIE_Mask
#define CAN_IER_ERRIE_Pos                     ((uint32_t)15)                    /* Error interrupt enable */
#define CAN_IER_ERRIE_Mask                    (((uint32_t)0x01) << 15)
#define CAN_IER_ERRIE                         CAN_IER_ERRIE_Mask
#define CAN_IER_LECIE_Pos                     ((uint32_t)11)                    /* Last error code interrupt enable */
#define CAN_IER_LECIE_Mask                    (((uint32_t)0x01) << 11)
#define CAN_IER_LECIE                         CAN_IER_LECIE_Mask
#define CAN_IER_BOFIE_Pos                     ((uint32_t)10)                    /* Bus-off interrupt enable */
#define CAN_IER_BOFIE_Mask                    (((uint32_t)0x01) << 10)
#define CAN_IER_BOFIE                         CAN_IER_BOFIE_Mask
#define CAN_IER_EPVIE_Pos                     ((uint32_t)9)                     /* Error passive interrupt enable */
#define CAN_IER_EPVIE_Mask                    (((uint32_t)0x01) << 9)
#define CAN_IER_EPVIE                         CAN_IER_EPVIE_Mask
#define CAN_IER_EWGIE_Pos                     ((uint32_t)8)                     /* Error warning interrupt enable */
#define CAN_IER_EWGIE_Mask                    (((uint32_t)0x01) << 8)
#define CAN_IER_EWGIE                         CAN_IER_EWGIE_Mask
#define CAN_IER_FOVIE1_Pos                    ((uint32_t)6)                     /* FIFO overrun interrupt enable */
#define CAN_IER_FOVIE1_Mask                   (((uint32_t)0x01) << 6)
#define CAN_IER_FOVIE1                        CAN_IER_FOVIE1_Mask
#define CAN_IER_FFIE1_Pos                     ((uint32_t)5)                     /* FIFO full interrupt enable */
#define CAN_IER_FFIE1_Mask                    (((uint32_t)0x01) << 5)
#define CAN_IER_FFIE1                         CAN_IER_FFIE1_Mask
#define CAN_IER_FMPIE1_Pos                    ((uint32_t)4)                     /* FIFO message pending interrupt enable */
#define CAN_IER_FMPIE1_Mask                   (((uint32_t)0x01) << 4)
#define CAN_IER_FMPIE1                        CAN_IER_FMPIE1_Mask
#define CAN_IER_FOVIE0_Pos                    ((uint32_t)3)                     /* FIFO overrun interrupt enable */
#define CAN_IER_FOVIE0_Mask                   (((uint32_t)0x01) << 3)
#define CAN_IER_FOVIE0                        CAN_IER_FOVIE0_Mask
#define CAN_IER_FFIE0_Pos                     ((uint32_t)2)                     /* FIFO full interrupt enable */
#define CAN_IER_FFIE0_Mask                    (((uint32_t)0x01) << 2)
#define CAN_IER_FFIE0                         CAN_IER_FFIE0_Mask
#define CAN_IER_FMPIE0_Pos                    ((uint32_t)1)                     /* FIFO message pending interrupt enable */
#define CAN_IER_FMPIE0_Mask                   (((uint32_t)0x01) << 1)
#define CAN_IER_FMPIE0                        CAN_IER_FMPIE0_Mask
#define CAN_IER_TMEIE_Pos                     ((uint32_t)0)                     /* Transmit mailbox empty interrupt enable */
#define CAN_IER_TMEIE_Mask                    (((uint32_t)0x01) << 0)
#define CAN_IER_TMEIE                         CAN_IER_TMEIE_Mask

/************************************** CAN->ESR  ***************************************/
#define CAN_ESR_REC_Pos                       ((uint32_t)24)                    /* Receive error counter */
#define CAN_ESR_REC_Mask                      (((uint32_t)0xFF) << 24)
#define CAN_ESR_REC                           CAN_ESR_REC_Mask
#define CAN_ESR_REC_0                         (((uint32_t)0x1 << CAN_ESR_REC_Pos))
#define CAN_ESR_REC_1                         (((uint32_t)0x2 << CAN_ESR_REC_Pos))
#define CAN_ESR_REC_2                         (((uint32_t)0x4 << CAN_ESR_REC_Pos))
#define CAN_ESR_REC_3                         (((uint32_t)0x8 << CAN_ESR_REC_Pos))
#define CAN_ESR_REC_4                         (((uint32_t)0x10 << CAN_ESR_REC_Pos))
#define CAN_ESR_REC_5                         (((uint32_t)0x20 << CAN_ESR_REC_Pos))
#define CAN_ESR_REC_6                         (((uint32_t)0x40 << CAN_ESR_REC_Pos))
#define CAN_ESR_REC_7                         (((uint32_t)0x80 << CAN_ESR_REC_Pos))
#define CAN_ESR_TEC_Pos                       ((uint32_t)16)                    /* Least significant byte of the 9-bit transmit error counter */
#define CAN_ESR_TEC_Mask                      (((uint32_t)0xFF) << 16)
#define CAN_ESR_TEC                           CAN_ESR_TEC_Mask
#define CAN_ESR_TEC_0                         (((uint32_t)0x1 << CAN_ESR_TEC_Pos))
#define CAN_ESR_TEC_1                         (((uint32_t)0x2 << CAN_ESR_TEC_Pos))
#define CAN_ESR_TEC_2                         (((uint32_t)0x4 << CAN_ESR_TEC_Pos))
#define CAN_ESR_TEC_3                         (((uint32_t)0x8 << CAN_ESR_TEC_Pos))
#define CAN_ESR_TEC_4                         (((uint32_t)0x10 << CAN_ESR_TEC_Pos))
#define CAN_ESR_TEC_5                         (((uint32_t)0x20 << CAN_ESR_TEC_Pos))
#define CAN_ESR_TEC_6                         (((uint32_t)0x40 << CAN_ESR_TEC_Pos))
#define CAN_ESR_TEC_7                         (((uint32_t)0x80 << CAN_ESR_TEC_Pos))
#define CAN_ESR_LEC_Pos                       ((uint32_t)4)                     /* Last error code */
#define CAN_ESR_LEC_Mask                      (((uint32_t)0x07) << 4)
#define CAN_ESR_LEC                           CAN_ESR_LEC_Mask
#define CAN_ESR_LEC_0                         (((uint32_t)0x1 << CAN_ESR_LEC_Pos))
#define CAN_ESR_LEC_1                         (((uint32_t)0x2 << CAN_ESR_LEC_Pos))
#define CAN_ESR_LEC_2                         (((uint32_t)0x4 << CAN_ESR_LEC_Pos))
#define CAN_ESR_BOFF_Pos                      ((uint32_t)2)                     /* Bus-off flag */
#define CAN_ESR_BOFF_Mask                     (((uint32_t)0x01) << 2)
#define CAN_ESR_BOFF                          CAN_ESR_BOFF_Mask
#define CAN_ESR_EPVF_Pos                      ((uint32_t)1)                     /* Error passive flag */
#define CAN_ESR_EPVF_Mask                     (((uint32_t)0x01) << 1)
#define CAN_ESR_EPVF                          CAN_ESR_EPVF_Mask
#define CAN_ESR_EWGF_Pos                      ((uint32_t)0)                     /* Error warning flag */
#define CAN_ESR_EWGF_Mask                     (((uint32_t)0x01) << 0)
#define CAN_ESR_EWGF                          CAN_ESR_EWGF_Mask

/************************************** CAN->BTR  ***************************************/
#define CAN_BTR_SILM_Pos                      ((uint32_t)31)                    /* Silent mode for debug */
#define CAN_BTR_SILM_Mask                     (((uint32_t)0x01) << 31)
#define CAN_BTR_SILM                          CAN_BTR_SILM_Mask
#define CAN_BTR_LBKM_Pos                      ((uint32_t)30)                    /* Loop back mode for debug */
#define CAN_BTR_LBKM_Mask                     (((uint32_t)0x01) << 30)
#define CAN_BTR_LBKM                          CAN_BTR_LBKM_Mask
#define CAN_BTR_SJW_Pos                       ((uint32_t)24)                    /* Resynchronization jump width */
#define CAN_BTR_SJW_Mask                      (((uint32_t)0x03) << 24)
#define CAN_BTR_SJW                           CAN_BTR_SJW_Mask
#define CAN_BTR_SJW_0                         (((uint32_t)0x1 << CAN_BTR_SJW_Pos))
#define CAN_BTR_SJW_1                         (((uint32_t)0x2 << CAN_BTR_SJW_Pos))
#define CAN_BTR_TS2_Pos                       ((uint32_t)20)                    /* Time segment 2 */
#define CAN_BTR_TS2_Mask                      (((uint32_t)0x07) << 20)
#define CAN_BTR_TS2                           CAN_BTR_TS2_Mask
#define CAN_BTR_TS2_0                         (((uint32_t)0x1 << CAN_BTR_TS2_Pos))
#define CAN_BTR_TS2_1                         (((uint32_t)0x2 << CAN_BTR_TS2_Pos))
#define CAN_BTR_TS2_2                         (((uint32_t)0x4 << CAN_BTR_TS2_Pos))
#define CAN_BTR_TS1_Pos                       ((uint32_t)16)                    /* Time segment 1 */
#define CAN_BTR_TS1_Mask                      (((uint32_t)0x0F) << 16)
#define CAN_BTR_TS1                           CAN_BTR_TS1_Mask
#define CAN_BTR_TS1_0                         (((uint32_t)0x1 << CAN_BTR_TS1_Pos))
#define CAN_BTR_TS1_1                         (((uint32_t)0x2 << CAN_BTR_TS1_Pos))
#define CAN_BTR_TS1_2                         (((uint32_t)0x4 << CAN_BTR_TS1_Pos))
#define CAN_BTR_TS1_3                         (((uint32_t)0x8 << CAN_BTR_TS1_Pos))
#define CAN_BTR_BRP_Pos                       ((uint32_t)0)                     /* Baud rate prescaler */
#define CAN_BTR_BRP_Mask                      (((uint32_t)0x03FF) << 0)
#define CAN_BTR_BRP                           CAN_BTR_BRP_Mask
#define CAN_BTR_BRP_0                         (((uint32_t)0x1))
#define CAN_BTR_BRP_1                         (((uint32_t)0x2))
#define CAN_BTR_BRP_2                         (((uint32_t)0x4))
#define CAN_BTR_BRP_3                         (((uint32_t)0x8))
#define CAN_BTR_BRP_4                         (((uint32_t)0x10))
#define CAN_BTR_BRP_5                         (((uint32_t)0x20))
#define CAN_BTR_BRP_6                         (((uint32_t)0x40))
#define CAN_BTR_BRP_7                         (((uint32_t)0x80))
#define CAN_BTR_BRP_8                         (((uint32_t)0x100))
#define CAN_BTR_BRP_9                         (((uint32_t)0x200))

/************************************* CAN->TI0R  ***************************************/
#define CAN_TI0R_STID_Pos                     ((uint32_t)21)                    /* Standard identifier or extended identifier */
#define CAN_TI0R_STID_Mask                    (((uint32_t)0x07FF) << 21)
#define CAN_TI0R_STID                         CAN_TI0R_STID_Mask
#define CAN_TI0R_STID_0                       (((uint32_t)0x1 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_1                       (((uint32_t)0x2 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_2                       (((uint32_t)0x4 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_3                       (((uint32_t)0x8 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_4                       (((uint32_t)0x10 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_5                       (((uint32_t)0x20 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_6                       (((uint32_t)0x40 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_7                       (((uint32_t)0x80 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_8                       (((uint32_t)0x100 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_9                       (((uint32_t)0x200 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_STID_10                      (((uint32_t)0x400 << CAN_TI0R_STID_Pos))
#define CAN_TI0R_EXID_Pos                     ((uint32_t)3)                     /* Extended identifier */
#define CAN_TI0R_EXID_Mask                    (((uint32_t)0x03FFFF) << 3)
#define CAN_TI0R_EXID                         CAN_TI0R_EXID_Mask
#define CAN_TI0R_IDE_Pos                      ((uint32_t)2)                     /* Identifier extension */
#define CAN_TI0R_IDE_Mask                     (((uint32_t)0x01) << 2)
#define CAN_TI0R_IDE                          CAN_TI0R_IDE_Mask
#define CAN_TI0R_RTR_Pos                      ((uint32_t)1)                     /* Remote transmission request */
#define CAN_TI0R_RTR_Mask                     (((uint32_t)0x01) << 1)
#define CAN_TI0R_RTR                          CAN_TI0R_RTR_Mask
#define CAN_TI0R_TXRQ_Pos                     ((uint32_t)0)                     /* Transmit mailbox request */
#define CAN_TI0R_TXRQ_Mask                    (((uint32_t)0x01) << 0)
#define CAN_TI0R_TXRQ                         CAN_TI0R_TXRQ_Mask

/************************************* CAN->TI1R  ***************************************/
#define CAN_TI1R_STID_Pos                     ((uint32_t)21)                    /* Standard identifier or extended identifier */
#define CAN_TI1R_STID_Mask                    (((uint32_t)0x07FF) << 21)
#define CAN_TI1R_STID                         CAN_TI1R_STID_Mask
#define CAN_TI1R_STID_0                       (((uint32_t)0x1 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_1                       (((uint32_t)0x2 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_2                       (((uint32_t)0x4 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_3                       (((uint32_t)0x8 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_4                       (((uint32_t)0x10 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_5                       (((uint32_t)0x20 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_6                       (((uint32_t)0x40 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_7                       (((uint32_t)0x80 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_8                       (((uint32_t)0x100 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_9                       (((uint32_t)0x200 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_STID_10                      (((uint32_t)0x400 << CAN_TI1R_STID_Pos))
#define CAN_TI1R_EXID_Pos                     ((uint32_t)3)                     /* Extended identifier */
#define CAN_TI1R_EXID_Mask                    (((uint32_t)0x03FFFF) << 3)
#define CAN_TI1R_EXID                         CAN_TI1R_EXID_Mask
#define CAN_TI1R_IDE_Pos                      ((uint32_t)2)                     /* Identifier extension */
#define CAN_TI1R_IDE_Mask                     (((uint32_t)0x01) << 2)
#define CAN_TI1R_IDE                          CAN_TI1R_IDE_Mask
#define CAN_TI1R_RTR_Pos                      ((uint32_t)1)                     /* Remote transmission request */
#define CAN_TI1R_RTR_Mask                     (((uint32_t)0x01) << 1)
#define CAN_TI1R_RTR                          CAN_TI1R_RTR_Mask
#define CAN_TI1R_TXRQ_Pos                     ((uint32_t)0)                     /* Transmit mailbox request */
#define CAN_TI1R_TXRQ_Mask                    (((uint32_t)0x01) << 0)
#define CAN_TI1R_TXRQ                         CAN_TI1R_TXRQ_Mask

/************************************* CAN->TI2R  ***************************************/
#define CAN_TI2R_STID_Pos                     ((uint32_t)21)                    /* Standard identifier or extended identifier */
#define CAN_TI2R_STID_Mask                    (((uint32_t)0x07FF) << 21)
#define CAN_TI2R_STID                         CAN_TI2R_STID_Mask
#define CAN_TI2R_STID_0                       (((uint32_t)0x1 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_1                       (((uint32_t)0x2 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_2                       (((uint32_t)0x4 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_3                       (((uint32_t)0x8 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_4                       (((uint32_t)0x10 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_5                       (((uint32_t)0x20 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_6                       (((uint32_t)0x40 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_7                       (((uint32_t)0x80 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_8                       (((uint32_t)0x100 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_9                       (((uint32_t)0x200 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_STID_10                      (((uint32_t)0x400 << CAN_TI2R_STID_Pos))
#define CAN_TI2R_EXID_Pos                     ((uint32_t)3)                     /* Extended identifier */
#define CAN_TI2R_EXID_Mask                    (((uint32_t)0x03FFFF) << 3)
#define CAN_TI2R_EXID                         CAN_TI2R_EXID_Mask
#define CAN_TI2R_IDE_Pos                      ((uint32_t)2)                     /* Identifier extension */
#define CAN_TI2R_IDE_Mask                     (((uint32_t)0x01) << 2)
#define CAN_TI2R_IDE                          CAN_TI2R_IDE_Mask
#define CAN_TI2R_RTR_Pos                      ((uint32_t)1)                     /* Remote transmission request */
#define CAN_TI2R_RTR_Mask                     (((uint32_t)0x01) << 1)
#define CAN_TI2R_RTR                          CAN_TI2R_RTR_Mask
#define CAN_TI2R_TXRQ_Pos                     ((uint32_t)0)                     /* Transmit mailbox request */
#define CAN_TI2R_TXRQ_Mask                    (((uint32_t)0x01) << 0)
#define CAN_TI2R_TXRQ                         CAN_TI2R_TXRQ_Mask

/************************************* CAN->TDT0R  **************************************/
#define CAN_TDT0R_TIME_Pos                    ((uint32_t)16)                    /* Message time stamp */
#define CAN_TDT0R_TIME_Mask                   (((uint32_t)0xFFFF) << 16)
#define CAN_TDT0R_TIME                        CAN_TDT0R_TIME_Mask
#define CAN_TDT0R_TGT_Pos                     ((uint32_t)8)                     /* Transmit global time */
#define CAN_TDT0R_TGT_Mask                    (((uint32_t)0x01) << 8)
#define CAN_TDT0R_TGT                         CAN_TDT0R_TGT_Mask
#define CAN_TDT0R_DLC_Pos                     ((uint32_t)0)                     /* Data length code */
#define CAN_TDT0R_DLC_Mask                    (((uint32_t)0x0F) << 0)
#define CAN_TDT0R_DLC                         CAN_TDT0R_DLC_Mask
#define CAN_TDT0R_DLC_0                       (((uint32_t)0x1))
#define CAN_TDT0R_DLC_1                       (((uint32_t)0x2))
#define CAN_TDT0R_DLC_2                       (((uint32_t)0x4))
#define CAN_TDT0R_DLC_3                       (((uint32_t)0x8))

/************************************* CAN->TDT1R  **************************************/
#define CAN_TDT1R_TIME_Pos                    ((uint32_t)16)                    /* Message time stamp */
#define CAN_TDT1R_TIME_Mask                   (((uint32_t)0xFFFF) << 16)
#define CAN_TDT1R_TIME                        CAN_TDT1R_TIME_Mask
#define CAN_TDT1R_TGT_Pos                     ((uint32_t)8)                     /* Transmit global time */
#define CAN_TDT1R_TGT_Mask                    (((uint32_t)0x01) << 8)
#define CAN_TDT1R_TGT                         CAN_TDT1R_TGT_Mask
#define CAN_TDT1R_DLC_Pos                     ((uint32_t)0)                     /* Data length code */
#define CAN_TDT1R_DLC_Mask                    (((uint32_t)0x0F) << 0)
#define CAN_TDT1R_DLC                         CAN_TDT1R_DLC_Mask
#define CAN_TDT1R_DLC_0                       (((uint32_t)0x1))
#define CAN_TDT1R_DLC_1                       (((uint32_t)0x2))
#define CAN_TDT1R_DLC_2                       (((uint32_t)0x4))
#define CAN_TDT1R_DLC_3                       (((uint32_t)0x8))

/************************************* CAN->TDT2R  **************************************/
#define CAN_TDT2R_TIME_Pos                    ((uint32_t)16)                    /* Message time stamp */
#define CAN_TDT2R_TIME_Mask                   (((uint32_t)0xFFFF) << 16)
#define CAN_TDT2R_TIME                        CAN_TDT2R_TIME_Mask
#define CAN_TDT2R_TGT_Pos                     ((uint32_t)8)                     /* Transmit global time */
#define CAN_TDT2R_TGT_Mask                    (((uint32_t)0x01) << 8)
#define CAN_TDT2R_TGT                         CAN_TDT2R_TGT_Mask
#define CAN_TDT2R_DLC_Pos                     ((uint32_t)0)                     /* Data length code */
#define CAN_TDT2R_DLC_Mask                    (((uint32_t)0x0F) << 0)
#define CAN_TDT2R_DLC                         CAN_TDT2R_DLC_Mask
#define CAN_TDT2R_DLC_0                       (((uint32_t)0x1))
#define CAN_TDT2R_DLC_1                       (((uint32_t)0x2))
#define CAN_TDT2R_DLC_2                       (((uint32_t)0x4))
#define CAN_TDT2R_DLC_3                       (((uint32_t)0x8))

/************************************* CAN->TDL0R  **************************************/
#define CAN_TDL0R_DATA3_Pos                   ((uint32_t)24)                    /* Data byte 3 */
#define CAN_TDL0R_DATA3_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_TDL0R_DATA3                       CAN_TDL0R_DATA3_Mask
#define CAN_TDL0R_DATA3_0                     (((uint32_t)0x1 << CAN_TDL0R_DATA3_Pos))
#define CAN_TDL0R_DATA3_1                     (((uint32_t)0x2 << CAN_TDL0R_DATA3_Pos))
#define CAN_TDL0R_DATA3_2                     (((uint32_t)0x4 << CAN_TDL0R_DATA3_Pos))
#define CAN_TDL0R_DATA3_3                     (((uint32_t)0x8 << CAN_TDL0R_DATA3_Pos))
#define CAN_TDL0R_DATA3_4                     (((uint32_t)0x10 << CAN_TDL0R_DATA3_Pos))
#define CAN_TDL0R_DATA3_5                     (((uint32_t)0x20 << CAN_TDL0R_DATA3_Pos))
#define CAN_TDL0R_DATA3_6                     (((uint32_t)0x40 << CAN_TDL0R_DATA3_Pos))
#define CAN_TDL0R_DATA3_7                     (((uint32_t)0x80 << CAN_TDL0R_DATA3_Pos))
#define CAN_TDL0R_DATA2_Pos                   ((uint32_t)16)                    /* Data byte 2 */
#define CAN_TDL0R_DATA2_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_TDL0R_DATA2                       CAN_TDL0R_DATA2_Mask
#define CAN_TDL0R_DATA2_0                     (((uint32_t)0x1 << CAN_TDL0R_DATA2_Pos))
#define CAN_TDL0R_DATA2_1                     (((uint32_t)0x2 << CAN_TDL0R_DATA2_Pos))
#define CAN_TDL0R_DATA2_2                     (((uint32_t)0x4 << CAN_TDL0R_DATA2_Pos))
#define CAN_TDL0R_DATA2_3                     (((uint32_t)0x8 << CAN_TDL0R_DATA2_Pos))
#define CAN_TDL0R_DATA2_4                     (((uint32_t)0x10 << CAN_TDL0R_DATA2_Pos))
#define CAN_TDL0R_DATA2_5                     (((uint32_t)0x20 << CAN_TDL0R_DATA2_Pos))
#define CAN_TDL0R_DATA2_6                     (((uint32_t)0x40 << CAN_TDL0R_DATA2_Pos))
#define CAN_TDL0R_DATA2_7                     (((uint32_t)0x80 << CAN_TDL0R_DATA2_Pos))
#define CAN_TDL0R_DATA1_Pos                   ((uint32_t)8)                     /* Data byte 1 */
#define CAN_TDL0R_DATA1_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_TDL0R_DATA1                       CAN_TDL0R_DATA1_Mask
#define CAN_TDL0R_DATA1_0                     (((uint32_t)0x1 << CAN_TDL0R_DATA1_Pos))
#define CAN_TDL0R_DATA1_1                     (((uint32_t)0x2 << CAN_TDL0R_DATA1_Pos))
#define CAN_TDL0R_DATA1_2                     (((uint32_t)0x4 << CAN_TDL0R_DATA1_Pos))
#define CAN_TDL0R_DATA1_3                     (((uint32_t)0x8 << CAN_TDL0R_DATA1_Pos))
#define CAN_TDL0R_DATA1_4                     (((uint32_t)0x10 << CAN_TDL0R_DATA1_Pos))
#define CAN_TDL0R_DATA1_5                     (((uint32_t)0x20 << CAN_TDL0R_DATA1_Pos))
#define CAN_TDL0R_DATA1_6                     (((uint32_t)0x40 << CAN_TDL0R_DATA1_Pos))
#define CAN_TDL0R_DATA1_7                     (((uint32_t)0x80 << CAN_TDL0R_DATA1_Pos))
#define CAN_TDL0R_DATA0_Pos                   ((uint32_t)0)                     /* Data byte 0 */
#define CAN_TDL0R_DATA0_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_TDL0R_DATA0                       CAN_TDL0R_DATA0_Mask
#define CAN_TDL0R_DATA0_0                     (((uint32_t)0x1))
#define CAN_TDL0R_DATA0_1                     (((uint32_t)0x2))
#define CAN_TDL0R_DATA0_2                     (((uint32_t)0x4))
#define CAN_TDL0R_DATA0_3                     (((uint32_t)0x8))
#define CAN_TDL0R_DATA0_4                     (((uint32_t)0x10))
#define CAN_TDL0R_DATA0_5                     (((uint32_t)0x20))
#define CAN_TDL0R_DATA0_6                     (((uint32_t)0x40))
#define CAN_TDL0R_DATA0_7                     (((uint32_t)0x80))

/************************************* CAN->TDL1R  **************************************/
#define CAN_TDL1R_DATA3_Pos                   ((uint32_t)24)                    /* Data byte 3 */
#define CAN_TDL1R_DATA3_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_TDL1R_DATA3                       CAN_TDL1R_DATA3_Mask
#define CAN_TDL1R_DATA3_0                     (((uint32_t)0x1 << CAN_TDL1R_DATA3_Pos))
#define CAN_TDL1R_DATA3_1                     (((uint32_t)0x2 << CAN_TDL1R_DATA3_Pos))
#define CAN_TDL1R_DATA3_2                     (((uint32_t)0x4 << CAN_TDL1R_DATA3_Pos))
#define CAN_TDL1R_DATA3_3                     (((uint32_t)0x8 << CAN_TDL1R_DATA3_Pos))
#define CAN_TDL1R_DATA3_4                     (((uint32_t)0x10 << CAN_TDL1R_DATA3_Pos))
#define CAN_TDL1R_DATA3_5                     (((uint32_t)0x20 << CAN_TDL1R_DATA3_Pos))
#define CAN_TDL1R_DATA3_6                     (((uint32_t)0x40 << CAN_TDL1R_DATA3_Pos))
#define CAN_TDL1R_DATA3_7                     (((uint32_t)0x80 << CAN_TDL1R_DATA3_Pos))
#define CAN_TDL1R_DATA2_Pos                   ((uint32_t)16)                    /* Data byte 2 */
#define CAN_TDL1R_DATA2_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_TDL1R_DATA2                       CAN_TDL1R_DATA2_Mask
#define CAN_TDL1R_DATA2_0                     (((uint32_t)0x1 << CAN_TDL1R_DATA2_Pos))
#define CAN_TDL1R_DATA2_1                     (((uint32_t)0x2 << CAN_TDL1R_DATA2_Pos))
#define CAN_TDL1R_DATA2_2                     (((uint32_t)0x4 << CAN_TDL1R_DATA2_Pos))
#define CAN_TDL1R_DATA2_3                     (((uint32_t)0x8 << CAN_TDL1R_DATA2_Pos))
#define CAN_TDL1R_DATA2_4                     (((uint32_t)0x10 << CAN_TDL1R_DATA2_Pos))
#define CAN_TDL1R_DATA2_5                     (((uint32_t)0x20 << CAN_TDL1R_DATA2_Pos))
#define CAN_TDL1R_DATA2_6                     (((uint32_t)0x40 << CAN_TDL1R_DATA2_Pos))
#define CAN_TDL1R_DATA2_7                     (((uint32_t)0x80 << CAN_TDL1R_DATA2_Pos))
#define CAN_TDL1R_DATA1_Pos                   ((uint32_t)8)                     /* Data byte 1 */
#define CAN_TDL1R_DATA1_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_TDL1R_DATA1                       CAN_TDL1R_DATA1_Mask
#define CAN_TDL1R_DATA1_0                     (((uint32_t)0x1 << CAN_TDL1R_DATA1_Pos))
#define CAN_TDL1R_DATA1_1                     (((uint32_t)0x2 << CAN_TDL1R_DATA1_Pos))
#define CAN_TDL1R_DATA1_2                     (((uint32_t)0x4 << CAN_TDL1R_DATA1_Pos))
#define CAN_TDL1R_DATA1_3                     (((uint32_t)0x8 << CAN_TDL1R_DATA1_Pos))
#define CAN_TDL1R_DATA1_4                     (((uint32_t)0x10 << CAN_TDL1R_DATA1_Pos))
#define CAN_TDL1R_DATA1_5                     (((uint32_t)0x20 << CAN_TDL1R_DATA1_Pos))
#define CAN_TDL1R_DATA1_6                     (((uint32_t)0x40 << CAN_TDL1R_DATA1_Pos))
#define CAN_TDL1R_DATA1_7                     (((uint32_t)0x80 << CAN_TDL1R_DATA1_Pos))
#define CAN_TDL1R_DATA0_Pos                   ((uint32_t)0)                     /* Data byte 0 */
#define CAN_TDL1R_DATA0_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_TDL1R_DATA0                       CAN_TDL1R_DATA0_Mask
#define CAN_TDL1R_DATA0_0                     (((uint32_t)0x1))
#define CAN_TDL1R_DATA0_1                     (((uint32_t)0x2))
#define CAN_TDL1R_DATA0_2                     (((uint32_t)0x4))
#define CAN_TDL1R_DATA0_3                     (((uint32_t)0x8))
#define CAN_TDL1R_DATA0_4                     (((uint32_t)0x10))
#define CAN_TDL1R_DATA0_5                     (((uint32_t)0x20))
#define CAN_TDL1R_DATA0_6                     (((uint32_t)0x40))
#define CAN_TDL1R_DATA0_7                     (((uint32_t)0x80))

/************************************* CAN->TDL2R  **************************************/
#define CAN_TDL2R_DATA3_Pos                   ((uint32_t)24)                    /* Data byte 3 */
#define CAN_TDL2R_DATA3_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_TDL2R_DATA3                       CAN_TDL2R_DATA3_Mask
#define CAN_TDL2R_DATA3_0                     (((uint32_t)0x1 << CAN_TDL2R_DATA3_Pos))
#define CAN_TDL2R_DATA3_1                     (((uint32_t)0x2 << CAN_TDL2R_DATA3_Pos))
#define CAN_TDL2R_DATA3_2                     (((uint32_t)0x4 << CAN_TDL2R_DATA3_Pos))
#define CAN_TDL2R_DATA3_3                     (((uint32_t)0x8 << CAN_TDL2R_DATA3_Pos))
#define CAN_TDL2R_DATA3_4                     (((uint32_t)0x10 << CAN_TDL2R_DATA3_Pos))
#define CAN_TDL2R_DATA3_5                     (((uint32_t)0x20 << CAN_TDL2R_DATA3_Pos))
#define CAN_TDL2R_DATA3_6                     (((uint32_t)0x40 << CAN_TDL2R_DATA3_Pos))
#define CAN_TDL2R_DATA3_7                     (((uint32_t)0x80 << CAN_TDL2R_DATA3_Pos))
#define CAN_TDL2R_DATA2_Pos                   ((uint32_t)16)                    /* Data byte 2 */
#define CAN_TDL2R_DATA2_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_TDL2R_DATA2                       CAN_TDL2R_DATA2_Mask
#define CAN_TDL2R_DATA2_0                     (((uint32_t)0x1 << CAN_TDL2R_DATA2_Pos))
#define CAN_TDL2R_DATA2_1                     (((uint32_t)0x2 << CAN_TDL2R_DATA2_Pos))
#define CAN_TDL2R_DATA2_2                     (((uint32_t)0x4 << CAN_TDL2R_DATA2_Pos))
#define CAN_TDL2R_DATA2_3                     (((uint32_t)0x8 << CAN_TDL2R_DATA2_Pos))
#define CAN_TDL2R_DATA2_4                     (((uint32_t)0x10 << CAN_TDL2R_DATA2_Pos))
#define CAN_TDL2R_DATA2_5                     (((uint32_t)0x20 << CAN_TDL2R_DATA2_Pos))
#define CAN_TDL2R_DATA2_6                     (((uint32_t)0x40 << CAN_TDL2R_DATA2_Pos))
#define CAN_TDL2R_DATA2_7                     (((uint32_t)0x80 << CAN_TDL2R_DATA2_Pos))
#define CAN_TDL2R_DATA1_Pos                   ((uint32_t)8)                     /* Data byte 1 */
#define CAN_TDL2R_DATA1_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_TDL2R_DATA1                       CAN_TDL2R_DATA1_Mask
#define CAN_TDL2R_DATA1_0                     (((uint32_t)0x1 << CAN_TDL2R_DATA1_Pos))
#define CAN_TDL2R_DATA1_1                     (((uint32_t)0x2 << CAN_TDL2R_DATA1_Pos))
#define CAN_TDL2R_DATA1_2                     (((uint32_t)0x4 << CAN_TDL2R_DATA1_Pos))
#define CAN_TDL2R_DATA1_3                     (((uint32_t)0x8 << CAN_TDL2R_DATA1_Pos))
#define CAN_TDL2R_DATA1_4                     (((uint32_t)0x10 << CAN_TDL2R_DATA1_Pos))
#define CAN_TDL2R_DATA1_5                     (((uint32_t)0x20 << CAN_TDL2R_DATA1_Pos))
#define CAN_TDL2R_DATA1_6                     (((uint32_t)0x40 << CAN_TDL2R_DATA1_Pos))
#define CAN_TDL2R_DATA1_7                     (((uint32_t)0x80 << CAN_TDL2R_DATA1_Pos))
#define CAN_TDL2R_DATA0_Pos                   ((uint32_t)0)                     /* Data byte 0 */
#define CAN_TDL2R_DATA0_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_TDL2R_DATA0                       CAN_TDL2R_DATA0_Mask
#define CAN_TDL2R_DATA0_0                     (((uint32_t)0x1))
#define CAN_TDL2R_DATA0_1                     (((uint32_t)0x2))
#define CAN_TDL2R_DATA0_2                     (((uint32_t)0x4))
#define CAN_TDL2R_DATA0_3                     (((uint32_t)0x8))
#define CAN_TDL2R_DATA0_4                     (((uint32_t)0x10))
#define CAN_TDL2R_DATA0_5                     (((uint32_t)0x20))
#define CAN_TDL2R_DATA0_6                     (((uint32_t)0x40))
#define CAN_TDL2R_DATA0_7                     (((uint32_t)0x80))

/************************************* CAN->TDH0R  **************************************/
#define CAN_TDH0R_DATA7_Pos                   ((uint32_t)24)                    /* Data byte 7 */
#define CAN_TDH0R_DATA7_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_TDH0R_DATA7                       CAN_TDH0R_DATA7_Mask
#define CAN_TDH0R_DATA7_0                     (((uint32_t)0x1 << CAN_TDH0R_DATA7_Pos))
#define CAN_TDH0R_DATA7_1                     (((uint32_t)0x2 << CAN_TDH0R_DATA7_Pos))
#define CAN_TDH0R_DATA7_2                     (((uint32_t)0x4 << CAN_TDH0R_DATA7_Pos))
#define CAN_TDH0R_DATA7_3                     (((uint32_t)0x8 << CAN_TDH0R_DATA7_Pos))
#define CAN_TDH0R_DATA7_4                     (((uint32_t)0x10 << CAN_TDH0R_DATA7_Pos))
#define CAN_TDH0R_DATA7_5                     (((uint32_t)0x20 << CAN_TDH0R_DATA7_Pos))
#define CAN_TDH0R_DATA7_6                     (((uint32_t)0x40 << CAN_TDH0R_DATA7_Pos))
#define CAN_TDH0R_DATA7_7                     (((uint32_t)0x80 << CAN_TDH0R_DATA7_Pos))
#define CAN_TDH0R_DATA6_Pos                   ((uint32_t)16)                    /* Data byte 6 */
#define CAN_TDH0R_DATA6_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_TDH0R_DATA6                       CAN_TDH0R_DATA6_Mask
#define CAN_TDH0R_DATA6_0                     (((uint32_t)0x1 << CAN_TDH0R_DATA6_Pos))
#define CAN_TDH0R_DATA6_1                     (((uint32_t)0x2 << CAN_TDH0R_DATA6_Pos))
#define CAN_TDH0R_DATA6_2                     (((uint32_t)0x4 << CAN_TDH0R_DATA6_Pos))
#define CAN_TDH0R_DATA6_3                     (((uint32_t)0x8 << CAN_TDH0R_DATA6_Pos))
#define CAN_TDH0R_DATA6_4                     (((uint32_t)0x10 << CAN_TDH0R_DATA6_Pos))
#define CAN_TDH0R_DATA6_5                     (((uint32_t)0x20 << CAN_TDH0R_DATA6_Pos))
#define CAN_TDH0R_DATA6_6                     (((uint32_t)0x40 << CAN_TDH0R_DATA6_Pos))
#define CAN_TDH0R_DATA6_7                     (((uint32_t)0x80 << CAN_TDH0R_DATA6_Pos))
#define CAN_TDH0R_DATA5_Pos                   ((uint32_t)8)                     /* Data byte 5 */
#define CAN_TDH0R_DATA5_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_TDH0R_DATA5                       CAN_TDH0R_DATA5_Mask
#define CAN_TDH0R_DATA5_0                     (((uint32_t)0x1 << CAN_TDH0R_DATA5_Pos))
#define CAN_TDH0R_DATA5_1                     (((uint32_t)0x2 << CAN_TDH0R_DATA5_Pos))
#define CAN_TDH0R_DATA5_2                     (((uint32_t)0x4 << CAN_TDH0R_DATA5_Pos))
#define CAN_TDH0R_DATA5_3                     (((uint32_t)0x8 << CAN_TDH0R_DATA5_Pos))
#define CAN_TDH0R_DATA5_4                     (((uint32_t)0x10 << CAN_TDH0R_DATA5_Pos))
#define CAN_TDH0R_DATA5_5                     (((uint32_t)0x20 << CAN_TDH0R_DATA5_Pos))
#define CAN_TDH0R_DATA5_6                     (((uint32_t)0x40 << CAN_TDH0R_DATA5_Pos))
#define CAN_TDH0R_DATA5_7                     (((uint32_t)0x80 << CAN_TDH0R_DATA5_Pos))
#define CAN_TDH0R_DATA4_Pos                   ((uint32_t)0)                     /* Data byte 4 */
#define CAN_TDH0R_DATA4_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_TDH0R_DATA4                       CAN_TDH0R_DATA4_Mask
#define CAN_TDH0R_DATA4_0                     (((uint32_t)0x1))
#define CAN_TDH0R_DATA4_1                     (((uint32_t)0x2))
#define CAN_TDH0R_DATA4_2                     (((uint32_t)0x4))
#define CAN_TDH0R_DATA4_3                     (((uint32_t)0x8))
#define CAN_TDH0R_DATA4_4                     (((uint32_t)0x10))
#define CAN_TDH0R_DATA4_5                     (((uint32_t)0x20))
#define CAN_TDH0R_DATA4_6                     (((uint32_t)0x40))
#define CAN_TDH0R_DATA4_7                     (((uint32_t)0x80))

/************************************* CAN->TDH1R  **************************************/
#define CAN_TDH1R_DATA7_Pos                   ((uint32_t)24)                    /* Data byte 7 */
#define CAN_TDH1R_DATA7_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_TDH1R_DATA7                       CAN_TDH1R_DATA7_Mask
#define CAN_TDH1R_DATA7_0                     (((uint32_t)0x1 << CAN_TDH1R_DATA7_Pos))
#define CAN_TDH1R_DATA7_1                     (((uint32_t)0x2 << CAN_TDH1R_DATA7_Pos))
#define CAN_TDH1R_DATA7_2                     (((uint32_t)0x4 << CAN_TDH1R_DATA7_Pos))
#define CAN_TDH1R_DATA7_3                     (((uint32_t)0x8 << CAN_TDH1R_DATA7_Pos))
#define CAN_TDH1R_DATA7_4                     (((uint32_t)0x10 << CAN_TDH1R_DATA7_Pos))
#define CAN_TDH1R_DATA7_5                     (((uint32_t)0x20 << CAN_TDH1R_DATA7_Pos))
#define CAN_TDH1R_DATA7_6                     (((uint32_t)0x40 << CAN_TDH1R_DATA7_Pos))
#define CAN_TDH1R_DATA7_7                     (((uint32_t)0x80 << CAN_TDH1R_DATA7_Pos))
#define CAN_TDH1R_DATA6_Pos                   ((uint32_t)16)                    /* Data byte 6 */
#define CAN_TDH1R_DATA6_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_TDH1R_DATA6                       CAN_TDH1R_DATA6_Mask
#define CAN_TDH1R_DATA6_0                     (((uint32_t)0x1 << CAN_TDH1R_DATA6_Pos))
#define CAN_TDH1R_DATA6_1                     (((uint32_t)0x2 << CAN_TDH1R_DATA6_Pos))
#define CAN_TDH1R_DATA6_2                     (((uint32_t)0x4 << CAN_TDH1R_DATA6_Pos))
#define CAN_TDH1R_DATA6_3                     (((uint32_t)0x8 << CAN_TDH1R_DATA6_Pos))
#define CAN_TDH1R_DATA6_4                     (((uint32_t)0x10 << CAN_TDH1R_DATA6_Pos))
#define CAN_TDH1R_DATA6_5                     (((uint32_t)0x20 << CAN_TDH1R_DATA6_Pos))
#define CAN_TDH1R_DATA6_6                     (((uint32_t)0x40 << CAN_TDH1R_DATA6_Pos))
#define CAN_TDH1R_DATA6_7                     (((uint32_t)0x80 << CAN_TDH1R_DATA6_Pos))
#define CAN_TDH1R_DATA5_Pos                   ((uint32_t)8)                     /* Data byte 5 */
#define CAN_TDH1R_DATA5_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_TDH1R_DATA5                       CAN_TDH1R_DATA5_Mask
#define CAN_TDH1R_DATA5_0                     (((uint32_t)0x1 << CAN_TDH1R_DATA5_Pos))
#define CAN_TDH1R_DATA5_1                     (((uint32_t)0x2 << CAN_TDH1R_DATA5_Pos))
#define CAN_TDH1R_DATA5_2                     (((uint32_t)0x4 << CAN_TDH1R_DATA5_Pos))
#define CAN_TDH1R_DATA5_3                     (((uint32_t)0x8 << CAN_TDH1R_DATA5_Pos))
#define CAN_TDH1R_DATA5_4                     (((uint32_t)0x10 << CAN_TDH1R_DATA5_Pos))
#define CAN_TDH1R_DATA5_5                     (((uint32_t)0x20 << CAN_TDH1R_DATA5_Pos))
#define CAN_TDH1R_DATA5_6                     (((uint32_t)0x40 << CAN_TDH1R_DATA5_Pos))
#define CAN_TDH1R_DATA5_7                     (((uint32_t)0x80 << CAN_TDH1R_DATA5_Pos))
#define CAN_TDH1R_DATA4_Pos                   ((uint32_t)0)                     /* Data byte 4 */
#define CAN_TDH1R_DATA4_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_TDH1R_DATA4                       CAN_TDH1R_DATA4_Mask
#define CAN_TDH1R_DATA4_0                     (((uint32_t)0x1))
#define CAN_TDH1R_DATA4_1                     (((uint32_t)0x2))
#define CAN_TDH1R_DATA4_2                     (((uint32_t)0x4))
#define CAN_TDH1R_DATA4_3                     (((uint32_t)0x8))
#define CAN_TDH1R_DATA4_4                     (((uint32_t)0x10))
#define CAN_TDH1R_DATA4_5                     (((uint32_t)0x20))
#define CAN_TDH1R_DATA4_6                     (((uint32_t)0x40))
#define CAN_TDH1R_DATA4_7                     (((uint32_t)0x80))

/************************************* CAN->TDH2R  **************************************/
#define CAN_TDH2R_DATA7_Pos                   ((uint32_t)24)                    /* Data byte 7 */
#define CAN_TDH2R_DATA7_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_TDH2R_DATA7                       CAN_TDH2R_DATA7_Mask
#define CAN_TDH2R_DATA7_0                     (((uint32_t)0x1 << CAN_TDH2R_DATA7_Pos))
#define CAN_TDH2R_DATA7_1                     (((uint32_t)0x2 << CAN_TDH2R_DATA7_Pos))
#define CAN_TDH2R_DATA7_2                     (((uint32_t)0x4 << CAN_TDH2R_DATA7_Pos))
#define CAN_TDH2R_DATA7_3                     (((uint32_t)0x8 << CAN_TDH2R_DATA7_Pos))
#define CAN_TDH2R_DATA7_4                     (((uint32_t)0x10 << CAN_TDH2R_DATA7_Pos))
#define CAN_TDH2R_DATA7_5                     (((uint32_t)0x20 << CAN_TDH2R_DATA7_Pos))
#define CAN_TDH2R_DATA7_6                     (((uint32_t)0x40 << CAN_TDH2R_DATA7_Pos))
#define CAN_TDH2R_DATA7_7                     (((uint32_t)0x80 << CAN_TDH2R_DATA7_Pos))
#define CAN_TDH2R_DATA6_Pos                   ((uint32_t)16)                    /* Data byte 6 */
#define CAN_TDH2R_DATA6_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_TDH2R_DATA6                       CAN_TDH2R_DATA6_Mask
#define CAN_TDH2R_DATA6_0                     (((uint32_t)0x1 << CAN_TDH2R_DATA6_Pos))
#define CAN_TDH2R_DATA6_1                     (((uint32_t)0x2 << CAN_TDH2R_DATA6_Pos))
#define CAN_TDH2R_DATA6_2                     (((uint32_t)0x4 << CAN_TDH2R_DATA6_Pos))
#define CAN_TDH2R_DATA6_3                     (((uint32_t)0x8 << CAN_TDH2R_DATA6_Pos))
#define CAN_TDH2R_DATA6_4                     (((uint32_t)0x10 << CAN_TDH2R_DATA6_Pos))
#define CAN_TDH2R_DATA6_5                     (((uint32_t)0x20 << CAN_TDH2R_DATA6_Pos))
#define CAN_TDH2R_DATA6_6                     (((uint32_t)0x40 << CAN_TDH2R_DATA6_Pos))
#define CAN_TDH2R_DATA6_7                     (((uint32_t)0x80 << CAN_TDH2R_DATA6_Pos))
#define CAN_TDH2R_DATA5_Pos                   ((uint32_t)8)                     /* Data byte 5 */
#define CAN_TDH2R_DATA5_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_TDH2R_DATA5                       CAN_TDH2R_DATA5_Mask
#define CAN_TDH2R_DATA5_0                     (((uint32_t)0x1 << CAN_TDH2R_DATA5_Pos))
#define CAN_TDH2R_DATA5_1                     (((uint32_t)0x2 << CAN_TDH2R_DATA5_Pos))
#define CAN_TDH2R_DATA5_2                     (((uint32_t)0x4 << CAN_TDH2R_DATA5_Pos))
#define CAN_TDH2R_DATA5_3                     (((uint32_t)0x8 << CAN_TDH2R_DATA5_Pos))
#define CAN_TDH2R_DATA5_4                     (((uint32_t)0x10 << CAN_TDH2R_DATA5_Pos))
#define CAN_TDH2R_DATA5_5                     (((uint32_t)0x20 << CAN_TDH2R_DATA5_Pos))
#define CAN_TDH2R_DATA5_6                     (((uint32_t)0x40 << CAN_TDH2R_DATA5_Pos))
#define CAN_TDH2R_DATA5_7                     (((uint32_t)0x80 << CAN_TDH2R_DATA5_Pos))
#define CAN_TDH2R_DATA4_Pos                   ((uint32_t)0)                     /* Data byte 4 */
#define CAN_TDH2R_DATA4_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_TDH2R_DATA4                       CAN_TDH2R_DATA4_Mask
#define CAN_TDH2R_DATA4_0                     (((uint32_t)0x1))
#define CAN_TDH2R_DATA4_1                     (((uint32_t)0x2))
#define CAN_TDH2R_DATA4_2                     (((uint32_t)0x4))
#define CAN_TDH2R_DATA4_3                     (((uint32_t)0x8))
#define CAN_TDH2R_DATA4_4                     (((uint32_t)0x10))
#define CAN_TDH2R_DATA4_5                     (((uint32_t)0x20))
#define CAN_TDH2R_DATA4_6                     (((uint32_t)0x40))
#define CAN_TDH2R_DATA4_7                     (((uint32_t)0x80))

/************************************* CAN->RI0R  ***************************************/
#define CAN_RI0R_STID_Pos                     ((uint32_t)21)                    /* Standard identifier or extended identifier */
#define CAN_RI0R_STID_Mask                    (((uint32_t)0x07FF) << 21)
#define CAN_RI0R_STID                         CAN_RI0R_STID_Mask
#define CAN_RI0R_STID_0                       (((uint32_t)0x1 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_1                       (((uint32_t)0x2 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_2                       (((uint32_t)0x4 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_3                       (((uint32_t)0x8 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_4                       (((uint32_t)0x10 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_5                       (((uint32_t)0x20 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_6                       (((uint32_t)0x40 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_7                       (((uint32_t)0x80 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_8                       (((uint32_t)0x100 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_9                       (((uint32_t)0x200 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_STID_10                      (((uint32_t)0x400 << CAN_RI0R_STID_Pos))
#define CAN_RI0R_EXID_Pos                     ((uint32_t)3)                     /* Extended identifier */
#define CAN_RI0R_EXID_Mask                    (((uint32_t)0x03FFFF) << 3)
#define CAN_RI0R_EXID                         CAN_RI0R_EXID_Mask
#define CAN_RI0R_IDE_Pos                      ((uint32_t)2)                     /* Identifier extension */
#define CAN_RI0R_IDE_Mask                     (((uint32_t)0x01) << 2)
#define CAN_RI0R_IDE                          CAN_RI0R_IDE_Mask
#define CAN_RI0R_RTR_Pos                      ((uint32_t)1)                     /* Remote transmission request */
#define CAN_RI0R_RTR_Mask                     (((uint32_t)0x01) << 1)
#define CAN_RI0R_RTR                          CAN_RI0R_RTR_Mask

/************************************* CAN->RI1R  ***************************************/
#define CAN_RI1R_STID_Pos                     ((uint32_t)21)                    /* Standard identifier or extended identifier */
#define CAN_RI1R_STID_Mask                    (((uint32_t)0x07FF) << 21)
#define CAN_RI1R_STID                         CAN_RI1R_STID_Mask
#define CAN_RI1R_STID_0                       (((uint32_t)0x1 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_1                       (((uint32_t)0x2 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_2                       (((uint32_t)0x4 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_3                       (((uint32_t)0x8 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_4                       (((uint32_t)0x10 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_5                       (((uint32_t)0x20 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_6                       (((uint32_t)0x40 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_7                       (((uint32_t)0x80 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_8                       (((uint32_t)0x100 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_9                       (((uint32_t)0x200 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_STID_10                      (((uint32_t)0x400 << CAN_RI1R_STID_Pos))
#define CAN_RI1R_EXID_Pos                     ((uint32_t)3)                     /* Extended identifier */
#define CAN_RI1R_EXID_Mask                    (((uint32_t)0x03FFFF) << 3)
#define CAN_RI1R_EXID                         CAN_RI1R_EXID_Mask
#define CAN_RI1R_IDE_Pos                      ((uint32_t)2)                     /* Identifier extension */
#define CAN_RI1R_IDE_Mask                     (((uint32_t)0x01) << 2)
#define CAN_RI1R_IDE                          CAN_RI1R_IDE_Mask
#define CAN_RI1R_RTR_Pos                      ((uint32_t)1)                     /* Remote transmission request */
#define CAN_RI1R_RTR_Mask                     (((uint32_t)0x01) << 1)
#define CAN_RI1R_RTR                          CAN_RI1R_RTR_Mask

/************************************* CAN->RDT0R  **************************************/
#define CAN_RDT0R_TIME_Pos                    ((uint32_t)16)                    /* Message time stamp */
#define CAN_RDT0R_TIME_Mask                   (((uint32_t)0xFFFF) << 16)
#define CAN_RDT0R_TIME                        CAN_RDT0R_TIME_Mask
#define CAN_RDT0R_FMI_Pos                     ((uint32_t)8)                     /* Filter match index */
#define CAN_RDT0R_FMI_Mask                    (((uint32_t)0xFF) << 8)
#define CAN_RDT0R_FMI                         CAN_RDT0R_FMI_Mask
#define CAN_RDT0R_FMI_0                       (((uint32_t)0x1 << CAN_RDT0R_FMI_Pos))
#define CAN_RDT0R_FMI_1                       (((uint32_t)0x2 << CAN_RDT0R_FMI_Pos))
#define CAN_RDT0R_FMI_2                       (((uint32_t)0x4 << CAN_RDT0R_FMI_Pos))
#define CAN_RDT0R_FMI_3                       (((uint32_t)0x8 << CAN_RDT0R_FMI_Pos))
#define CAN_RDT0R_FMI_4                       (((uint32_t)0x10 << CAN_RDT0R_FMI_Pos))
#define CAN_RDT0R_FMI_5                       (((uint32_t)0x20 << CAN_RDT0R_FMI_Pos))
#define CAN_RDT0R_FMI_6                       (((uint32_t)0x40 << CAN_RDT0R_FMI_Pos))
#define CAN_RDT0R_FMI_7                       (((uint32_t)0x80 << CAN_RDT0R_FMI_Pos))
#define CAN_RDT0R_DLC_Pos                     ((uint32_t)0)                     /* Data length code */
#define CAN_RDT0R_DLC_Mask                    (((uint32_t)0x0F) << 0)
#define CAN_RDT0R_DLC                         CAN_RDT0R_DLC_Mask
#define CAN_RDT0R_DLC_0                       (((uint32_t)0x1))
#define CAN_RDT0R_DLC_1                       (((uint32_t)0x2))
#define CAN_RDT0R_DLC_2                       (((uint32_t)0x4))
#define CAN_RDT0R_DLC_3                       (((uint32_t)0x8))

/************************************* CAN->RDT1R  **************************************/
#define CAN_RDT1R_TIME_Pos                    ((uint32_t)16)                    /* Message time stamp */
#define CAN_RDT1R_TIME_Mask                   (((uint32_t)0xFFFF) << 16)
#define CAN_RDT1R_TIME                        CAN_RDT1R_TIME_Mask
#define CAN_RDT1R_FMI_Pos                     ((uint32_t)8)                     /* Filter match index */
#define CAN_RDT1R_FMI_Mask                    (((uint32_t)0xFF) << 8)
#define CAN_RDT1R_FMI                         CAN_RDT1R_FMI_Mask
#define CAN_RDT1R_FMI_0                       (((uint32_t)0x1 << CAN_RDT1R_FMI_Pos))
#define CAN_RDT1R_FMI_1                       (((uint32_t)0x2 << CAN_RDT1R_FMI_Pos))
#define CAN_RDT1R_FMI_2                       (((uint32_t)0x4 << CAN_RDT1R_FMI_Pos))
#define CAN_RDT1R_FMI_3                       (((uint32_t)0x8 << CAN_RDT1R_FMI_Pos))
#define CAN_RDT1R_FMI_4                       (((uint32_t)0x10 << CAN_RDT1R_FMI_Pos))
#define CAN_RDT1R_FMI_5                       (((uint32_t)0x20 << CAN_RDT1R_FMI_Pos))
#define CAN_RDT1R_FMI_6                       (((uint32_t)0x40 << CAN_RDT1R_FMI_Pos))
#define CAN_RDT1R_FMI_7                       (((uint32_t)0x80 << CAN_RDT1R_FMI_Pos))
#define CAN_RDT1R_DLC_Pos                     ((uint32_t)0)                     /* Data length code */
#define CAN_RDT1R_DLC_Mask                    (((uint32_t)0x0F) << 0)
#define CAN_RDT1R_DLC                         CAN_RDT1R_DLC_Mask
#define CAN_RDT1R_DLC_0                       (((uint32_t)0x1))
#define CAN_RDT1R_DLC_1                       (((uint32_t)0x2))
#define CAN_RDT1R_DLC_2                       (((uint32_t)0x4))
#define CAN_RDT1R_DLC_3                       (((uint32_t)0x8))

/************************************* CAN->RDL0R  **************************************/
#define CAN_RDL0R_DATA3_Pos                   ((uint32_t)24)                    /* Data byte 3 */
#define CAN_RDL0R_DATA3_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_RDL0R_DATA3                       CAN_RDL0R_DATA3_Mask
#define CAN_RDL0R_DATA3_0                     (((uint32_t)0x1 << CAN_RDL0R_DATA3_Pos))
#define CAN_RDL0R_DATA3_1                     (((uint32_t)0x2 << CAN_RDL0R_DATA3_Pos))
#define CAN_RDL0R_DATA3_2                     (((uint32_t)0x4 << CAN_RDL0R_DATA3_Pos))
#define CAN_RDL0R_DATA3_3                     (((uint32_t)0x8 << CAN_RDL0R_DATA3_Pos))
#define CAN_RDL0R_DATA3_4                     (((uint32_t)0x10 << CAN_RDL0R_DATA3_Pos))
#define CAN_RDL0R_DATA3_5                     (((uint32_t)0x20 << CAN_RDL0R_DATA3_Pos))
#define CAN_RDL0R_DATA3_6                     (((uint32_t)0x40 << CAN_RDL0R_DATA3_Pos))
#define CAN_RDL0R_DATA3_7                     (((uint32_t)0x80 << CAN_RDL0R_DATA3_Pos))
#define CAN_RDL0R_DATA2_Pos                   ((uint32_t)16)                    /* Data byte 2 */
#define CAN_RDL0R_DATA2_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_RDL0R_DATA2                       CAN_RDL0R_DATA2_Mask
#define CAN_RDL0R_DATA2_0                     (((uint32_t)0x1 << CAN_RDL0R_DATA2_Pos))
#define CAN_RDL0R_DATA2_1                     (((uint32_t)0x2 << CAN_RDL0R_DATA2_Pos))
#define CAN_RDL0R_DATA2_2                     (((uint32_t)0x4 << CAN_RDL0R_DATA2_Pos))
#define CAN_RDL0R_DATA2_3                     (((uint32_t)0x8 << CAN_RDL0R_DATA2_Pos))
#define CAN_RDL0R_DATA2_4                     (((uint32_t)0x10 << CAN_RDL0R_DATA2_Pos))
#define CAN_RDL0R_DATA2_5                     (((uint32_t)0x20 << CAN_RDL0R_DATA2_Pos))
#define CAN_RDL0R_DATA2_6                     (((uint32_t)0x40 << CAN_RDL0R_DATA2_Pos))
#define CAN_RDL0R_DATA2_7                     (((uint32_t)0x80 << CAN_RDL0R_DATA2_Pos))
#define CAN_RDL0R_DATA1_Pos                   ((uint32_t)8)                     /* Data byte 1 */
#define CAN_RDL0R_DATA1_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_RDL0R_DATA1                       CAN_RDL0R_DATA1_Mask
#define CAN_RDL0R_DATA1_0                     (((uint32_t)0x1 << CAN_RDL0R_DATA1_Pos))
#define CAN_RDL0R_DATA1_1                     (((uint32_t)0x2 << CAN_RDL0R_DATA1_Pos))
#define CAN_RDL0R_DATA1_2                     (((uint32_t)0x4 << CAN_RDL0R_DATA1_Pos))
#define CAN_RDL0R_DATA1_3                     (((uint32_t)0x8 << CAN_RDL0R_DATA1_Pos))
#define CAN_RDL0R_DATA1_4                     (((uint32_t)0x10 << CAN_RDL0R_DATA1_Pos))
#define CAN_RDL0R_DATA1_5                     (((uint32_t)0x20 << CAN_RDL0R_DATA1_Pos))
#define CAN_RDL0R_DATA1_6                     (((uint32_t)0x40 << CAN_RDL0R_DATA1_Pos))
#define CAN_RDL0R_DATA1_7                     (((uint32_t)0x80 << CAN_RDL0R_DATA1_Pos))
#define CAN_RDL0R_DATA0_Pos                   ((uint32_t)0)                     /* Data byte 0 */
#define CAN_RDL0R_DATA0_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_RDL0R_DATA0                       CAN_RDL0R_DATA0_Mask
#define CAN_RDL0R_DATA0_0                     (((uint32_t)0x1))
#define CAN_RDL0R_DATA0_1                     (((uint32_t)0x2))
#define CAN_RDL0R_DATA0_2                     (((uint32_t)0x4))
#define CAN_RDL0R_DATA0_3                     (((uint32_t)0x8))
#define CAN_RDL0R_DATA0_4                     (((uint32_t)0x10))
#define CAN_RDL0R_DATA0_5                     (((uint32_t)0x20))
#define CAN_RDL0R_DATA0_6                     (((uint32_t)0x40))
#define CAN_RDL0R_DATA0_7                     (((uint32_t)0x80))

/************************************* CAN->RDL1R  **************************************/
#define CAN_RDL1R_DATA3_Pos                   ((uint32_t)24)                    /* Data byte 3 */
#define CAN_RDL1R_DATA3_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_RDL1R_DATA3                       CAN_RDL1R_DATA3_Mask
#define CAN_RDL1R_DATA3_0                     (((uint32_t)0x1 << CAN_RDL1R_DATA3_Pos))
#define CAN_RDL1R_DATA3_1                     (((uint32_t)0x2 << CAN_RDL1R_DATA3_Pos))
#define CAN_RDL1R_DATA3_2                     (((uint32_t)0x4 << CAN_RDL1R_DATA3_Pos))
#define CAN_RDL1R_DATA3_3                     (((uint32_t)0x8 << CAN_RDL1R_DATA3_Pos))
#define CAN_RDL1R_DATA3_4                     (((uint32_t)0x10 << CAN_RDL1R_DATA3_Pos))
#define CAN_RDL1R_DATA3_5                     (((uint32_t)0x20 << CAN_RDL1R_DATA3_Pos))
#define CAN_RDL1R_DATA3_6                     (((uint32_t)0x40 << CAN_RDL1R_DATA3_Pos))
#define CAN_RDL1R_DATA3_7                     (((uint32_t)0x80 << CAN_RDL1R_DATA3_Pos))
#define CAN_RDL1R_DATA2_Pos                   ((uint32_t)16)                    /* Data byte 2 */
#define CAN_RDL1R_DATA2_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_RDL1R_DATA2                       CAN_RDL1R_DATA2_Mask
#define CAN_RDL1R_DATA2_0                     (((uint32_t)0x1 << CAN_RDL1R_DATA2_Pos))
#define CAN_RDL1R_DATA2_1                     (((uint32_t)0x2 << CAN_RDL1R_DATA2_Pos))
#define CAN_RDL1R_DATA2_2                     (((uint32_t)0x4 << CAN_RDL1R_DATA2_Pos))
#define CAN_RDL1R_DATA2_3                     (((uint32_t)0x8 << CAN_RDL1R_DATA2_Pos))
#define CAN_RDL1R_DATA2_4                     (((uint32_t)0x10 << CAN_RDL1R_DATA2_Pos))
#define CAN_RDL1R_DATA2_5                     (((uint32_t)0x20 << CAN_RDL1R_DATA2_Pos))
#define CAN_RDL1R_DATA2_6                     (((uint32_t)0x40 << CAN_RDL1R_DATA2_Pos))
#define CAN_RDL1R_DATA2_7                     (((uint32_t)0x80 << CAN_RDL1R_DATA2_Pos))
#define CAN_RDL1R_DATA1_Pos                   ((uint32_t)8)                     /* Data byte 1 */
#define CAN_RDL1R_DATA1_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_RDL1R_DATA1                       CAN_RDL1R_DATA1_Mask
#define CAN_RDL1R_DATA1_0                     (((uint32_t)0x1 << CAN_RDL1R_DATA1_Pos))
#define CAN_RDL1R_DATA1_1                     (((uint32_t)0x2 << CAN_RDL1R_DATA1_Pos))
#define CAN_RDL1R_DATA1_2                     (((uint32_t)0x4 << CAN_RDL1R_DATA1_Pos))
#define CAN_RDL1R_DATA1_3                     (((uint32_t)0x8 << CAN_RDL1R_DATA1_Pos))
#define CAN_RDL1R_DATA1_4                     (((uint32_t)0x10 << CAN_RDL1R_DATA1_Pos))
#define CAN_RDL1R_DATA1_5                     (((uint32_t)0x20 << CAN_RDL1R_DATA1_Pos))
#define CAN_RDL1R_DATA1_6                     (((uint32_t)0x40 << CAN_RDL1R_DATA1_Pos))
#define CAN_RDL1R_DATA1_7                     (((uint32_t)0x80 << CAN_RDL1R_DATA1_Pos))
#define CAN_RDL1R_DATA0_Pos                   ((uint32_t)0)                     /* Data byte 0 */
#define CAN_RDL1R_DATA0_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_RDL1R_DATA0                       CAN_RDL1R_DATA0_Mask
#define CAN_RDL1R_DATA0_0                     (((uint32_t)0x1))
#define CAN_RDL1R_DATA0_1                     (((uint32_t)0x2))
#define CAN_RDL1R_DATA0_2                     (((uint32_t)0x4))
#define CAN_RDL1R_DATA0_3                     (((uint32_t)0x8))
#define CAN_RDL1R_DATA0_4                     (((uint32_t)0x10))
#define CAN_RDL1R_DATA0_5                     (((uint32_t)0x20))
#define CAN_RDL1R_DATA0_6                     (((uint32_t)0x40))
#define CAN_RDL1R_DATA0_7                     (((uint32_t)0x80))

/************************************* CAN->RDH0R  **************************************/
#define CAN_RDH0R_DATA7_Pos                   ((uint32_t)24)                    /* Data byte 7 */
#define CAN_RDH0R_DATA7_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_RDH0R_DATA7                       CAN_RDH0R_DATA7_Mask
#define CAN_RDH0R_DATA7_0                     (((uint32_t)0x1 << CAN_RDH0R_DATA7_Pos))
#define CAN_RDH0R_DATA7_1                     (((uint32_t)0x2 << CAN_RDH0R_DATA7_Pos))
#define CAN_RDH0R_DATA7_2                     (((uint32_t)0x4 << CAN_RDH0R_DATA7_Pos))
#define CAN_RDH0R_DATA7_3                     (((uint32_t)0x8 << CAN_RDH0R_DATA7_Pos))
#define CAN_RDH0R_DATA7_4                     (((uint32_t)0x10 << CAN_RDH0R_DATA7_Pos))
#define CAN_RDH0R_DATA7_5                     (((uint32_t)0x20 << CAN_RDH0R_DATA7_Pos))
#define CAN_RDH0R_DATA7_6                     (((uint32_t)0x40 << CAN_RDH0R_DATA7_Pos))
#define CAN_RDH0R_DATA7_7                     (((uint32_t)0x80 << CAN_RDH0R_DATA7_Pos))
#define CAN_RDH0R_DATA6_Pos                   ((uint32_t)16)                    /* Data byte 6 */
#define CAN_RDH0R_DATA6_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_RDH0R_DATA6                       CAN_RDH0R_DATA6_Mask
#define CAN_RDH0R_DATA6_0                     (((uint32_t)0x1 << CAN_RDH0R_DATA6_Pos))
#define CAN_RDH0R_DATA6_1                     (((uint32_t)0x2 << CAN_RDH0R_DATA6_Pos))
#define CAN_RDH0R_DATA6_2                     (((uint32_t)0x4 << CAN_RDH0R_DATA6_Pos))
#define CAN_RDH0R_DATA6_3                     (((uint32_t)0x8 << CAN_RDH0R_DATA6_Pos))
#define CAN_RDH0R_DATA6_4                     (((uint32_t)0x10 << CAN_RDH0R_DATA6_Pos))
#define CAN_RDH0R_DATA6_5                     (((uint32_t)0x20 << CAN_RDH0R_DATA6_Pos))
#define CAN_RDH0R_DATA6_6                     (((uint32_t)0x40 << CAN_RDH0R_DATA6_Pos))
#define CAN_RDH0R_DATA6_7                     (((uint32_t)0x80 << CAN_RDH0R_DATA6_Pos))
#define CAN_RDH0R_DATA5_Pos                   ((uint32_t)8)                     /* Data byte 5 */
#define CAN_RDH0R_DATA5_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_RDH0R_DATA5                       CAN_RDH0R_DATA5_Mask
#define CAN_RDH0R_DATA5_0                     (((uint32_t)0x1 << CAN_RDH0R_DATA5_Pos))
#define CAN_RDH0R_DATA5_1                     (((uint32_t)0x2 << CAN_RDH0R_DATA5_Pos))
#define CAN_RDH0R_DATA5_2                     (((uint32_t)0x4 << CAN_RDH0R_DATA5_Pos))
#define CAN_RDH0R_DATA5_3                     (((uint32_t)0x8 << CAN_RDH0R_DATA5_Pos))
#define CAN_RDH0R_DATA5_4                     (((uint32_t)0x10 << CAN_RDH0R_DATA5_Pos))
#define CAN_RDH0R_DATA5_5                     (((uint32_t)0x20 << CAN_RDH0R_DATA5_Pos))
#define CAN_RDH0R_DATA5_6                     (((uint32_t)0x40 << CAN_RDH0R_DATA5_Pos))
#define CAN_RDH0R_DATA5_7                     (((uint32_t)0x80 << CAN_RDH0R_DATA5_Pos))
#define CAN_RDH0R_DATA4_Pos                   ((uint32_t)0)                     /* Data byte 4 */
#define CAN_RDH0R_DATA4_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_RDH0R_DATA4                       CAN_RDH0R_DATA4_Mask
#define CAN_RDH0R_DATA4_0                     (((uint32_t)0x1))
#define CAN_RDH0R_DATA4_1                     (((uint32_t)0x2))
#define CAN_RDH0R_DATA4_2                     (((uint32_t)0x4))
#define CAN_RDH0R_DATA4_3                     (((uint32_t)0x8))
#define CAN_RDH0R_DATA4_4                     (((uint32_t)0x10))
#define CAN_RDH0R_DATA4_5                     (((uint32_t)0x20))
#define CAN_RDH0R_DATA4_6                     (((uint32_t)0x40))
#define CAN_RDH0R_DATA4_7                     (((uint32_t)0x80))

/************************************* CAN->RDH1R  **************************************/
#define CAN_RDH1R_DATA7_Pos                   ((uint32_t)24)                    /* Data byte 7 */
#define CAN_RDH1R_DATA7_Mask                  (((uint32_t)0xFF) << 24)
#define CAN_RDH1R_DATA7                       CAN_RDH1R_DATA7_Mask
#define CAN_RDH1R_DATA7_0                     (((uint32_t)0x1 << CAN_RDH1R_DATA7_Pos))
#define CAN_RDH1R_DATA7_1                     (((uint32_t)0x2 << CAN_RDH1R_DATA7_Pos))
#define CAN_RDH1R_DATA7_2                     (((uint32_t)0x4 << CAN_RDH1R_DATA7_Pos))
#define CAN_RDH1R_DATA7_3                     (((uint32_t)0x8 << CAN_RDH1R_DATA7_Pos))
#define CAN_RDH1R_DATA7_4                     (((uint32_t)0x10 << CAN_RDH1R_DATA7_Pos))
#define CAN_RDH1R_DATA7_5                     (((uint32_t)0x20 << CAN_RDH1R_DATA7_Pos))
#define CAN_RDH1R_DATA7_6                     (((uint32_t)0x40 << CAN_RDH1R_DATA7_Pos))
#define CAN_RDH1R_DATA7_7                     (((uint32_t)0x80 << CAN_RDH1R_DATA7_Pos))
#define CAN_RDH1R_DATA6_Pos                   ((uint32_t)16)                    /* Data byte 6 */
#define CAN_RDH1R_DATA6_Mask                  (((uint32_t)0xFF) << 16)
#define CAN_RDH1R_DATA6                       CAN_RDH1R_DATA6_Mask
#define CAN_RDH1R_DATA6_0                     (((uint32_t)0x1 << CAN_RDH1R_DATA6_Pos))
#define CAN_RDH1R_DATA6_1                     (((uint32_t)0x2 << CAN_RDH1R_DATA6_Pos))
#define CAN_RDH1R_DATA6_2                     (((uint32_t)0x4 << CAN_RDH1R_DATA6_Pos))
#define CAN_RDH1R_DATA6_3                     (((uint32_t)0x8 << CAN_RDH1R_DATA6_Pos))
#define CAN_RDH1R_DATA6_4                     (((uint32_t)0x10 << CAN_RDH1R_DATA6_Pos))
#define CAN_RDH1R_DATA6_5                     (((uint32_t)0x20 << CAN_RDH1R_DATA6_Pos))
#define CAN_RDH1R_DATA6_6                     (((uint32_t)0x40 << CAN_RDH1R_DATA6_Pos))
#define CAN_RDH1R_DATA6_7                     (((uint32_t)0x80 << CAN_RDH1R_DATA6_Pos))
#define CAN_RDH1R_DATA5_Pos                   ((uint32_t)8)                     /* Data byte 5 */
#define CAN_RDH1R_DATA5_Mask                  (((uint32_t)0xFF) << 8)
#define CAN_RDH1R_DATA5                       CAN_RDH1R_DATA5_Mask
#define CAN_RDH1R_DATA5_0                     (((uint32_t)0x1 << CAN_RDH1R_DATA5_Pos))
#define CAN_RDH1R_DATA5_1                     (((uint32_t)0x2 << CAN_RDH1R_DATA5_Pos))
#define CAN_RDH1R_DATA5_2                     (((uint32_t)0x4 << CAN_RDH1R_DATA5_Pos))
#define CAN_RDH1R_DATA5_3                     (((uint32_t)0x8 << CAN_RDH1R_DATA5_Pos))
#define CAN_RDH1R_DATA5_4                     (((uint32_t)0x10 << CAN_RDH1R_DATA5_Pos))
#define CAN_RDH1R_DATA5_5                     (((uint32_t)0x20 << CAN_RDH1R_DATA5_Pos))
#define CAN_RDH1R_DATA5_6                     (((uint32_t)0x40 << CAN_RDH1R_DATA5_Pos))
#define CAN_RDH1R_DATA5_7                     (((uint32_t)0x80 << CAN_RDH1R_DATA5_Pos))
#define CAN_RDH1R_DATA4_Pos                   ((uint32_t)0)                     /* Data byte 4 */
#define CAN_RDH1R_DATA4_Mask                  (((uint32_t)0xFF) << 0)
#define CAN_RDH1R_DATA4                       CAN_RDH1R_DATA4_Mask
#define CAN_RDH1R_DATA4_0                     (((uint32_t)0x1))
#define CAN_RDH1R_DATA4_1                     (((uint32_t)0x2))
#define CAN_RDH1R_DATA4_2                     (((uint32_t)0x4))
#define CAN_RDH1R_DATA4_3                     (((uint32_t)0x8))
#define CAN_RDH1R_DATA4_4                     (((uint32_t)0x10))
#define CAN_RDH1R_DATA4_5                     (((uint32_t)0x20))
#define CAN_RDH1R_DATA4_6                     (((uint32_t)0x40))
#define CAN_RDH1R_DATA4_7                     (((uint32_t)0x80))

/************************************** CAN->FMR  ***************************************/
#define CAN_FMR_FINIT_Pos                     ((uint32_t)0)                     /* Filter initiate mode */
#define CAN_FMR_FINIT_Mask                    (((uint32_t)0x01) << 0)
#define CAN_FMR_FINIT                         CAN_FMR_FINIT_Mask

/************************************* CAN->FM1R  ***************************************/
#define CAN_FM1R_FBM0_Pos                     ((uint32_t)0)                     /* Filter mode */
#define CAN_FM1R_FBM0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_FM1R_FBM0                         CAN_FM1R_FBM0_Mask
#define CAN_FM1R_FBM1_Pos                     ((uint32_t)1)                     /* Filter mode */
#define CAN_FM1R_FBM1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_FM1R_FBM1                         CAN_FM1R_FBM1_Mask
#define CAN_FM1R_FBM2_Pos                     ((uint32_t)2)                     /* Filter mode */
#define CAN_FM1R_FBM2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_FM1R_FBM2                         CAN_FM1R_FBM2_Mask
#define CAN_FM1R_FBM3_Pos                     ((uint32_t)3)                     /* Filter mode */
#define CAN_FM1R_FBM3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_FM1R_FBM3                         CAN_FM1R_FBM3_Mask
#define CAN_FM1R_FBM4_Pos                     ((uint32_t)4)                     /* Filter mode */
#define CAN_FM1R_FBM4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_FM1R_FBM4                         CAN_FM1R_FBM4_Mask
#define CAN_FM1R_FBM5_Pos                     ((uint32_t)5)                     /* Filter mode */
#define CAN_FM1R_FBM5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_FM1R_FBM5                         CAN_FM1R_FBM5_Mask
#define CAN_FM1R_FBM6_Pos                     ((uint32_t)6)                     /* Filter mode */
#define CAN_FM1R_FBM6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_FM1R_FBM6                         CAN_FM1R_FBM6_Mask
#define CAN_FM1R_FBM7_Pos                     ((uint32_t)7)                     /* Filter mode */
#define CAN_FM1R_FBM7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_FM1R_FBM7                         CAN_FM1R_FBM7_Mask
#define CAN_FM1R_FBM8_Pos                     ((uint32_t)8)                     /* Filter mode */
#define CAN_FM1R_FBM8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_FM1R_FBM8                         CAN_FM1R_FBM8_Mask
#define CAN_FM1R_FBM9_Pos                     ((uint32_t)9)                     /* Filter mode */
#define CAN_FM1R_FBM9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_FM1R_FBM9                         CAN_FM1R_FBM9_Mask
#define CAN_FM1R_FBM10_Pos                    ((uint32_t)10)                    /* Filter mode */
#define CAN_FM1R_FBM10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_FM1R_FBM10                        CAN_FM1R_FBM10_Mask
#define CAN_FM1R_FBM11_Pos                    ((uint32_t)11)                    /* Filter mode */
#define CAN_FM1R_FBM11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_FM1R_FBM11                        CAN_FM1R_FBM11_Mask
#define CAN_FM1R_FBM12_Pos                    ((uint32_t)12)                    /* Filter mode */
#define CAN_FM1R_FBM12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_FM1R_FBM12                        CAN_FM1R_FBM12_Mask
#define CAN_FM1R_FBM13_Pos                    ((uint32_t)13)                    /* Filter mode */
#define CAN_FM1R_FBM13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_FM1R_FBM13                        CAN_FM1R_FBM13_Mask

/************************************* CAN->FS1R  ***************************************/
#define CAN_FS1R_FSC0_Pos                     ((uint32_t)0)                     /* Filter scale configuration */
#define CAN_FS1R_FSC0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_FS1R_FSC0                         CAN_FS1R_FSC0_Mask
#define CAN_FS1R_FSC1_Pos                     ((uint32_t)1)                     /* Filter scale configuration */
#define CAN_FS1R_FSC1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_FS1R_FSC1                         CAN_FS1R_FSC1_Mask
#define CAN_FS1R_FSC2_Pos                     ((uint32_t)2)                     /* Filter scale configuration */
#define CAN_FS1R_FSC2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_FS1R_FSC2                         CAN_FS1R_FSC2_Mask
#define CAN_FS1R_FSC3_Pos                     ((uint32_t)3)                     /* Filter scale configuration */
#define CAN_FS1R_FSC3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_FS1R_FSC3                         CAN_FS1R_FSC3_Mask
#define CAN_FS1R_FSC4_Pos                     ((uint32_t)4)                     /* Filter scale configuration */
#define CAN_FS1R_FSC4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_FS1R_FSC4                         CAN_FS1R_FSC4_Mask
#define CAN_FS1R_FSC5_Pos                     ((uint32_t)5)                     /* Filter scale configuration */
#define CAN_FS1R_FSC5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_FS1R_FSC5                         CAN_FS1R_FSC5_Mask
#define CAN_FS1R_FSC6_Pos                     ((uint32_t)6)                     /* Filter scale configuration */
#define CAN_FS1R_FSC6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_FS1R_FSC6                         CAN_FS1R_FSC6_Mask
#define CAN_FS1R_FSC7_Pos                     ((uint32_t)7)                     /* Filter scale configuration */
#define CAN_FS1R_FSC7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_FS1R_FSC7                         CAN_FS1R_FSC7_Mask
#define CAN_FS1R_FSC8_Pos                     ((uint32_t)8)                     /* Filter scale configuration */
#define CAN_FS1R_FSC8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_FS1R_FSC8                         CAN_FS1R_FSC8_Mask
#define CAN_FS1R_FSC9_Pos                     ((uint32_t)9)                     /* Filter scale configuration */
#define CAN_FS1R_FSC9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_FS1R_FSC9                         CAN_FS1R_FSC9_Mask
#define CAN_FS1R_FSC10_Pos                    ((uint32_t)10)                    /* Filter scale configuration */
#define CAN_FS1R_FSC10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_FS1R_FSC10                        CAN_FS1R_FSC10_Mask
#define CAN_FS1R_FSC11_Pos                    ((uint32_t)11)                    /* Filter scale configuration */
#define CAN_FS1R_FSC11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_FS1R_FSC11                        CAN_FS1R_FSC11_Mask
#define CAN_FS1R_FSC12_Pos                    ((uint32_t)12)                    /* Filter scale configuration */
#define CAN_FS1R_FSC12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_FS1R_FSC12                        CAN_FS1R_FSC12_Mask
#define CAN_FS1R_FSC13_Pos                    ((uint32_t)13)                    /* Filter scale configuration */
#define CAN_FS1R_FSC13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_FS1R_FSC13                        CAN_FS1R_FSC13_Mask

/************************************* CAN->FFA1R  **************************************/
#define CAN_FFA1R_FFA0_Pos                    ((uint32_t)0)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA0_Mask                   (((uint32_t)0x01) << 0)
#define CAN_FFA1R_FFA0                        CAN_FFA1R_FFA0_Mask
#define CAN_FFA1R_FFA1_Pos                    ((uint32_t)1)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA1_Mask                   (((uint32_t)0x01) << 1)
#define CAN_FFA1R_FFA1                        CAN_FFA1R_FFA1_Mask
#define CAN_FFA1R_FFA2_Pos                    ((uint32_t)2)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA2_Mask                   (((uint32_t)0x01) << 2)
#define CAN_FFA1R_FFA2                        CAN_FFA1R_FFA2_Mask
#define CAN_FFA1R_FFA3_Pos                    ((uint32_t)3)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA3_Mask                   (((uint32_t)0x01) << 3)
#define CAN_FFA1R_FFA3                        CAN_FFA1R_FFA3_Mask
#define CAN_FFA1R_FFA4_Pos                    ((uint32_t)4)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA4_Mask                   (((uint32_t)0x01) << 4)
#define CAN_FFA1R_FFA4                        CAN_FFA1R_FFA4_Mask
#define CAN_FFA1R_FFA5_Pos                    ((uint32_t)5)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA5_Mask                   (((uint32_t)0x01) << 5)
#define CAN_FFA1R_FFA5                        CAN_FFA1R_FFA5_Mask
#define CAN_FFA1R_FFA6_Pos                    ((uint32_t)6)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA6_Mask                   (((uint32_t)0x01) << 6)
#define CAN_FFA1R_FFA6                        CAN_FFA1R_FFA6_Mask
#define CAN_FFA1R_FFA7_Pos                    ((uint32_t)7)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA7_Mask                   (((uint32_t)0x01) << 7)
#define CAN_FFA1R_FFA7                        CAN_FFA1R_FFA7_Mask
#define CAN_FFA1R_FFA8_Pos                    ((uint32_t)8)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA8_Mask                   (((uint32_t)0x01) << 8)
#define CAN_FFA1R_FFA8                        CAN_FFA1R_FFA8_Mask
#define CAN_FFA1R_FFA9_Pos                    ((uint32_t)9)                     /* Filter scale configuration */
#define CAN_FFA1R_FFA9_Mask                   (((uint32_t)0x01) << 9)
#define CAN_FFA1R_FFA9                        CAN_FFA1R_FFA9_Mask
#define CAN_FFA1R_FFA10_Pos                   ((uint32_t)10)                    /* Filter scale configuration */
#define CAN_FFA1R_FFA10_Mask                  (((uint32_t)0x01) << 10)
#define CAN_FFA1R_FFA10                       CAN_FFA1R_FFA10_Mask
#define CAN_FFA1R_FFA11_Pos                   ((uint32_t)11)                    /* Filter scale configuration */
#define CAN_FFA1R_FFA11_Mask                  (((uint32_t)0x01) << 11)
#define CAN_FFA1R_FFA11                       CAN_FFA1R_FFA11_Mask
#define CAN_FFA1R_FFA12_Pos                   ((uint32_t)12)                    /* Filter scale configuration */
#define CAN_FFA1R_FFA12_Mask                  (((uint32_t)0x01) << 12)
#define CAN_FFA1R_FFA12                       CAN_FFA1R_FFA12_Mask
#define CAN_FFA1R_FFA13_Pos                   ((uint32_t)13)                    /* Filter scale configuration */
#define CAN_FFA1R_FFA13_Mask                  (((uint32_t)0x01) << 13)
#define CAN_FFA1R_FFA13                       CAN_FFA1R_FFA13_Mask

/************************************* CAN->FA1R  ***************************************/
#define CAN_FA1R_FACT0_Pos                    ((uint32_t)0)                     /* Filter activate */
#define CAN_FA1R_FACT0_Mask                   (((uint32_t)0x01) << 0)
#define CAN_FA1R_FACT0                        CAN_FA1R_FACT0_Mask
#define CAN_FA1R_FACT1_Pos                    ((uint32_t)1)                     /* Filter activate */
#define CAN_FA1R_FACT1_Mask                   (((uint32_t)0x01) << 1)
#define CAN_FA1R_FACT1                        CAN_FA1R_FACT1_Mask
#define CAN_FA1R_FACT2_Pos                    ((uint32_t)2)                     /* Filter activate */
#define CAN_FA1R_FACT2_Mask                   (((uint32_t)0x01) << 2)
#define CAN_FA1R_FACT2                        CAN_FA1R_FACT2_Mask
#define CAN_FA1R_FACT3_Pos                    ((uint32_t)3)                     /* Filter activate */
#define CAN_FA1R_FACT3_Mask                   (((uint32_t)0x01) << 3)
#define CAN_FA1R_FACT3                        CAN_FA1R_FACT3_Mask
#define CAN_FA1R_FACT4_Pos                    ((uint32_t)4)                     /* Filter activate */
#define CAN_FA1R_FACT4_Mask                   (((uint32_t)0x01) << 4)
#define CAN_FA1R_FACT4                        CAN_FA1R_FACT4_Mask
#define CAN_FA1R_FACT5_Pos                    ((uint32_t)5)                     /* Filter activate */
#define CAN_FA1R_FACT5_Mask                   (((uint32_t)0x01) << 5)
#define CAN_FA1R_FACT5                        CAN_FA1R_FACT5_Mask
#define CAN_FA1R_FACT6_Pos                    ((uint32_t)6)                     /* Filter activate */
#define CAN_FA1R_FACT6_Mask                   (((uint32_t)0x01) << 6)
#define CAN_FA1R_FACT6                        CAN_FA1R_FACT6_Mask
#define CAN_FA1R_FACT7_Pos                    ((uint32_t)7)                     /* Filter activate */
#define CAN_FA1R_FACT7_Mask                   (((uint32_t)0x01) << 7)
#define CAN_FA1R_FACT7                        CAN_FA1R_FACT7_Mask
#define CAN_FA1R_FACT8_Pos                    ((uint32_t)8)                     /* Filter activate */
#define CAN_FA1R_FACT8_Mask                   (((uint32_t)0x01) << 8)
#define CAN_FA1R_FACT8                        CAN_FA1R_FACT8_Mask
#define CAN_FA1R_FACT9_Pos                    ((uint32_t)9)                     /* Filter activate */
#define CAN_FA1R_FACT9_Mask                   (((uint32_t)0x01) << 9)
#define CAN_FA1R_FACT9                        CAN_FA1R_FACT9_Mask
#define CAN_FA1R_FACT10_Pos                   ((uint32_t)10)                    /* Filter activate */
#define CAN_FA1R_FACT10_Mask                  (((uint32_t)0x01) << 10)
#define CAN_FA1R_FACT10                       CAN_FA1R_FACT10_Mask
#define CAN_FA1R_FACT11_Pos                   ((uint32_t)11)                    /* Filter activate */
#define CAN_FA1R_FACT11_Mask                  (((uint32_t)0x01) << 11)
#define CAN_FA1R_FACT11                       CAN_FA1R_FACT11_Mask
#define CAN_FA1R_FACT12_Pos                   ((uint32_t)12)                    /* Filter activate */
#define CAN_FA1R_FACT12_Mask                  (((uint32_t)0x01) << 12)
#define CAN_FA1R_FACT12                       CAN_FA1R_FACT12_Mask
#define CAN_FA1R_FACT13_Pos                   ((uint32_t)13)                    /* Filter activate */
#define CAN_FA1R_FACT13_Mask                  (((uint32_t)0x01) << 13)
#define CAN_FA1R_FACT13                       CAN_FA1R_FACT13_Mask

/************************************* CAN->F0R1  ***************************************/
#define CAN_F0R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F0R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F0R1_FB0                          CAN_F0R1_FB0_Mask
#define CAN_F0R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F0R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F0R1_FB1                          CAN_F0R1_FB1_Mask
#define CAN_F0R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F0R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F0R1_FB2                          CAN_F0R1_FB2_Mask
#define CAN_F0R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F0R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F0R1_FB3                          CAN_F0R1_FB3_Mask
#define CAN_F0R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F0R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F0R1_FB4                          CAN_F0R1_FB4_Mask
#define CAN_F0R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F0R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F0R1_FB5                          CAN_F0R1_FB5_Mask
#define CAN_F0R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F0R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F0R1_FB6                          CAN_F0R1_FB6_Mask
#define CAN_F0R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F0R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F0R1_FB7                          CAN_F0R1_FB7_Mask
#define CAN_F0R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F0R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F0R1_FB8                          CAN_F0R1_FB8_Mask
#define CAN_F0R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F0R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F0R1_FB9                          CAN_F0R1_FB9_Mask
#define CAN_F0R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F0R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F0R1_FB10                         CAN_F0R1_FB10_Mask
#define CAN_F0R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F0R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F0R1_FB11                         CAN_F0R1_FB11_Mask
#define CAN_F0R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F0R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F0R1_FB12                         CAN_F0R1_FB12_Mask
#define CAN_F0R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F0R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F0R1_FB13                         CAN_F0R1_FB13_Mask
#define CAN_F0R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F0R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F0R1_FB14                         CAN_F0R1_FB14_Mask
#define CAN_F0R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F0R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F0R1_FB15                         CAN_F0R1_FB15_Mask
#define CAN_F0R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F0R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F0R1_FB16                         CAN_F0R1_FB16_Mask
#define CAN_F0R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F0R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F0R1_FB17                         CAN_F0R1_FB17_Mask
#define CAN_F0R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F0R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F0R1_FB18                         CAN_F0R1_FB18_Mask
#define CAN_F0R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F0R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F0R1_FB19                         CAN_F0R1_FB19_Mask
#define CAN_F0R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F0R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F0R1_FB20                         CAN_F0R1_FB20_Mask
#define CAN_F0R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F0R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F0R1_FB21                         CAN_F0R1_FB21_Mask
#define CAN_F0R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F0R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F0R1_FB22                         CAN_F0R1_FB22_Mask
#define CAN_F0R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F0R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F0R1_FB23                         CAN_F0R1_FB23_Mask
#define CAN_F0R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F0R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F0R1_FB24                         CAN_F0R1_FB24_Mask
#define CAN_F0R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F0R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F0R1_FB25                         CAN_F0R1_FB25_Mask
#define CAN_F0R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F0R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F0R1_FB26                         CAN_F0R1_FB26_Mask
#define CAN_F0R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F0R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F0R1_FB27                         CAN_F0R1_FB27_Mask
#define CAN_F0R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F0R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F0R1_FB28                         CAN_F0R1_FB28_Mask
#define CAN_F0R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F0R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F0R1_FB29                         CAN_F0R1_FB29_Mask
#define CAN_F0R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F0R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F0R1_FB30                         CAN_F0R1_FB30_Mask
#define CAN_F0R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F0R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F0R1_FB31                         CAN_F0R1_FB31_Mask

/************************************* CAN->F0R2  ***************************************/
#define CAN_F0R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F0R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F0R2_FB0                          CAN_F0R2_FB0_Mask
#define CAN_F0R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F0R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F0R2_FB1                          CAN_F0R2_FB1_Mask
#define CAN_F0R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F0R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F0R2_FB2                          CAN_F0R2_FB2_Mask
#define CAN_F0R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F0R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F0R2_FB3                          CAN_F0R2_FB3_Mask
#define CAN_F0R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F0R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F0R2_FB4                          CAN_F0R2_FB4_Mask
#define CAN_F0R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F0R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F0R2_FB5                          CAN_F0R2_FB5_Mask
#define CAN_F0R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F0R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F0R2_FB6                          CAN_F0R2_FB6_Mask
#define CAN_F0R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F0R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F0R2_FB7                          CAN_F0R2_FB7_Mask
#define CAN_F0R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F0R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F0R2_FB8                          CAN_F0R2_FB8_Mask
#define CAN_F0R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F0R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F0R2_FB9                          CAN_F0R2_FB9_Mask
#define CAN_F0R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F0R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F0R2_FB10                         CAN_F0R2_FB10_Mask
#define CAN_F0R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F0R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F0R2_FB11                         CAN_F0R2_FB11_Mask
#define CAN_F0R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F0R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F0R2_FB12                         CAN_F0R2_FB12_Mask
#define CAN_F0R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F0R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F0R2_FB13                         CAN_F0R2_FB13_Mask
#define CAN_F0R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F0R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F0R2_FB14                         CAN_F0R2_FB14_Mask
#define CAN_F0R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F0R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F0R2_FB15                         CAN_F0R2_FB15_Mask
#define CAN_F0R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F0R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F0R2_FB16                         CAN_F0R2_FB16_Mask
#define CAN_F0R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F0R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F0R2_FB17                         CAN_F0R2_FB17_Mask
#define CAN_F0R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F0R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F0R2_FB18                         CAN_F0R2_FB18_Mask
#define CAN_F0R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F0R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F0R2_FB19                         CAN_F0R2_FB19_Mask
#define CAN_F0R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F0R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F0R2_FB20                         CAN_F0R2_FB20_Mask
#define CAN_F0R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F0R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F0R2_FB21                         CAN_F0R2_FB21_Mask
#define CAN_F0R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F0R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F0R2_FB22                         CAN_F0R2_FB22_Mask
#define CAN_F0R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F0R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F0R2_FB23                         CAN_F0R2_FB23_Mask
#define CAN_F0R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F0R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F0R2_FB24                         CAN_F0R2_FB24_Mask
#define CAN_F0R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F0R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F0R2_FB25                         CAN_F0R2_FB25_Mask
#define CAN_F0R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F0R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F0R2_FB26                         CAN_F0R2_FB26_Mask
#define CAN_F0R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F0R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F0R2_FB27                         CAN_F0R2_FB27_Mask
#define CAN_F0R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F0R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F0R2_FB28                         CAN_F0R2_FB28_Mask
#define CAN_F0R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F0R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F0R2_FB29                         CAN_F0R2_FB29_Mask
#define CAN_F0R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F0R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F0R2_FB30                         CAN_F0R2_FB30_Mask
#define CAN_F0R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F0R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F0R2_FB31                         CAN_F0R2_FB31_Mask

/************************************* CAN->F1R1  ***************************************/
#define CAN_F1R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F1R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F1R1_FB0                          CAN_F1R1_FB0_Mask
#define CAN_F1R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F1R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F1R1_FB1                          CAN_F1R1_FB1_Mask
#define CAN_F1R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F1R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F1R1_FB2                          CAN_F1R1_FB2_Mask
#define CAN_F1R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F1R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F1R1_FB3                          CAN_F1R1_FB3_Mask
#define CAN_F1R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F1R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F1R1_FB4                          CAN_F1R1_FB4_Mask
#define CAN_F1R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F1R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F1R1_FB5                          CAN_F1R1_FB5_Mask
#define CAN_F1R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F1R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F1R1_FB6                          CAN_F1R1_FB6_Mask
#define CAN_F1R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F1R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F1R1_FB7                          CAN_F1R1_FB7_Mask
#define CAN_F1R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F1R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F1R1_FB8                          CAN_F1R1_FB8_Mask
#define CAN_F1R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F1R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F1R1_FB9                          CAN_F1R1_FB9_Mask
#define CAN_F1R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F1R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F1R1_FB10                         CAN_F1R1_FB10_Mask
#define CAN_F1R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F1R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F1R1_FB11                         CAN_F1R1_FB11_Mask
#define CAN_F1R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F1R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F1R1_FB12                         CAN_F1R1_FB12_Mask
#define CAN_F1R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F1R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F1R1_FB13                         CAN_F1R1_FB13_Mask
#define CAN_F1R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F1R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F1R1_FB14                         CAN_F1R1_FB14_Mask
#define CAN_F1R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F1R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F1R1_FB15                         CAN_F1R1_FB15_Mask
#define CAN_F1R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F1R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F1R1_FB16                         CAN_F1R1_FB16_Mask
#define CAN_F1R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F1R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F1R1_FB17                         CAN_F1R1_FB17_Mask
#define CAN_F1R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F1R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F1R1_FB18                         CAN_F1R1_FB18_Mask
#define CAN_F1R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F1R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F1R1_FB19                         CAN_F1R1_FB19_Mask
#define CAN_F1R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F1R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F1R1_FB20                         CAN_F1R1_FB20_Mask
#define CAN_F1R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F1R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F1R1_FB21                         CAN_F1R1_FB21_Mask
#define CAN_F1R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F1R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F1R1_FB22                         CAN_F1R1_FB22_Mask
#define CAN_F1R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F1R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F1R1_FB23                         CAN_F1R1_FB23_Mask
#define CAN_F1R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F1R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F1R1_FB24                         CAN_F1R1_FB24_Mask
#define CAN_F1R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F1R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F1R1_FB25                         CAN_F1R1_FB25_Mask
#define CAN_F1R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F1R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F1R1_FB26                         CAN_F1R1_FB26_Mask
#define CAN_F1R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F1R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F1R1_FB27                         CAN_F1R1_FB27_Mask
#define CAN_F1R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F1R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F1R1_FB28                         CAN_F1R1_FB28_Mask
#define CAN_F1R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F1R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F1R1_FB29                         CAN_F1R1_FB29_Mask
#define CAN_F1R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F1R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F1R1_FB30                         CAN_F1R1_FB30_Mask
#define CAN_F1R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F1R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F1R1_FB31                         CAN_F1R1_FB31_Mask

/************************************* CAN->F1R2  ***************************************/
#define CAN_F1R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F1R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F1R2_FB0                          CAN_F1R2_FB0_Mask
#define CAN_F1R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F1R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F1R2_FB1                          CAN_F1R2_FB1_Mask
#define CAN_F1R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F1R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F1R2_FB2                          CAN_F1R2_FB2_Mask
#define CAN_F1R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F1R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F1R2_FB3                          CAN_F1R2_FB3_Mask
#define CAN_F1R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F1R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F1R2_FB4                          CAN_F1R2_FB4_Mask
#define CAN_F1R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F1R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F1R2_FB5                          CAN_F1R2_FB5_Mask
#define CAN_F1R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F1R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F1R2_FB6                          CAN_F1R2_FB6_Mask
#define CAN_F1R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F1R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F1R2_FB7                          CAN_F1R2_FB7_Mask
#define CAN_F1R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F1R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F1R2_FB8                          CAN_F1R2_FB8_Mask
#define CAN_F1R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F1R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F1R2_FB9                          CAN_F1R2_FB9_Mask
#define CAN_F1R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F1R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F1R2_FB10                         CAN_F1R2_FB10_Mask
#define CAN_F1R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F1R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F1R2_FB11                         CAN_F1R2_FB11_Mask
#define CAN_F1R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F1R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F1R2_FB12                         CAN_F1R2_FB12_Mask
#define CAN_F1R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F1R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F1R2_FB13                         CAN_F1R2_FB13_Mask
#define CAN_F1R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F1R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F1R2_FB14                         CAN_F1R2_FB14_Mask
#define CAN_F1R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F1R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F1R2_FB15                         CAN_F1R2_FB15_Mask
#define CAN_F1R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F1R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F1R2_FB16                         CAN_F1R2_FB16_Mask
#define CAN_F1R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F1R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F1R2_FB17                         CAN_F1R2_FB17_Mask
#define CAN_F1R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F1R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F1R2_FB18                         CAN_F1R2_FB18_Mask
#define CAN_F1R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F1R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F1R2_FB19                         CAN_F1R2_FB19_Mask
#define CAN_F1R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F1R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F1R2_FB20                         CAN_F1R2_FB20_Mask
#define CAN_F1R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F1R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F1R2_FB21                         CAN_F1R2_FB21_Mask
#define CAN_F1R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F1R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F1R2_FB22                         CAN_F1R2_FB22_Mask
#define CAN_F1R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F1R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F1R2_FB23                         CAN_F1R2_FB23_Mask
#define CAN_F1R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F1R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F1R2_FB24                         CAN_F1R2_FB24_Mask
#define CAN_F1R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F1R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F1R2_FB25                         CAN_F1R2_FB25_Mask
#define CAN_F1R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F1R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F1R2_FB26                         CAN_F1R2_FB26_Mask
#define CAN_F1R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F1R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F1R2_FB27                         CAN_F1R2_FB27_Mask
#define CAN_F1R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F1R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F1R2_FB28                         CAN_F1R2_FB28_Mask
#define CAN_F1R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F1R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F1R2_FB29                         CAN_F1R2_FB29_Mask
#define CAN_F1R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F1R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F1R2_FB30                         CAN_F1R2_FB30_Mask
#define CAN_F1R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F1R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F1R2_FB31                         CAN_F1R2_FB31_Mask

/************************************* CAN->F2R1  ***************************************/
#define CAN_F2R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F2R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F2R1_FB0                          CAN_F2R1_FB0_Mask
#define CAN_F2R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F2R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F2R1_FB1                          CAN_F2R1_FB1_Mask
#define CAN_F2R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F2R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F2R1_FB2                          CAN_F2R1_FB2_Mask
#define CAN_F2R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F2R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F2R1_FB3                          CAN_F2R1_FB3_Mask
#define CAN_F2R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F2R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F2R1_FB4                          CAN_F2R1_FB4_Mask
#define CAN_F2R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F2R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F2R1_FB5                          CAN_F2R1_FB5_Mask
#define CAN_F2R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F2R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F2R1_FB6                          CAN_F2R1_FB6_Mask
#define CAN_F2R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F2R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F2R1_FB7                          CAN_F2R1_FB7_Mask
#define CAN_F2R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F2R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F2R1_FB8                          CAN_F2R1_FB8_Mask
#define CAN_F2R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F2R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F2R1_FB9                          CAN_F2R1_FB9_Mask
#define CAN_F2R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F2R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F2R1_FB10                         CAN_F2R1_FB10_Mask
#define CAN_F2R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F2R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F2R1_FB11                         CAN_F2R1_FB11_Mask
#define CAN_F2R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F2R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F2R1_FB12                         CAN_F2R1_FB12_Mask
#define CAN_F2R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F2R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F2R1_FB13                         CAN_F2R1_FB13_Mask
#define CAN_F2R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F2R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F2R1_FB14                         CAN_F2R1_FB14_Mask
#define CAN_F2R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F2R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F2R1_FB15                         CAN_F2R1_FB15_Mask
#define CAN_F2R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F2R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F2R1_FB16                         CAN_F2R1_FB16_Mask
#define CAN_F2R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F2R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F2R1_FB17                         CAN_F2R1_FB17_Mask
#define CAN_F2R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F2R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F2R1_FB18                         CAN_F2R1_FB18_Mask
#define CAN_F2R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F2R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F2R1_FB19                         CAN_F2R1_FB19_Mask
#define CAN_F2R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F2R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F2R1_FB20                         CAN_F2R1_FB20_Mask
#define CAN_F2R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F2R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F2R1_FB21                         CAN_F2R1_FB21_Mask
#define CAN_F2R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F2R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F2R1_FB22                         CAN_F2R1_FB22_Mask
#define CAN_F2R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F2R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F2R1_FB23                         CAN_F2R1_FB23_Mask
#define CAN_F2R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F2R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F2R1_FB24                         CAN_F2R1_FB24_Mask
#define CAN_F2R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F2R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F2R1_FB25                         CAN_F2R1_FB25_Mask
#define CAN_F2R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F2R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F2R1_FB26                         CAN_F2R1_FB26_Mask
#define CAN_F2R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F2R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F2R1_FB27                         CAN_F2R1_FB27_Mask
#define CAN_F2R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F2R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F2R1_FB28                         CAN_F2R1_FB28_Mask
#define CAN_F2R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F2R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F2R1_FB29                         CAN_F2R1_FB29_Mask
#define CAN_F2R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F2R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F2R1_FB30                         CAN_F2R1_FB30_Mask
#define CAN_F2R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F2R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F2R1_FB31                         CAN_F2R1_FB31_Mask

/************************************* CAN->F2R2  ***************************************/
#define CAN_F2R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F2R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F2R2_FB0                          CAN_F2R2_FB0_Mask
#define CAN_F2R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F2R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F2R2_FB1                          CAN_F2R2_FB1_Mask
#define CAN_F2R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F2R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F2R2_FB2                          CAN_F2R2_FB2_Mask
#define CAN_F2R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F2R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F2R2_FB3                          CAN_F2R2_FB3_Mask
#define CAN_F2R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F2R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F2R2_FB4                          CAN_F2R2_FB4_Mask
#define CAN_F2R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F2R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F2R2_FB5                          CAN_F2R2_FB5_Mask
#define CAN_F2R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F2R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F2R2_FB6                          CAN_F2R2_FB6_Mask
#define CAN_F2R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F2R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F2R2_FB7                          CAN_F2R2_FB7_Mask
#define CAN_F2R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F2R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F2R2_FB8                          CAN_F2R2_FB8_Mask
#define CAN_F2R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F2R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F2R2_FB9                          CAN_F2R2_FB9_Mask
#define CAN_F2R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F2R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F2R2_FB10                         CAN_F2R2_FB10_Mask
#define CAN_F2R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F2R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F2R2_FB11                         CAN_F2R2_FB11_Mask
#define CAN_F2R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F2R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F2R2_FB12                         CAN_F2R2_FB12_Mask
#define CAN_F2R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F2R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F2R2_FB13                         CAN_F2R2_FB13_Mask
#define CAN_F2R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F2R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F2R2_FB14                         CAN_F2R2_FB14_Mask
#define CAN_F2R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F2R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F2R2_FB15                         CAN_F2R2_FB15_Mask
#define CAN_F2R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F2R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F2R2_FB16                         CAN_F2R2_FB16_Mask
#define CAN_F2R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F2R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F2R2_FB17                         CAN_F2R2_FB17_Mask
#define CAN_F2R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F2R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F2R2_FB18                         CAN_F2R2_FB18_Mask
#define CAN_F2R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F2R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F2R2_FB19                         CAN_F2R2_FB19_Mask
#define CAN_F2R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F2R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F2R2_FB20                         CAN_F2R2_FB20_Mask
#define CAN_F2R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F2R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F2R2_FB21                         CAN_F2R2_FB21_Mask
#define CAN_F2R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F2R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F2R2_FB22                         CAN_F2R2_FB22_Mask
#define CAN_F2R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F2R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F2R2_FB23                         CAN_F2R2_FB23_Mask
#define CAN_F2R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F2R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F2R2_FB24                         CAN_F2R2_FB24_Mask
#define CAN_F2R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F2R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F2R2_FB25                         CAN_F2R2_FB25_Mask
#define CAN_F2R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F2R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F2R2_FB26                         CAN_F2R2_FB26_Mask
#define CAN_F2R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F2R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F2R2_FB27                         CAN_F2R2_FB27_Mask
#define CAN_F2R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F2R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F2R2_FB28                         CAN_F2R2_FB28_Mask
#define CAN_F2R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F2R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F2R2_FB29                         CAN_F2R2_FB29_Mask
#define CAN_F2R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F2R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F2R2_FB30                         CAN_F2R2_FB30_Mask
#define CAN_F2R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F2R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F2R2_FB31                         CAN_F2R2_FB31_Mask

/************************************* CAN->F3R1  ***************************************/
#define CAN_F3R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F3R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F3R1_FB0                          CAN_F3R1_FB0_Mask
#define CAN_F3R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F3R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F3R1_FB1                          CAN_F3R1_FB1_Mask
#define CAN_F3R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F3R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F3R1_FB2                          CAN_F3R1_FB2_Mask
#define CAN_F3R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F3R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F3R1_FB3                          CAN_F3R1_FB3_Mask
#define CAN_F3R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F3R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F3R1_FB4                          CAN_F3R1_FB4_Mask
#define CAN_F3R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F3R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F3R1_FB5                          CAN_F3R1_FB5_Mask
#define CAN_F3R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F3R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F3R1_FB6                          CAN_F3R1_FB6_Mask
#define CAN_F3R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F3R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F3R1_FB7                          CAN_F3R1_FB7_Mask
#define CAN_F3R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F3R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F3R1_FB8                          CAN_F3R1_FB8_Mask
#define CAN_F3R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F3R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F3R1_FB9                          CAN_F3R1_FB9_Mask
#define CAN_F3R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F3R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F3R1_FB10                         CAN_F3R1_FB10_Mask
#define CAN_F3R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F3R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F3R1_FB11                         CAN_F3R1_FB11_Mask
#define CAN_F3R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F3R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F3R1_FB12                         CAN_F3R1_FB12_Mask
#define CAN_F3R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F3R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F3R1_FB13                         CAN_F3R1_FB13_Mask
#define CAN_F3R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F3R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F3R1_FB14                         CAN_F3R1_FB14_Mask
#define CAN_F3R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F3R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F3R1_FB15                         CAN_F3R1_FB15_Mask
#define CAN_F3R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F3R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F3R1_FB16                         CAN_F3R1_FB16_Mask
#define CAN_F3R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F3R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F3R1_FB17                         CAN_F3R1_FB17_Mask
#define CAN_F3R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F3R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F3R1_FB18                         CAN_F3R1_FB18_Mask
#define CAN_F3R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F3R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F3R1_FB19                         CAN_F3R1_FB19_Mask
#define CAN_F3R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F3R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F3R1_FB20                         CAN_F3R1_FB20_Mask
#define CAN_F3R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F3R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F3R1_FB21                         CAN_F3R1_FB21_Mask
#define CAN_F3R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F3R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F3R1_FB22                         CAN_F3R1_FB22_Mask
#define CAN_F3R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F3R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F3R1_FB23                         CAN_F3R1_FB23_Mask
#define CAN_F3R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F3R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F3R1_FB24                         CAN_F3R1_FB24_Mask
#define CAN_F3R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F3R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F3R1_FB25                         CAN_F3R1_FB25_Mask
#define CAN_F3R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F3R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F3R1_FB26                         CAN_F3R1_FB26_Mask
#define CAN_F3R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F3R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F3R1_FB27                         CAN_F3R1_FB27_Mask
#define CAN_F3R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F3R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F3R1_FB28                         CAN_F3R1_FB28_Mask
#define CAN_F3R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F3R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F3R1_FB29                         CAN_F3R1_FB29_Mask
#define CAN_F3R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F3R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F3R1_FB30                         CAN_F3R1_FB30_Mask
#define CAN_F3R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F3R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F3R1_FB31                         CAN_F3R1_FB31_Mask

/************************************* CAN->F3R2  ***************************************/
#define CAN_F3R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F3R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F3R2_FB0                          CAN_F3R2_FB0_Mask
#define CAN_F3R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F3R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F3R2_FB1                          CAN_F3R2_FB1_Mask
#define CAN_F3R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F3R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F3R2_FB2                          CAN_F3R2_FB2_Mask
#define CAN_F3R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F3R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F3R2_FB3                          CAN_F3R2_FB3_Mask
#define CAN_F3R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F3R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F3R2_FB4                          CAN_F3R2_FB4_Mask
#define CAN_F3R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F3R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F3R2_FB5                          CAN_F3R2_FB5_Mask
#define CAN_F3R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F3R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F3R2_FB6                          CAN_F3R2_FB6_Mask
#define CAN_F3R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F3R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F3R2_FB7                          CAN_F3R2_FB7_Mask
#define CAN_F3R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F3R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F3R2_FB8                          CAN_F3R2_FB8_Mask
#define CAN_F3R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F3R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F3R2_FB9                          CAN_F3R2_FB9_Mask
#define CAN_F3R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F3R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F3R2_FB10                         CAN_F3R2_FB10_Mask
#define CAN_F3R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F3R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F3R2_FB11                         CAN_F3R2_FB11_Mask
#define CAN_F3R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F3R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F3R2_FB12                         CAN_F3R2_FB12_Mask
#define CAN_F3R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F3R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F3R2_FB13                         CAN_F3R2_FB13_Mask
#define CAN_F3R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F3R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F3R2_FB14                         CAN_F3R2_FB14_Mask
#define CAN_F3R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F3R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F3R2_FB15                         CAN_F3R2_FB15_Mask
#define CAN_F3R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F3R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F3R2_FB16                         CAN_F3R2_FB16_Mask
#define CAN_F3R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F3R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F3R2_FB17                         CAN_F3R2_FB17_Mask
#define CAN_F3R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F3R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F3R2_FB18                         CAN_F3R2_FB18_Mask
#define CAN_F3R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F3R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F3R2_FB19                         CAN_F3R2_FB19_Mask
#define CAN_F3R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F3R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F3R2_FB20                         CAN_F3R2_FB20_Mask
#define CAN_F3R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F3R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F3R2_FB21                         CAN_F3R2_FB21_Mask
#define CAN_F3R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F3R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F3R2_FB22                         CAN_F3R2_FB22_Mask
#define CAN_F3R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F3R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F3R2_FB23                         CAN_F3R2_FB23_Mask
#define CAN_F3R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F3R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F3R2_FB24                         CAN_F3R2_FB24_Mask
#define CAN_F3R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F3R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F3R2_FB25                         CAN_F3R2_FB25_Mask
#define CAN_F3R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F3R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F3R2_FB26                         CAN_F3R2_FB26_Mask
#define CAN_F3R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F3R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F3R2_FB27                         CAN_F3R2_FB27_Mask
#define CAN_F3R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F3R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F3R2_FB28                         CAN_F3R2_FB28_Mask
#define CAN_F3R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F3R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F3R2_FB29                         CAN_F3R2_FB29_Mask
#define CAN_F3R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F3R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F3R2_FB30                         CAN_F3R2_FB30_Mask
#define CAN_F3R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F3R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F3R2_FB31                         CAN_F3R2_FB31_Mask

/************************************* CAN->F4R1  ***************************************/
#define CAN_F4R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F4R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F4R1_FB0                          CAN_F4R1_FB0_Mask
#define CAN_F4R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F4R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F4R1_FB1                          CAN_F4R1_FB1_Mask
#define CAN_F4R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F4R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F4R1_FB2                          CAN_F4R1_FB2_Mask
#define CAN_F4R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F4R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F4R1_FB3                          CAN_F4R1_FB3_Mask
#define CAN_F4R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F4R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F4R1_FB4                          CAN_F4R1_FB4_Mask
#define CAN_F4R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F4R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F4R1_FB5                          CAN_F4R1_FB5_Mask
#define CAN_F4R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F4R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F4R1_FB6                          CAN_F4R1_FB6_Mask
#define CAN_F4R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F4R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F4R1_FB7                          CAN_F4R1_FB7_Mask
#define CAN_F4R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F4R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F4R1_FB8                          CAN_F4R1_FB8_Mask
#define CAN_F4R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F4R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F4R1_FB9                          CAN_F4R1_FB9_Mask
#define CAN_F4R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F4R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F4R1_FB10                         CAN_F4R1_FB10_Mask
#define CAN_F4R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F4R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F4R1_FB11                         CAN_F4R1_FB11_Mask
#define CAN_F4R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F4R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F4R1_FB12                         CAN_F4R1_FB12_Mask
#define CAN_F4R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F4R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F4R1_FB13                         CAN_F4R1_FB13_Mask
#define CAN_F4R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F4R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F4R1_FB14                         CAN_F4R1_FB14_Mask
#define CAN_F4R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F4R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F4R1_FB15                         CAN_F4R1_FB15_Mask
#define CAN_F4R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F4R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F4R1_FB16                         CAN_F4R1_FB16_Mask
#define CAN_F4R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F4R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F4R1_FB17                         CAN_F4R1_FB17_Mask
#define CAN_F4R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F4R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F4R1_FB18                         CAN_F4R1_FB18_Mask
#define CAN_F4R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F4R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F4R1_FB19                         CAN_F4R1_FB19_Mask
#define CAN_F4R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F4R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F4R1_FB20                         CAN_F4R1_FB20_Mask
#define CAN_F4R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F4R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F4R1_FB21                         CAN_F4R1_FB21_Mask
#define CAN_F4R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F4R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F4R1_FB22                         CAN_F4R1_FB22_Mask
#define CAN_F4R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F4R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F4R1_FB23                         CAN_F4R1_FB23_Mask
#define CAN_F4R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F4R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F4R1_FB24                         CAN_F4R1_FB24_Mask
#define CAN_F4R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F4R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F4R1_FB25                         CAN_F4R1_FB25_Mask
#define CAN_F4R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F4R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F4R1_FB26                         CAN_F4R1_FB26_Mask
#define CAN_F4R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F4R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F4R1_FB27                         CAN_F4R1_FB27_Mask
#define CAN_F4R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F4R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F4R1_FB28                         CAN_F4R1_FB28_Mask
#define CAN_F4R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F4R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F4R1_FB29                         CAN_F4R1_FB29_Mask
#define CAN_F4R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F4R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F4R1_FB30                         CAN_F4R1_FB30_Mask
#define CAN_F4R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F4R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F4R1_FB31                         CAN_F4R1_FB31_Mask

/************************************* CAN->F4R2  ***************************************/
#define CAN_F4R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F4R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F4R2_FB0                          CAN_F4R2_FB0_Mask
#define CAN_F4R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F4R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F4R2_FB1                          CAN_F4R2_FB1_Mask
#define CAN_F4R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F4R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F4R2_FB2                          CAN_F4R2_FB2_Mask
#define CAN_F4R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F4R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F4R2_FB3                          CAN_F4R2_FB3_Mask
#define CAN_F4R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F4R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F4R2_FB4                          CAN_F4R2_FB4_Mask
#define CAN_F4R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F4R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F4R2_FB5                          CAN_F4R2_FB5_Mask
#define CAN_F4R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F4R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F4R2_FB6                          CAN_F4R2_FB6_Mask
#define CAN_F4R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F4R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F4R2_FB7                          CAN_F4R2_FB7_Mask
#define CAN_F4R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F4R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F4R2_FB8                          CAN_F4R2_FB8_Mask
#define CAN_F4R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F4R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F4R2_FB9                          CAN_F4R2_FB9_Mask
#define CAN_F4R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F4R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F4R2_FB10                         CAN_F4R2_FB10_Mask
#define CAN_F4R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F4R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F4R2_FB11                         CAN_F4R2_FB11_Mask
#define CAN_F4R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F4R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F4R2_FB12                         CAN_F4R2_FB12_Mask
#define CAN_F4R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F4R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F4R2_FB13                         CAN_F4R2_FB13_Mask
#define CAN_F4R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F4R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F4R2_FB14                         CAN_F4R2_FB14_Mask
#define CAN_F4R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F4R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F4R2_FB15                         CAN_F4R2_FB15_Mask
#define CAN_F4R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F4R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F4R2_FB16                         CAN_F4R2_FB16_Mask
#define CAN_F4R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F4R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F4R2_FB17                         CAN_F4R2_FB17_Mask
#define CAN_F4R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F4R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F4R2_FB18                         CAN_F4R2_FB18_Mask
#define CAN_F4R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F4R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F4R2_FB19                         CAN_F4R2_FB19_Mask
#define CAN_F4R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F4R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F4R2_FB20                         CAN_F4R2_FB20_Mask
#define CAN_F4R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F4R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F4R2_FB21                         CAN_F4R2_FB21_Mask
#define CAN_F4R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F4R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F4R2_FB22                         CAN_F4R2_FB22_Mask
#define CAN_F4R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F4R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F4R2_FB23                         CAN_F4R2_FB23_Mask
#define CAN_F4R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F4R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F4R2_FB24                         CAN_F4R2_FB24_Mask
#define CAN_F4R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F4R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F4R2_FB25                         CAN_F4R2_FB25_Mask
#define CAN_F4R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F4R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F4R2_FB26                         CAN_F4R2_FB26_Mask
#define CAN_F4R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F4R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F4R2_FB27                         CAN_F4R2_FB27_Mask
#define CAN_F4R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F4R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F4R2_FB28                         CAN_F4R2_FB28_Mask
#define CAN_F4R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F4R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F4R2_FB29                         CAN_F4R2_FB29_Mask
#define CAN_F4R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F4R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F4R2_FB30                         CAN_F4R2_FB30_Mask
#define CAN_F4R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F4R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F4R2_FB31                         CAN_F4R2_FB31_Mask

/************************************* CAN->F5R1  ***************************************/
#define CAN_F5R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F5R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F5R1_FB0                          CAN_F5R1_FB0_Mask
#define CAN_F5R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F5R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F5R1_FB1                          CAN_F5R1_FB1_Mask
#define CAN_F5R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F5R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F5R1_FB2                          CAN_F5R1_FB2_Mask
#define CAN_F5R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F5R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F5R1_FB3                          CAN_F5R1_FB3_Mask
#define CAN_F5R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F5R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F5R1_FB4                          CAN_F5R1_FB4_Mask
#define CAN_F5R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F5R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F5R1_FB5                          CAN_F5R1_FB5_Mask
#define CAN_F5R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F5R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F5R1_FB6                          CAN_F5R1_FB6_Mask
#define CAN_F5R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F5R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F5R1_FB7                          CAN_F5R1_FB7_Mask
#define CAN_F5R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F5R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F5R1_FB8                          CAN_F5R1_FB8_Mask
#define CAN_F5R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F5R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F5R1_FB9                          CAN_F5R1_FB9_Mask
#define CAN_F5R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F5R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F5R1_FB10                         CAN_F5R1_FB10_Mask
#define CAN_F5R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F5R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F5R1_FB11                         CAN_F5R1_FB11_Mask
#define CAN_F5R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F5R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F5R1_FB12                         CAN_F5R1_FB12_Mask
#define CAN_F5R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F5R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F5R1_FB13                         CAN_F5R1_FB13_Mask
#define CAN_F5R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F5R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F5R1_FB14                         CAN_F5R1_FB14_Mask
#define CAN_F5R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F5R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F5R1_FB15                         CAN_F5R1_FB15_Mask
#define CAN_F5R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F5R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F5R1_FB16                         CAN_F5R1_FB16_Mask
#define CAN_F5R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F5R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F5R1_FB17                         CAN_F5R1_FB17_Mask
#define CAN_F5R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F5R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F5R1_FB18                         CAN_F5R1_FB18_Mask
#define CAN_F5R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F5R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F5R1_FB19                         CAN_F5R1_FB19_Mask
#define CAN_F5R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F5R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F5R1_FB20                         CAN_F5R1_FB20_Mask
#define CAN_F5R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F5R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F5R1_FB21                         CAN_F5R1_FB21_Mask
#define CAN_F5R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F5R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F5R1_FB22                         CAN_F5R1_FB22_Mask
#define CAN_F5R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F5R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F5R1_FB23                         CAN_F5R1_FB23_Mask
#define CAN_F5R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F5R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F5R1_FB24                         CAN_F5R1_FB24_Mask
#define CAN_F5R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F5R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F5R1_FB25                         CAN_F5R1_FB25_Mask
#define CAN_F5R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F5R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F5R1_FB26                         CAN_F5R1_FB26_Mask
#define CAN_F5R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F5R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F5R1_FB27                         CAN_F5R1_FB27_Mask
#define CAN_F5R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F5R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F5R1_FB28                         CAN_F5R1_FB28_Mask
#define CAN_F5R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F5R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F5R1_FB29                         CAN_F5R1_FB29_Mask
#define CAN_F5R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F5R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F5R1_FB30                         CAN_F5R1_FB30_Mask
#define CAN_F5R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F5R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F5R1_FB31                         CAN_F5R1_FB31_Mask

/************************************* CAN->F5R2  ***************************************/
#define CAN_F5R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F5R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F5R2_FB0                          CAN_F5R2_FB0_Mask
#define CAN_F5R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F5R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F5R2_FB1                          CAN_F5R2_FB1_Mask
#define CAN_F5R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F5R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F5R2_FB2                          CAN_F5R2_FB2_Mask
#define CAN_F5R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F5R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F5R2_FB3                          CAN_F5R2_FB3_Mask
#define CAN_F5R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F5R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F5R2_FB4                          CAN_F5R2_FB4_Mask
#define CAN_F5R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F5R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F5R2_FB5                          CAN_F5R2_FB5_Mask
#define CAN_F5R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F5R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F5R2_FB6                          CAN_F5R2_FB6_Mask
#define CAN_F5R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F5R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F5R2_FB7                          CAN_F5R2_FB7_Mask
#define CAN_F5R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F5R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F5R2_FB8                          CAN_F5R2_FB8_Mask
#define CAN_F5R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F5R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F5R2_FB9                          CAN_F5R2_FB9_Mask
#define CAN_F5R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F5R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F5R2_FB10                         CAN_F5R2_FB10_Mask
#define CAN_F5R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F5R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F5R2_FB11                         CAN_F5R2_FB11_Mask
#define CAN_F5R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F5R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F5R2_FB12                         CAN_F5R2_FB12_Mask
#define CAN_F5R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F5R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F5R2_FB13                         CAN_F5R2_FB13_Mask
#define CAN_F5R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F5R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F5R2_FB14                         CAN_F5R2_FB14_Mask
#define CAN_F5R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F5R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F5R2_FB15                         CAN_F5R2_FB15_Mask
#define CAN_F5R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F5R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F5R2_FB16                         CAN_F5R2_FB16_Mask
#define CAN_F5R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F5R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F5R2_FB17                         CAN_F5R2_FB17_Mask
#define CAN_F5R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F5R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F5R2_FB18                         CAN_F5R2_FB18_Mask
#define CAN_F5R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F5R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F5R2_FB19                         CAN_F5R2_FB19_Mask
#define CAN_F5R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F5R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F5R2_FB20                         CAN_F5R2_FB20_Mask
#define CAN_F5R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F5R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F5R2_FB21                         CAN_F5R2_FB21_Mask
#define CAN_F5R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F5R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F5R2_FB22                         CAN_F5R2_FB22_Mask
#define CAN_F5R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F5R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F5R2_FB23                         CAN_F5R2_FB23_Mask
#define CAN_F5R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F5R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F5R2_FB24                         CAN_F5R2_FB24_Mask
#define CAN_F5R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F5R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F5R2_FB25                         CAN_F5R2_FB25_Mask
#define CAN_F5R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F5R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F5R2_FB26                         CAN_F5R2_FB26_Mask
#define CAN_F5R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F5R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F5R2_FB27                         CAN_F5R2_FB27_Mask
#define CAN_F5R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F5R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F5R2_FB28                         CAN_F5R2_FB28_Mask
#define CAN_F5R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F5R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F5R2_FB29                         CAN_F5R2_FB29_Mask
#define CAN_F5R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F5R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F5R2_FB30                         CAN_F5R2_FB30_Mask
#define CAN_F5R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F5R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F5R2_FB31                         CAN_F5R2_FB31_Mask

/************************************* CAN->F6R1  ***************************************/
#define CAN_F6R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F6R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F6R1_FB0                          CAN_F6R1_FB0_Mask
#define CAN_F6R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F6R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F6R1_FB1                          CAN_F6R1_FB1_Mask
#define CAN_F6R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F6R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F6R1_FB2                          CAN_F6R1_FB2_Mask
#define CAN_F6R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F6R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F6R1_FB3                          CAN_F6R1_FB3_Mask
#define CAN_F6R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F6R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F6R1_FB4                          CAN_F6R1_FB4_Mask
#define CAN_F6R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F6R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F6R1_FB5                          CAN_F6R1_FB5_Mask
#define CAN_F6R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F6R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F6R1_FB6                          CAN_F6R1_FB6_Mask
#define CAN_F6R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F6R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F6R1_FB7                          CAN_F6R1_FB7_Mask
#define CAN_F6R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F6R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F6R1_FB8                          CAN_F6R1_FB8_Mask
#define CAN_F6R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F6R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F6R1_FB9                          CAN_F6R1_FB9_Mask
#define CAN_F6R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F6R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F6R1_FB10                         CAN_F6R1_FB10_Mask
#define CAN_F6R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F6R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F6R1_FB11                         CAN_F6R1_FB11_Mask
#define CAN_F6R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F6R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F6R1_FB12                         CAN_F6R1_FB12_Mask
#define CAN_F6R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F6R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F6R1_FB13                         CAN_F6R1_FB13_Mask
#define CAN_F6R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F6R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F6R1_FB14                         CAN_F6R1_FB14_Mask
#define CAN_F6R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F6R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F6R1_FB15                         CAN_F6R1_FB15_Mask
#define CAN_F6R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F6R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F6R1_FB16                         CAN_F6R1_FB16_Mask
#define CAN_F6R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F6R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F6R1_FB17                         CAN_F6R1_FB17_Mask
#define CAN_F6R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F6R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F6R1_FB18                         CAN_F6R1_FB18_Mask
#define CAN_F6R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F6R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F6R1_FB19                         CAN_F6R1_FB19_Mask
#define CAN_F6R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F6R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F6R1_FB20                         CAN_F6R1_FB20_Mask
#define CAN_F6R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F6R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F6R1_FB21                         CAN_F6R1_FB21_Mask
#define CAN_F6R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F6R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F6R1_FB22                         CAN_F6R1_FB22_Mask
#define CAN_F6R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F6R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F6R1_FB23                         CAN_F6R1_FB23_Mask
#define CAN_F6R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F6R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F6R1_FB24                         CAN_F6R1_FB24_Mask
#define CAN_F6R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F6R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F6R1_FB25                         CAN_F6R1_FB25_Mask
#define CAN_F6R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F6R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F6R1_FB26                         CAN_F6R1_FB26_Mask
#define CAN_F6R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F6R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F6R1_FB27                         CAN_F6R1_FB27_Mask
#define CAN_F6R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F6R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F6R1_FB28                         CAN_F6R1_FB28_Mask
#define CAN_F6R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F6R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F6R1_FB29                         CAN_F6R1_FB29_Mask
#define CAN_F6R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F6R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F6R1_FB30                         CAN_F6R1_FB30_Mask
#define CAN_F6R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F6R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F6R1_FB31                         CAN_F6R1_FB31_Mask

/************************************* CAN->F6R2  ***************************************/
#define CAN_F6R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F6R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F6R2_FB0                          CAN_F6R2_FB0_Mask
#define CAN_F6R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F6R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F6R2_FB1                          CAN_F6R2_FB1_Mask
#define CAN_F6R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F6R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F6R2_FB2                          CAN_F6R2_FB2_Mask
#define CAN_F6R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F6R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F6R2_FB3                          CAN_F6R2_FB3_Mask
#define CAN_F6R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F6R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F6R2_FB4                          CAN_F6R2_FB4_Mask
#define CAN_F6R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F6R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F6R2_FB5                          CAN_F6R2_FB5_Mask
#define CAN_F6R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F6R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F6R2_FB6                          CAN_F6R2_FB6_Mask
#define CAN_F6R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F6R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F6R2_FB7                          CAN_F6R2_FB7_Mask
#define CAN_F6R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F6R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F6R2_FB8                          CAN_F6R2_FB8_Mask
#define CAN_F6R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F6R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F6R2_FB9                          CAN_F6R2_FB9_Mask
#define CAN_F6R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F6R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F6R2_FB10                         CAN_F6R2_FB10_Mask
#define CAN_F6R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F6R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F6R2_FB11                         CAN_F6R2_FB11_Mask
#define CAN_F6R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F6R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F6R2_FB12                         CAN_F6R2_FB12_Mask
#define CAN_F6R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F6R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F6R2_FB13                         CAN_F6R2_FB13_Mask
#define CAN_F6R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F6R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F6R2_FB14                         CAN_F6R2_FB14_Mask
#define CAN_F6R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F6R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F6R2_FB15                         CAN_F6R2_FB15_Mask
#define CAN_F6R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F6R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F6R2_FB16                         CAN_F6R2_FB16_Mask
#define CAN_F6R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F6R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F6R2_FB17                         CAN_F6R2_FB17_Mask
#define CAN_F6R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F6R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F6R2_FB18                         CAN_F6R2_FB18_Mask
#define CAN_F6R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F6R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F6R2_FB19                         CAN_F6R2_FB19_Mask
#define CAN_F6R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F6R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F6R2_FB20                         CAN_F6R2_FB20_Mask
#define CAN_F6R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F6R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F6R2_FB21                         CAN_F6R2_FB21_Mask
#define CAN_F6R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F6R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F6R2_FB22                         CAN_F6R2_FB22_Mask
#define CAN_F6R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F6R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F6R2_FB23                         CAN_F6R2_FB23_Mask
#define CAN_F6R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F6R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F6R2_FB24                         CAN_F6R2_FB24_Mask
#define CAN_F6R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F6R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F6R2_FB25                         CAN_F6R2_FB25_Mask
#define CAN_F6R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F6R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F6R2_FB26                         CAN_F6R2_FB26_Mask
#define CAN_F6R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F6R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F6R2_FB27                         CAN_F6R2_FB27_Mask
#define CAN_F6R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F6R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F6R2_FB28                         CAN_F6R2_FB28_Mask
#define CAN_F6R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F6R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F6R2_FB29                         CAN_F6R2_FB29_Mask
#define CAN_F6R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F6R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F6R2_FB30                         CAN_F6R2_FB30_Mask
#define CAN_F6R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F6R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F6R2_FB31                         CAN_F6R2_FB31_Mask

/************************************* CAN->F7R1  ***************************************/
#define CAN_F7R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F7R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F7R1_FB0                          CAN_F7R1_FB0_Mask
#define CAN_F7R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F7R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F7R1_FB1                          CAN_F7R1_FB1_Mask
#define CAN_F7R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F7R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F7R1_FB2                          CAN_F7R1_FB2_Mask
#define CAN_F7R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F7R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F7R1_FB3                          CAN_F7R1_FB3_Mask
#define CAN_F7R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F7R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F7R1_FB4                          CAN_F7R1_FB4_Mask
#define CAN_F7R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F7R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F7R1_FB5                          CAN_F7R1_FB5_Mask
#define CAN_F7R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F7R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F7R1_FB6                          CAN_F7R1_FB6_Mask
#define CAN_F7R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F7R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F7R1_FB7                          CAN_F7R1_FB7_Mask
#define CAN_F7R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F7R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F7R1_FB8                          CAN_F7R1_FB8_Mask
#define CAN_F7R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F7R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F7R1_FB9                          CAN_F7R1_FB9_Mask
#define CAN_F7R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F7R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F7R1_FB10                         CAN_F7R1_FB10_Mask
#define CAN_F7R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F7R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F7R1_FB11                         CAN_F7R1_FB11_Mask
#define CAN_F7R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F7R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F7R1_FB12                         CAN_F7R1_FB12_Mask
#define CAN_F7R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F7R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F7R1_FB13                         CAN_F7R1_FB13_Mask
#define CAN_F7R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F7R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F7R1_FB14                         CAN_F7R1_FB14_Mask
#define CAN_F7R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F7R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F7R1_FB15                         CAN_F7R1_FB15_Mask
#define CAN_F7R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F7R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F7R1_FB16                         CAN_F7R1_FB16_Mask
#define CAN_F7R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F7R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F7R1_FB17                         CAN_F7R1_FB17_Mask
#define CAN_F7R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F7R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F7R1_FB18                         CAN_F7R1_FB18_Mask
#define CAN_F7R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F7R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F7R1_FB19                         CAN_F7R1_FB19_Mask
#define CAN_F7R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F7R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F7R1_FB20                         CAN_F7R1_FB20_Mask
#define CAN_F7R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F7R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F7R1_FB21                         CAN_F7R1_FB21_Mask
#define CAN_F7R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F7R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F7R1_FB22                         CAN_F7R1_FB22_Mask
#define CAN_F7R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F7R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F7R1_FB23                         CAN_F7R1_FB23_Mask
#define CAN_F7R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F7R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F7R1_FB24                         CAN_F7R1_FB24_Mask
#define CAN_F7R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F7R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F7R1_FB25                         CAN_F7R1_FB25_Mask
#define CAN_F7R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F7R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F7R1_FB26                         CAN_F7R1_FB26_Mask
#define CAN_F7R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F7R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F7R1_FB27                         CAN_F7R1_FB27_Mask
#define CAN_F7R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F7R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F7R1_FB28                         CAN_F7R1_FB28_Mask
#define CAN_F7R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F7R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F7R1_FB29                         CAN_F7R1_FB29_Mask
#define CAN_F7R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F7R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F7R1_FB30                         CAN_F7R1_FB30_Mask
#define CAN_F7R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F7R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F7R1_FB31                         CAN_F7R1_FB31_Mask

/************************************* CAN->F7R2  ***************************************/
#define CAN_F7R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F7R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F7R2_FB0                          CAN_F7R2_FB0_Mask
#define CAN_F7R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F7R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F7R2_FB1                          CAN_F7R2_FB1_Mask
#define CAN_F7R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F7R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F7R2_FB2                          CAN_F7R2_FB2_Mask
#define CAN_F7R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F7R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F7R2_FB3                          CAN_F7R2_FB3_Mask
#define CAN_F7R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F7R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F7R2_FB4                          CAN_F7R2_FB4_Mask
#define CAN_F7R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F7R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F7R2_FB5                          CAN_F7R2_FB5_Mask
#define CAN_F7R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F7R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F7R2_FB6                          CAN_F7R2_FB6_Mask
#define CAN_F7R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F7R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F7R2_FB7                          CAN_F7R2_FB7_Mask
#define CAN_F7R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F7R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F7R2_FB8                          CAN_F7R2_FB8_Mask
#define CAN_F7R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F7R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F7R2_FB9                          CAN_F7R2_FB9_Mask
#define CAN_F7R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F7R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F7R2_FB10                         CAN_F7R2_FB10_Mask
#define CAN_F7R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F7R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F7R2_FB11                         CAN_F7R2_FB11_Mask
#define CAN_F7R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F7R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F7R2_FB12                         CAN_F7R2_FB12_Mask
#define CAN_F7R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F7R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F7R2_FB13                         CAN_F7R2_FB13_Mask
#define CAN_F7R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F7R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F7R2_FB14                         CAN_F7R2_FB14_Mask
#define CAN_F7R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F7R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F7R2_FB15                         CAN_F7R2_FB15_Mask
#define CAN_F7R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F7R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F7R2_FB16                         CAN_F7R2_FB16_Mask
#define CAN_F7R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F7R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F7R2_FB17                         CAN_F7R2_FB17_Mask
#define CAN_F7R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F7R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F7R2_FB18                         CAN_F7R2_FB18_Mask
#define CAN_F7R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F7R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F7R2_FB19                         CAN_F7R2_FB19_Mask
#define CAN_F7R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F7R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F7R2_FB20                         CAN_F7R2_FB20_Mask
#define CAN_F7R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F7R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F7R2_FB21                         CAN_F7R2_FB21_Mask
#define CAN_F7R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F7R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F7R2_FB22                         CAN_F7R2_FB22_Mask
#define CAN_F7R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F7R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F7R2_FB23                         CAN_F7R2_FB23_Mask
#define CAN_F7R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F7R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F7R2_FB24                         CAN_F7R2_FB24_Mask
#define CAN_F7R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F7R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F7R2_FB25                         CAN_F7R2_FB25_Mask
#define CAN_F7R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F7R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F7R2_FB26                         CAN_F7R2_FB26_Mask
#define CAN_F7R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F7R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F7R2_FB27                         CAN_F7R2_FB27_Mask
#define CAN_F7R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F7R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F7R2_FB28                         CAN_F7R2_FB28_Mask
#define CAN_F7R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F7R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F7R2_FB29                         CAN_F7R2_FB29_Mask
#define CAN_F7R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F7R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F7R2_FB30                         CAN_F7R2_FB30_Mask
#define CAN_F7R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F7R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F7R2_FB31                         CAN_F7R2_FB31_Mask

/************************************* CAN->F8R1  ***************************************/
#define CAN_F8R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F8R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F8R1_FB0                          CAN_F8R1_FB0_Mask
#define CAN_F8R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F8R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F8R1_FB1                          CAN_F8R1_FB1_Mask
#define CAN_F8R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F8R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F8R1_FB2                          CAN_F8R1_FB2_Mask
#define CAN_F8R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F8R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F8R1_FB3                          CAN_F8R1_FB3_Mask
#define CAN_F8R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F8R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F8R1_FB4                          CAN_F8R1_FB4_Mask
#define CAN_F8R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F8R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F8R1_FB5                          CAN_F8R1_FB5_Mask
#define CAN_F8R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F8R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F8R1_FB6                          CAN_F8R1_FB6_Mask
#define CAN_F8R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F8R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F8R1_FB7                          CAN_F8R1_FB7_Mask
#define CAN_F8R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F8R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F8R1_FB8                          CAN_F8R1_FB8_Mask
#define CAN_F8R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F8R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F8R1_FB9                          CAN_F8R1_FB9_Mask
#define CAN_F8R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F8R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F8R1_FB10                         CAN_F8R1_FB10_Mask
#define CAN_F8R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F8R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F8R1_FB11                         CAN_F8R1_FB11_Mask
#define CAN_F8R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F8R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F8R1_FB12                         CAN_F8R1_FB12_Mask
#define CAN_F8R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F8R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F8R1_FB13                         CAN_F8R1_FB13_Mask
#define CAN_F8R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F8R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F8R1_FB14                         CAN_F8R1_FB14_Mask
#define CAN_F8R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F8R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F8R1_FB15                         CAN_F8R1_FB15_Mask
#define CAN_F8R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F8R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F8R1_FB16                         CAN_F8R1_FB16_Mask
#define CAN_F8R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F8R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F8R1_FB17                         CAN_F8R1_FB17_Mask
#define CAN_F8R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F8R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F8R1_FB18                         CAN_F8R1_FB18_Mask
#define CAN_F8R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F8R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F8R1_FB19                         CAN_F8R1_FB19_Mask
#define CAN_F8R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F8R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F8R1_FB20                         CAN_F8R1_FB20_Mask
#define CAN_F8R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F8R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F8R1_FB21                         CAN_F8R1_FB21_Mask
#define CAN_F8R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F8R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F8R1_FB22                         CAN_F8R1_FB22_Mask
#define CAN_F8R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F8R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F8R1_FB23                         CAN_F8R1_FB23_Mask
#define CAN_F8R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F8R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F8R1_FB24                         CAN_F8R1_FB24_Mask
#define CAN_F8R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F8R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F8R1_FB25                         CAN_F8R1_FB25_Mask
#define CAN_F8R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F8R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F8R1_FB26                         CAN_F8R1_FB26_Mask
#define CAN_F8R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F8R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F8R1_FB27                         CAN_F8R1_FB27_Mask
#define CAN_F8R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F8R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F8R1_FB28                         CAN_F8R1_FB28_Mask
#define CAN_F8R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F8R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F8R1_FB29                         CAN_F8R1_FB29_Mask
#define CAN_F8R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F8R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F8R1_FB30                         CAN_F8R1_FB30_Mask
#define CAN_F8R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F8R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F8R1_FB31                         CAN_F8R1_FB31_Mask

/************************************* CAN->F8R2  ***************************************/
#define CAN_F8R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F8R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F8R2_FB0                          CAN_F8R2_FB0_Mask
#define CAN_F8R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F8R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F8R2_FB1                          CAN_F8R2_FB1_Mask
#define CAN_F8R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F8R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F8R2_FB2                          CAN_F8R2_FB2_Mask
#define CAN_F8R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F8R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F8R2_FB3                          CAN_F8R2_FB3_Mask
#define CAN_F8R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F8R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F8R2_FB4                          CAN_F8R2_FB4_Mask
#define CAN_F8R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F8R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F8R2_FB5                          CAN_F8R2_FB5_Mask
#define CAN_F8R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F8R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F8R2_FB6                          CAN_F8R2_FB6_Mask
#define CAN_F8R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F8R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F8R2_FB7                          CAN_F8R2_FB7_Mask
#define CAN_F8R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F8R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F8R2_FB8                          CAN_F8R2_FB8_Mask
#define CAN_F8R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F8R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F8R2_FB9                          CAN_F8R2_FB9_Mask
#define CAN_F8R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F8R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F8R2_FB10                         CAN_F8R2_FB10_Mask
#define CAN_F8R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F8R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F8R2_FB11                         CAN_F8R2_FB11_Mask
#define CAN_F8R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F8R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F8R2_FB12                         CAN_F8R2_FB12_Mask
#define CAN_F8R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F8R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F8R2_FB13                         CAN_F8R2_FB13_Mask
#define CAN_F8R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F8R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F8R2_FB14                         CAN_F8R2_FB14_Mask
#define CAN_F8R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F8R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F8R2_FB15                         CAN_F8R2_FB15_Mask
#define CAN_F8R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F8R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F8R2_FB16                         CAN_F8R2_FB16_Mask
#define CAN_F8R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F8R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F8R2_FB17                         CAN_F8R2_FB17_Mask
#define CAN_F8R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F8R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F8R2_FB18                         CAN_F8R2_FB18_Mask
#define CAN_F8R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F8R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F8R2_FB19                         CAN_F8R2_FB19_Mask
#define CAN_F8R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F8R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F8R2_FB20                         CAN_F8R2_FB20_Mask
#define CAN_F8R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F8R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F8R2_FB21                         CAN_F8R2_FB21_Mask
#define CAN_F8R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F8R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F8R2_FB22                         CAN_F8R2_FB22_Mask
#define CAN_F8R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F8R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F8R2_FB23                         CAN_F8R2_FB23_Mask
#define CAN_F8R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F8R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F8R2_FB24                         CAN_F8R2_FB24_Mask
#define CAN_F8R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F8R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F8R2_FB25                         CAN_F8R2_FB25_Mask
#define CAN_F8R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F8R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F8R2_FB26                         CAN_F8R2_FB26_Mask
#define CAN_F8R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F8R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F8R2_FB27                         CAN_F8R2_FB27_Mask
#define CAN_F8R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F8R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F8R2_FB28                         CAN_F8R2_FB28_Mask
#define CAN_F8R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F8R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F8R2_FB29                         CAN_F8R2_FB29_Mask
#define CAN_F8R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F8R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F8R2_FB30                         CAN_F8R2_FB30_Mask
#define CAN_F8R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F8R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F8R2_FB31                         CAN_F8R2_FB31_Mask

/************************************* CAN->F9R1  ***************************************/
#define CAN_F9R1_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F9R1_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F9R1_FB0                          CAN_F9R1_FB0_Mask
#define CAN_F9R1_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F9R1_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F9R1_FB1                          CAN_F9R1_FB1_Mask
#define CAN_F9R1_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F9R1_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F9R1_FB2                          CAN_F9R1_FB2_Mask
#define CAN_F9R1_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F9R1_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F9R1_FB3                          CAN_F9R1_FB3_Mask
#define CAN_F9R1_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F9R1_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F9R1_FB4                          CAN_F9R1_FB4_Mask
#define CAN_F9R1_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F9R1_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F9R1_FB5                          CAN_F9R1_FB5_Mask
#define CAN_F9R1_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F9R1_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F9R1_FB6                          CAN_F9R1_FB6_Mask
#define CAN_F9R1_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F9R1_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F9R1_FB7                          CAN_F9R1_FB7_Mask
#define CAN_F9R1_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F9R1_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F9R1_FB8                          CAN_F9R1_FB8_Mask
#define CAN_F9R1_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F9R1_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F9R1_FB9                          CAN_F9R1_FB9_Mask
#define CAN_F9R1_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F9R1_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F9R1_FB10                         CAN_F9R1_FB10_Mask
#define CAN_F9R1_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F9R1_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F9R1_FB11                         CAN_F9R1_FB11_Mask
#define CAN_F9R1_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F9R1_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F9R1_FB12                         CAN_F9R1_FB12_Mask
#define CAN_F9R1_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F9R1_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F9R1_FB13                         CAN_F9R1_FB13_Mask
#define CAN_F9R1_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F9R1_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F9R1_FB14                         CAN_F9R1_FB14_Mask
#define CAN_F9R1_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F9R1_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F9R1_FB15                         CAN_F9R1_FB15_Mask
#define CAN_F9R1_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F9R1_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F9R1_FB16                         CAN_F9R1_FB16_Mask
#define CAN_F9R1_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F9R1_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F9R1_FB17                         CAN_F9R1_FB17_Mask
#define CAN_F9R1_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F9R1_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F9R1_FB18                         CAN_F9R1_FB18_Mask
#define CAN_F9R1_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F9R1_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F9R1_FB19                         CAN_F9R1_FB19_Mask
#define CAN_F9R1_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F9R1_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F9R1_FB20                         CAN_F9R1_FB20_Mask
#define CAN_F9R1_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F9R1_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F9R1_FB21                         CAN_F9R1_FB21_Mask
#define CAN_F9R1_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F9R1_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F9R1_FB22                         CAN_F9R1_FB22_Mask
#define CAN_F9R1_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F9R1_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F9R1_FB23                         CAN_F9R1_FB23_Mask
#define CAN_F9R1_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F9R1_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F9R1_FB24                         CAN_F9R1_FB24_Mask
#define CAN_F9R1_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F9R1_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F9R1_FB25                         CAN_F9R1_FB25_Mask
#define CAN_F9R1_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F9R1_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F9R1_FB26                         CAN_F9R1_FB26_Mask
#define CAN_F9R1_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F9R1_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F9R1_FB27                         CAN_F9R1_FB27_Mask
#define CAN_F9R1_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F9R1_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F9R1_FB28                         CAN_F9R1_FB28_Mask
#define CAN_F9R1_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F9R1_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F9R1_FB29                         CAN_F9R1_FB29_Mask
#define CAN_F9R1_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F9R1_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F9R1_FB30                         CAN_F9R1_FB30_Mask
#define CAN_F9R1_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F9R1_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F9R1_FB31                         CAN_F9R1_FB31_Mask

/************************************* CAN->F9R2  ***************************************/
#define CAN_F9R2_FB0_Pos                      ((uint32_t)0)                     /* Filter bits */
#define CAN_F9R2_FB0_Mask                     (((uint32_t)0x01) << 0)
#define CAN_F9R2_FB0                          CAN_F9R2_FB0_Mask
#define CAN_F9R2_FB1_Pos                      ((uint32_t)1)                     /* Filter bits */
#define CAN_F9R2_FB1_Mask                     (((uint32_t)0x01) << 1)
#define CAN_F9R2_FB1                          CAN_F9R2_FB1_Mask
#define CAN_F9R2_FB2_Pos                      ((uint32_t)2)                     /* Filter bits */
#define CAN_F9R2_FB2_Mask                     (((uint32_t)0x01) << 2)
#define CAN_F9R2_FB2                          CAN_F9R2_FB2_Mask
#define CAN_F9R2_FB3_Pos                      ((uint32_t)3)                     /* Filter bits */
#define CAN_F9R2_FB3_Mask                     (((uint32_t)0x01) << 3)
#define CAN_F9R2_FB3                          CAN_F9R2_FB3_Mask
#define CAN_F9R2_FB4_Pos                      ((uint32_t)4)                     /* Filter bits */
#define CAN_F9R2_FB4_Mask                     (((uint32_t)0x01) << 4)
#define CAN_F9R2_FB4                          CAN_F9R2_FB4_Mask
#define CAN_F9R2_FB5_Pos                      ((uint32_t)5)                     /* Filter bits */
#define CAN_F9R2_FB5_Mask                     (((uint32_t)0x01) << 5)
#define CAN_F9R2_FB5                          CAN_F9R2_FB5_Mask
#define CAN_F9R2_FB6_Pos                      ((uint32_t)6)                     /* Filter bits */
#define CAN_F9R2_FB6_Mask                     (((uint32_t)0x01) << 6)
#define CAN_F9R2_FB6                          CAN_F9R2_FB6_Mask
#define CAN_F9R2_FB7_Pos                      ((uint32_t)7)                     /* Filter bits */
#define CAN_F9R2_FB7_Mask                     (((uint32_t)0x01) << 7)
#define CAN_F9R2_FB7                          CAN_F9R2_FB7_Mask
#define CAN_F9R2_FB8_Pos                      ((uint32_t)8)                     /* Filter bits */
#define CAN_F9R2_FB8_Mask                     (((uint32_t)0x01) << 8)
#define CAN_F9R2_FB8                          CAN_F9R2_FB8_Mask
#define CAN_F9R2_FB9_Pos                      ((uint32_t)9)                     /* Filter bits */
#define CAN_F9R2_FB9_Mask                     (((uint32_t)0x01) << 9)
#define CAN_F9R2_FB9                          CAN_F9R2_FB9_Mask
#define CAN_F9R2_FB10_Pos                     ((uint32_t)10)                    /* Filter bits */
#define CAN_F9R2_FB10_Mask                    (((uint32_t)0x01) << 10)
#define CAN_F9R2_FB10                         CAN_F9R2_FB10_Mask
#define CAN_F9R2_FB11_Pos                     ((uint32_t)11)                    /* Filter bits */
#define CAN_F9R2_FB11_Mask                    (((uint32_t)0x01) << 11)
#define CAN_F9R2_FB11                         CAN_F9R2_FB11_Mask
#define CAN_F9R2_FB12_Pos                     ((uint32_t)12)                    /* Filter bits */
#define CAN_F9R2_FB12_Mask                    (((uint32_t)0x01) << 12)
#define CAN_F9R2_FB12                         CAN_F9R2_FB12_Mask
#define CAN_F9R2_FB13_Pos                     ((uint32_t)13)                    /* Filter bits */
#define CAN_F9R2_FB13_Mask                    (((uint32_t)0x01) << 13)
#define CAN_F9R2_FB13                         CAN_F9R2_FB13_Mask
#define CAN_F9R2_FB14_Pos                     ((uint32_t)14)                    /* Filter bits */
#define CAN_F9R2_FB14_Mask                    (((uint32_t)0x01) << 14)
#define CAN_F9R2_FB14                         CAN_F9R2_FB14_Mask
#define CAN_F9R2_FB15_Pos                     ((uint32_t)15)                    /* Filter bits */
#define CAN_F9R2_FB15_Mask                    (((uint32_t)0x01) << 15)
#define CAN_F9R2_FB15                         CAN_F9R2_FB15_Mask
#define CAN_F9R2_FB16_Pos                     ((uint32_t)16)                    /* Filter bits */
#define CAN_F9R2_FB16_Mask                    (((uint32_t)0x01) << 16)
#define CAN_F9R2_FB16                         CAN_F9R2_FB16_Mask
#define CAN_F9R2_FB17_Pos                     ((uint32_t)17)                    /* Filter bits */
#define CAN_F9R2_FB17_Mask                    (((uint32_t)0x01) << 17)
#define CAN_F9R2_FB17                         CAN_F9R2_FB17_Mask
#define CAN_F9R2_FB18_Pos                     ((uint32_t)18)                    /* Filter bits */
#define CAN_F9R2_FB18_Mask                    (((uint32_t)0x01) << 18)
#define CAN_F9R2_FB18                         CAN_F9R2_FB18_Mask
#define CAN_F9R2_FB19_Pos                     ((uint32_t)19)                    /* Filter bits */
#define CAN_F9R2_FB19_Mask                    (((uint32_t)0x01) << 19)
#define CAN_F9R2_FB19                         CAN_F9R2_FB19_Mask
#define CAN_F9R2_FB20_Pos                     ((uint32_t)20)                    /* Filter bits */
#define CAN_F9R2_FB20_Mask                    (((uint32_t)0x01) << 20)
#define CAN_F9R2_FB20                         CAN_F9R2_FB20_Mask
#define CAN_F9R2_FB21_Pos                     ((uint32_t)21)                    /* Filter bits */
#define CAN_F9R2_FB21_Mask                    (((uint32_t)0x01) << 21)
#define CAN_F9R2_FB21                         CAN_F9R2_FB21_Mask
#define CAN_F9R2_FB22_Pos                     ((uint32_t)22)                    /* Filter bits */
#define CAN_F9R2_FB22_Mask                    (((uint32_t)0x01) << 22)
#define CAN_F9R2_FB22                         CAN_F9R2_FB22_Mask
#define CAN_F9R2_FB23_Pos                     ((uint32_t)23)                    /* Filter bits */
#define CAN_F9R2_FB23_Mask                    (((uint32_t)0x01) << 23)
#define CAN_F9R2_FB23                         CAN_F9R2_FB23_Mask
#define CAN_F9R2_FB24_Pos                     ((uint32_t)24)                    /* Filter bits */
#define CAN_F9R2_FB24_Mask                    (((uint32_t)0x01) << 24)
#define CAN_F9R2_FB24                         CAN_F9R2_FB24_Mask
#define CAN_F9R2_FB25_Pos                     ((uint32_t)25)                    /* Filter bits */
#define CAN_F9R2_FB25_Mask                    (((uint32_t)0x01) << 25)
#define CAN_F9R2_FB25                         CAN_F9R2_FB25_Mask
#define CAN_F9R2_FB26_Pos                     ((uint32_t)26)                    /* Filter bits */
#define CAN_F9R2_FB26_Mask                    (((uint32_t)0x01) << 26)
#define CAN_F9R2_FB26                         CAN_F9R2_FB26_Mask
#define CAN_F9R2_FB27_Pos                     ((uint32_t)27)                    /* Filter bits */
#define CAN_F9R2_FB27_Mask                    (((uint32_t)0x01) << 27)
#define CAN_F9R2_FB27                         CAN_F9R2_FB27_Mask
#define CAN_F9R2_FB28_Pos                     ((uint32_t)28)                    /* Filter bits */
#define CAN_F9R2_FB28_Mask                    (((uint32_t)0x01) << 28)
#define CAN_F9R2_FB28                         CAN_F9R2_FB28_Mask
#define CAN_F9R2_FB29_Pos                     ((uint32_t)29)                    /* Filter bits */
#define CAN_F9R2_FB29_Mask                    (((uint32_t)0x01) << 29)
#define CAN_F9R2_FB29                         CAN_F9R2_FB29_Mask
#define CAN_F9R2_FB30_Pos                     ((uint32_t)30)                    /* Filter bits */
#define CAN_F9R2_FB30_Mask                    (((uint32_t)0x01) << 30)
#define CAN_F9R2_FB30                         CAN_F9R2_FB30_Mask
#define CAN_F9R2_FB31_Pos                     ((uint32_t)31)                    /* Filter bits */
#define CAN_F9R2_FB31_Mask                    (((uint32_t)0x01) << 31)
#define CAN_F9R2_FB31                         CAN_F9R2_FB31_Mask

/************************************* CAN->F10R1  **************************************/
#define CAN_F10R1_FB0_Pos                     ((uint32_t)0)                     /* Filter bits */
#define CAN_F10R1_FB0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_F10R1_FB0                         CAN_F10R1_FB0_Mask
#define CAN_F10R1_FB1_Pos                     ((uint32_t)1)                     /* Filter bits */
#define CAN_F10R1_FB1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_F10R1_FB1                         CAN_F10R1_FB1_Mask
#define CAN_F10R1_FB2_Pos                     ((uint32_t)2)                     /* Filter bits */
#define CAN_F10R1_FB2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_F10R1_FB2                         CAN_F10R1_FB2_Mask
#define CAN_F10R1_FB3_Pos                     ((uint32_t)3)                     /* Filter bits */
#define CAN_F10R1_FB3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_F10R1_FB3                         CAN_F10R1_FB3_Mask
#define CAN_F10R1_FB4_Pos                     ((uint32_t)4)                     /* Filter bits */
#define CAN_F10R1_FB4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_F10R1_FB4                         CAN_F10R1_FB4_Mask
#define CAN_F10R1_FB5_Pos                     ((uint32_t)5)                     /* Filter bits */
#define CAN_F10R1_FB5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_F10R1_FB5                         CAN_F10R1_FB5_Mask
#define CAN_F10R1_FB6_Pos                     ((uint32_t)6)                     /* Filter bits */
#define CAN_F10R1_FB6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_F10R1_FB6                         CAN_F10R1_FB6_Mask
#define CAN_F10R1_FB7_Pos                     ((uint32_t)7)                     /* Filter bits */
#define CAN_F10R1_FB7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_F10R1_FB7                         CAN_F10R1_FB7_Mask
#define CAN_F10R1_FB8_Pos                     ((uint32_t)8)                     /* Filter bits */
#define CAN_F10R1_FB8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_F10R1_FB8                         CAN_F10R1_FB8_Mask
#define CAN_F10R1_FB9_Pos                     ((uint32_t)9)                     /* Filter bits */
#define CAN_F10R1_FB9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_F10R1_FB9                         CAN_F10R1_FB9_Mask
#define CAN_F10R1_FB10_Pos                    ((uint32_t)10)                    /* Filter bits */
#define CAN_F10R1_FB10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_F10R1_FB10                        CAN_F10R1_FB10_Mask
#define CAN_F10R1_FB11_Pos                    ((uint32_t)11)                    /* Filter bits */
#define CAN_F10R1_FB11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_F10R1_FB11                        CAN_F10R1_FB11_Mask
#define CAN_F10R1_FB12_Pos                    ((uint32_t)12)                    /* Filter bits */
#define CAN_F10R1_FB12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_F10R1_FB12                        CAN_F10R1_FB12_Mask
#define CAN_F10R1_FB13_Pos                    ((uint32_t)13)                    /* Filter bits */
#define CAN_F10R1_FB13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_F10R1_FB13                        CAN_F10R1_FB13_Mask
#define CAN_F10R1_FB14_Pos                    ((uint32_t)14)                    /* Filter bits */
#define CAN_F10R1_FB14_Mask                   (((uint32_t)0x01) << 14)
#define CAN_F10R1_FB14                        CAN_F10R1_FB14_Mask
#define CAN_F10R1_FB15_Pos                    ((uint32_t)15)                    /* Filter bits */
#define CAN_F10R1_FB15_Mask                   (((uint32_t)0x01) << 15)
#define CAN_F10R1_FB15                        CAN_F10R1_FB15_Mask
#define CAN_F10R1_FB16_Pos                    ((uint32_t)16)                    /* Filter bits */
#define CAN_F10R1_FB16_Mask                   (((uint32_t)0x01) << 16)
#define CAN_F10R1_FB16                        CAN_F10R1_FB16_Mask
#define CAN_F10R1_FB17_Pos                    ((uint32_t)17)                    /* Filter bits */
#define CAN_F10R1_FB17_Mask                   (((uint32_t)0x01) << 17)
#define CAN_F10R1_FB17                        CAN_F10R1_FB17_Mask
#define CAN_F10R1_FB18_Pos                    ((uint32_t)18)                    /* Filter bits */
#define CAN_F10R1_FB18_Mask                   (((uint32_t)0x01) << 18)
#define CAN_F10R1_FB18                        CAN_F10R1_FB18_Mask
#define CAN_F10R1_FB19_Pos                    ((uint32_t)19)                    /* Filter bits */
#define CAN_F10R1_FB19_Mask                   (((uint32_t)0x01) << 19)
#define CAN_F10R1_FB19                        CAN_F10R1_FB19_Mask
#define CAN_F10R1_FB20_Pos                    ((uint32_t)20)                    /* Filter bits */
#define CAN_F10R1_FB20_Mask                   (((uint32_t)0x01) << 20)
#define CAN_F10R1_FB20                        CAN_F10R1_FB20_Mask
#define CAN_F10R1_FB21_Pos                    ((uint32_t)21)                    /* Filter bits */
#define CAN_F10R1_FB21_Mask                   (((uint32_t)0x01) << 21)
#define CAN_F10R1_FB21                        CAN_F10R1_FB21_Mask
#define CAN_F10R1_FB22_Pos                    ((uint32_t)22)                    /* Filter bits */
#define CAN_F10R1_FB22_Mask                   (((uint32_t)0x01) << 22)
#define CAN_F10R1_FB22                        CAN_F10R1_FB22_Mask
#define CAN_F10R1_FB23_Pos                    ((uint32_t)23)                    /* Filter bits */
#define CAN_F10R1_FB23_Mask                   (((uint32_t)0x01) << 23)
#define CAN_F10R1_FB23                        CAN_F10R1_FB23_Mask
#define CAN_F10R1_FB24_Pos                    ((uint32_t)24)                    /* Filter bits */
#define CAN_F10R1_FB24_Mask                   (((uint32_t)0x01) << 24)
#define CAN_F10R1_FB24                        CAN_F10R1_FB24_Mask
#define CAN_F10R1_FB25_Pos                    ((uint32_t)25)                    /* Filter bits */
#define CAN_F10R1_FB25_Mask                   (((uint32_t)0x01) << 25)
#define CAN_F10R1_FB25                        CAN_F10R1_FB25_Mask
#define CAN_F10R1_FB26_Pos                    ((uint32_t)26)                    /* Filter bits */
#define CAN_F10R1_FB26_Mask                   (((uint32_t)0x01) << 26)
#define CAN_F10R1_FB26                        CAN_F10R1_FB26_Mask
#define CAN_F10R1_FB27_Pos                    ((uint32_t)27)                    /* Filter bits */
#define CAN_F10R1_FB27_Mask                   (((uint32_t)0x01) << 27)
#define CAN_F10R1_FB27                        CAN_F10R1_FB27_Mask
#define CAN_F10R1_FB28_Pos                    ((uint32_t)28)                    /* Filter bits */
#define CAN_F10R1_FB28_Mask                   (((uint32_t)0x01) << 28)
#define CAN_F10R1_FB28                        CAN_F10R1_FB28_Mask
#define CAN_F10R1_FB29_Pos                    ((uint32_t)29)                    /* Filter bits */
#define CAN_F10R1_FB29_Mask                   (((uint32_t)0x01) << 29)
#define CAN_F10R1_FB29                        CAN_F10R1_FB29_Mask
#define CAN_F10R1_FB30_Pos                    ((uint32_t)30)                    /* Filter bits */
#define CAN_F10R1_FB30_Mask                   (((uint32_t)0x01) << 30)
#define CAN_F10R1_FB30                        CAN_F10R1_FB30_Mask
#define CAN_F10R1_FB31_Pos                    ((uint32_t)31)                    /* Filter bits */
#define CAN_F10R1_FB31_Mask                   (((uint32_t)0x01) << 31)
#define CAN_F10R1_FB31                        CAN_F10R1_FB31_Mask

/************************************* CAN->F10R2  **************************************/
#define CAN_F10R2_FB0_Pos                     ((uint32_t)0)                     /* Filter bits */
#define CAN_F10R2_FB0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_F10R2_FB0                         CAN_F10R2_FB0_Mask
#define CAN_F10R2_FB1_Pos                     ((uint32_t)1)                     /* Filter bits */
#define CAN_F10R2_FB1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_F10R2_FB1                         CAN_F10R2_FB1_Mask
#define CAN_F10R2_FB2_Pos                     ((uint32_t)2)                     /* Filter bits */
#define CAN_F10R2_FB2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_F10R2_FB2                         CAN_F10R2_FB2_Mask
#define CAN_F10R2_FB3_Pos                     ((uint32_t)3)                     /* Filter bits */
#define CAN_F10R2_FB3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_F10R2_FB3                         CAN_F10R2_FB3_Mask
#define CAN_F10R2_FB4_Pos                     ((uint32_t)4)                     /* Filter bits */
#define CAN_F10R2_FB4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_F10R2_FB4                         CAN_F10R2_FB4_Mask
#define CAN_F10R2_FB5_Pos                     ((uint32_t)5)                     /* Filter bits */
#define CAN_F10R2_FB5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_F10R2_FB5                         CAN_F10R2_FB5_Mask
#define CAN_F10R2_FB6_Pos                     ((uint32_t)6)                     /* Filter bits */
#define CAN_F10R2_FB6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_F10R2_FB6                         CAN_F10R2_FB6_Mask
#define CAN_F10R2_FB7_Pos                     ((uint32_t)7)                     /* Filter bits */
#define CAN_F10R2_FB7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_F10R2_FB7                         CAN_F10R2_FB7_Mask
#define CAN_F10R2_FB8_Pos                     ((uint32_t)8)                     /* Filter bits */
#define CAN_F10R2_FB8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_F10R2_FB8                         CAN_F10R2_FB8_Mask
#define CAN_F10R2_FB9_Pos                     ((uint32_t)9)                     /* Filter bits */
#define CAN_F10R2_FB9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_F10R2_FB9                         CAN_F10R2_FB9_Mask
#define CAN_F10R2_FB10_Pos                    ((uint32_t)10)                    /* Filter bits */
#define CAN_F10R2_FB10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_F10R2_FB10                        CAN_F10R2_FB10_Mask
#define CAN_F10R2_FB11_Pos                    ((uint32_t)11)                    /* Filter bits */
#define CAN_F10R2_FB11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_F10R2_FB11                        CAN_F10R2_FB11_Mask
#define CAN_F10R2_FB12_Pos                    ((uint32_t)12)                    /* Filter bits */
#define CAN_F10R2_FB12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_F10R2_FB12                        CAN_F10R2_FB12_Mask
#define CAN_F10R2_FB13_Pos                    ((uint32_t)13)                    /* Filter bits */
#define CAN_F10R2_FB13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_F10R2_FB13                        CAN_F10R2_FB13_Mask
#define CAN_F10R2_FB14_Pos                    ((uint32_t)14)                    /* Filter bits */
#define CAN_F10R2_FB14_Mask                   (((uint32_t)0x01) << 14)
#define CAN_F10R2_FB14                        CAN_F10R2_FB14_Mask
#define CAN_F10R2_FB15_Pos                    ((uint32_t)15)                    /* Filter bits */
#define CAN_F10R2_FB15_Mask                   (((uint32_t)0x01) << 15)
#define CAN_F10R2_FB15                        CAN_F10R2_FB15_Mask
#define CAN_F10R2_FB16_Pos                    ((uint32_t)16)                    /* Filter bits */
#define CAN_F10R2_FB16_Mask                   (((uint32_t)0x01) << 16)
#define CAN_F10R2_FB16                        CAN_F10R2_FB16_Mask
#define CAN_F10R2_FB17_Pos                    ((uint32_t)17)                    /* Filter bits */
#define CAN_F10R2_FB17_Mask                   (((uint32_t)0x01) << 17)
#define CAN_F10R2_FB17                        CAN_F10R2_FB17_Mask
#define CAN_F10R2_FB18_Pos                    ((uint32_t)18)                    /* Filter bits */
#define CAN_F10R2_FB18_Mask                   (((uint32_t)0x01) << 18)
#define CAN_F10R2_FB18                        CAN_F10R2_FB18_Mask
#define CAN_F10R2_FB19_Pos                    ((uint32_t)19)                    /* Filter bits */
#define CAN_F10R2_FB19_Mask                   (((uint32_t)0x01) << 19)
#define CAN_F10R2_FB19                        CAN_F10R2_FB19_Mask
#define CAN_F10R2_FB20_Pos                    ((uint32_t)20)                    /* Filter bits */
#define CAN_F10R2_FB20_Mask                   (((uint32_t)0x01) << 20)
#define CAN_F10R2_FB20                        CAN_F10R2_FB20_Mask
#define CAN_F10R2_FB21_Pos                    ((uint32_t)21)                    /* Filter bits */
#define CAN_F10R2_FB21_Mask                   (((uint32_t)0x01) << 21)
#define CAN_F10R2_FB21                        CAN_F10R2_FB21_Mask
#define CAN_F10R2_FB22_Pos                    ((uint32_t)22)                    /* Filter bits */
#define CAN_F10R2_FB22_Mask                   (((uint32_t)0x01) << 22)
#define CAN_F10R2_FB22                        CAN_F10R2_FB22_Mask
#define CAN_F10R2_FB23_Pos                    ((uint32_t)23)                    /* Filter bits */
#define CAN_F10R2_FB23_Mask                   (((uint32_t)0x01) << 23)
#define CAN_F10R2_FB23                        CAN_F10R2_FB23_Mask
#define CAN_F10R2_FB24_Pos                    ((uint32_t)24)                    /* Filter bits */
#define CAN_F10R2_FB24_Mask                   (((uint32_t)0x01) << 24)
#define CAN_F10R2_FB24                        CAN_F10R2_FB24_Mask
#define CAN_F10R2_FB25_Pos                    ((uint32_t)25)                    /* Filter bits */
#define CAN_F10R2_FB25_Mask                   (((uint32_t)0x01) << 25)
#define CAN_F10R2_FB25                        CAN_F10R2_FB25_Mask
#define CAN_F10R2_FB26_Pos                    ((uint32_t)26)                    /* Filter bits */
#define CAN_F10R2_FB26_Mask                   (((uint32_t)0x01) << 26)
#define CAN_F10R2_FB26                        CAN_F10R2_FB26_Mask
#define CAN_F10R2_FB27_Pos                    ((uint32_t)27)                    /* Filter bits */
#define CAN_F10R2_FB27_Mask                   (((uint32_t)0x01) << 27)
#define CAN_F10R2_FB27                        CAN_F10R2_FB27_Mask
#define CAN_F10R2_FB28_Pos                    ((uint32_t)28)                    /* Filter bits */
#define CAN_F10R2_FB28_Mask                   (((uint32_t)0x01) << 28)
#define CAN_F10R2_FB28                        CAN_F10R2_FB28_Mask
#define CAN_F10R2_FB29_Pos                    ((uint32_t)29)                    /* Filter bits */
#define CAN_F10R2_FB29_Mask                   (((uint32_t)0x01) << 29)
#define CAN_F10R2_FB29                        CAN_F10R2_FB29_Mask
#define CAN_F10R2_FB30_Pos                    ((uint32_t)30)                    /* Filter bits */
#define CAN_F10R2_FB30_Mask                   (((uint32_t)0x01) << 30)
#define CAN_F10R2_FB30                        CAN_F10R2_FB30_Mask
#define CAN_F10R2_FB31_Pos                    ((uint32_t)31)                    /* Filter bits */
#define CAN_F10R2_FB31_Mask                   (((uint32_t)0x01) << 31)
#define CAN_F10R2_FB31                        CAN_F10R2_FB31_Mask

/************************************* CAN->F11R1  **************************************/
#define CAN_F11R1_FB0_Pos                     ((uint32_t)0)                     /* Filter bits */
#define CAN_F11R1_FB0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_F11R1_FB0                         CAN_F11R1_FB0_Mask
#define CAN_F11R1_FB1_Pos                     ((uint32_t)1)                     /* Filter bits */
#define CAN_F11R1_FB1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_F11R1_FB1                         CAN_F11R1_FB1_Mask
#define CAN_F11R1_FB2_Pos                     ((uint32_t)2)                     /* Filter bits */
#define CAN_F11R1_FB2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_F11R1_FB2                         CAN_F11R1_FB2_Mask
#define CAN_F11R1_FB3_Pos                     ((uint32_t)3)                     /* Filter bits */
#define CAN_F11R1_FB3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_F11R1_FB3                         CAN_F11R1_FB3_Mask
#define CAN_F11R1_FB4_Pos                     ((uint32_t)4)                     /* Filter bits */
#define CAN_F11R1_FB4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_F11R1_FB4                         CAN_F11R1_FB4_Mask
#define CAN_F11R1_FB5_Pos                     ((uint32_t)5)                     /* Filter bits */
#define CAN_F11R1_FB5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_F11R1_FB5                         CAN_F11R1_FB5_Mask
#define CAN_F11R1_FB6_Pos                     ((uint32_t)6)                     /* Filter bits */
#define CAN_F11R1_FB6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_F11R1_FB6                         CAN_F11R1_FB6_Mask
#define CAN_F11R1_FB7_Pos                     ((uint32_t)7)                     /* Filter bits */
#define CAN_F11R1_FB7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_F11R1_FB7                         CAN_F11R1_FB7_Mask
#define CAN_F11R1_FB8_Pos                     ((uint32_t)8)                     /* Filter bits */
#define CAN_F11R1_FB8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_F11R1_FB8                         CAN_F11R1_FB8_Mask
#define CAN_F11R1_FB9_Pos                     ((uint32_t)9)                     /* Filter bits */
#define CAN_F11R1_FB9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_F11R1_FB9                         CAN_F11R1_FB9_Mask
#define CAN_F11R1_FB10_Pos                    ((uint32_t)10)                    /* Filter bits */
#define CAN_F11R1_FB10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_F11R1_FB10                        CAN_F11R1_FB10_Mask
#define CAN_F11R1_FB11_Pos                    ((uint32_t)11)                    /* Filter bits */
#define CAN_F11R1_FB11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_F11R1_FB11                        CAN_F11R1_FB11_Mask
#define CAN_F11R1_FB12_Pos                    ((uint32_t)12)                    /* Filter bits */
#define CAN_F11R1_FB12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_F11R1_FB12                        CAN_F11R1_FB12_Mask
#define CAN_F11R1_FB13_Pos                    ((uint32_t)13)                    /* Filter bits */
#define CAN_F11R1_FB13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_F11R1_FB13                        CAN_F11R1_FB13_Mask
#define CAN_F11R1_FB14_Pos                    ((uint32_t)14)                    /* Filter bits */
#define CAN_F11R1_FB14_Mask                   (((uint32_t)0x01) << 14)
#define CAN_F11R1_FB14                        CAN_F11R1_FB14_Mask
#define CAN_F11R1_FB15_Pos                    ((uint32_t)15)                    /* Filter bits */
#define CAN_F11R1_FB15_Mask                   (((uint32_t)0x01) << 15)
#define CAN_F11R1_FB15                        CAN_F11R1_FB15_Mask
#define CAN_F11R1_FB16_Pos                    ((uint32_t)16)                    /* Filter bits */
#define CAN_F11R1_FB16_Mask                   (((uint32_t)0x01) << 16)
#define CAN_F11R1_FB16                        CAN_F11R1_FB16_Mask
#define CAN_F11R1_FB17_Pos                    ((uint32_t)17)                    /* Filter bits */
#define CAN_F11R1_FB17_Mask                   (((uint32_t)0x01) << 17)
#define CAN_F11R1_FB17                        CAN_F11R1_FB17_Mask
#define CAN_F11R1_FB18_Pos                    ((uint32_t)18)                    /* Filter bits */
#define CAN_F11R1_FB18_Mask                   (((uint32_t)0x01) << 18)
#define CAN_F11R1_FB18                        CAN_F11R1_FB18_Mask
#define CAN_F11R1_FB19_Pos                    ((uint32_t)19)                    /* Filter bits */
#define CAN_F11R1_FB19_Mask                   (((uint32_t)0x01) << 19)
#define CAN_F11R1_FB19                        CAN_F11R1_FB19_Mask
#define CAN_F11R1_FB20_Pos                    ((uint32_t)20)                    /* Filter bits */
#define CAN_F11R1_FB20_Mask                   (((uint32_t)0x01) << 20)
#define CAN_F11R1_FB20                        CAN_F11R1_FB20_Mask
#define CAN_F11R1_FB21_Pos                    ((uint32_t)21)                    /* Filter bits */
#define CAN_F11R1_FB21_Mask                   (((uint32_t)0x01) << 21)
#define CAN_F11R1_FB21                        CAN_F11R1_FB21_Mask
#define CAN_F11R1_FB22_Pos                    ((uint32_t)22)                    /* Filter bits */
#define CAN_F11R1_FB22_Mask                   (((uint32_t)0x01) << 22)
#define CAN_F11R1_FB22                        CAN_F11R1_FB22_Mask
#define CAN_F11R1_FB23_Pos                    ((uint32_t)23)                    /* Filter bits */
#define CAN_F11R1_FB23_Mask                   (((uint32_t)0x01) << 23)
#define CAN_F11R1_FB23                        CAN_F11R1_FB23_Mask
#define CAN_F11R1_FB24_Pos                    ((uint32_t)24)                    /* Filter bits */
#define CAN_F11R1_FB24_Mask                   (((uint32_t)0x01) << 24)
#define CAN_F11R1_FB24                        CAN_F11R1_FB24_Mask
#define CAN_F11R1_FB25_Pos                    ((uint32_t)25)                    /* Filter bits */
#define CAN_F11R1_FB25_Mask                   (((uint32_t)0x01) << 25)
#define CAN_F11R1_FB25                        CAN_F11R1_FB25_Mask
#define CAN_F11R1_FB26_Pos                    ((uint32_t)26)                    /* Filter bits */
#define CAN_F11R1_FB26_Mask                   (((uint32_t)0x01) << 26)
#define CAN_F11R1_FB26                        CAN_F11R1_FB26_Mask
#define CAN_F11R1_FB27_Pos                    ((uint32_t)27)                    /* Filter bits */
#define CAN_F11R1_FB27_Mask                   (((uint32_t)0x01) << 27)
#define CAN_F11R1_FB27                        CAN_F11R1_FB27_Mask
#define CAN_F11R1_FB28_Pos                    ((uint32_t)28)                    /* Filter bits */
#define CAN_F11R1_FB28_Mask                   (((uint32_t)0x01) << 28)
#define CAN_F11R1_FB28                        CAN_F11R1_FB28_Mask
#define CAN_F11R1_FB29_Pos                    ((uint32_t)29)                    /* Filter bits */
#define CAN_F11R1_FB29_Mask                   (((uint32_t)0x01) << 29)
#define CAN_F11R1_FB29                        CAN_F11R1_FB29_Mask
#define CAN_F11R1_FB30_Pos                    ((uint32_t)30)                    /* Filter bits */
#define CAN_F11R1_FB30_Mask                   (((uint32_t)0x01) << 30)
#define CAN_F11R1_FB30                        CAN_F11R1_FB30_Mask
#define CAN_F11R1_FB31_Pos                    ((uint32_t)31)                    /* Filter bits */
#define CAN_F11R1_FB31_Mask                   (((uint32_t)0x01) << 31)
#define CAN_F11R1_FB31                        CAN_F11R1_FB31_Mask

/************************************* CAN->F11R2  **************************************/
#define CAN_F11R2_FB0_Pos                     ((uint32_t)0)                     /* Filter bits */
#define CAN_F11R2_FB0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_F11R2_FB0                         CAN_F11R2_FB0_Mask
#define CAN_F11R2_FB1_Pos                     ((uint32_t)1)                     /* Filter bits */
#define CAN_F11R2_FB1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_F11R2_FB1                         CAN_F11R2_FB1_Mask
#define CAN_F11R2_FB2_Pos                     ((uint32_t)2)                     /* Filter bits */
#define CAN_F11R2_FB2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_F11R2_FB2                         CAN_F11R2_FB2_Mask
#define CAN_F11R2_FB3_Pos                     ((uint32_t)3)                     /* Filter bits */
#define CAN_F11R2_FB3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_F11R2_FB3                         CAN_F11R2_FB3_Mask
#define CAN_F11R2_FB4_Pos                     ((uint32_t)4)                     /* Filter bits */
#define CAN_F11R2_FB4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_F11R2_FB4                         CAN_F11R2_FB4_Mask
#define CAN_F11R2_FB5_Pos                     ((uint32_t)5)                     /* Filter bits */
#define CAN_F11R2_FB5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_F11R2_FB5                         CAN_F11R2_FB5_Mask
#define CAN_F11R2_FB6_Pos                     ((uint32_t)6)                     /* Filter bits */
#define CAN_F11R2_FB6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_F11R2_FB6                         CAN_F11R2_FB6_Mask
#define CAN_F11R2_FB7_Pos                     ((uint32_t)7)                     /* Filter bits */
#define CAN_F11R2_FB7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_F11R2_FB7                         CAN_F11R2_FB7_Mask
#define CAN_F11R2_FB8_Pos                     ((uint32_t)8)                     /* Filter bits */
#define CAN_F11R2_FB8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_F11R2_FB8                         CAN_F11R2_FB8_Mask
#define CAN_F11R2_FB9_Pos                     ((uint32_t)9)                     /* Filter bits */
#define CAN_F11R2_FB9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_F11R2_FB9                         CAN_F11R2_FB9_Mask
#define CAN_F11R2_FB10_Pos                    ((uint32_t)10)                    /* Filter bits */
#define CAN_F11R2_FB10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_F11R2_FB10                        CAN_F11R2_FB10_Mask
#define CAN_F11R2_FB11_Pos                    ((uint32_t)11)                    /* Filter bits */
#define CAN_F11R2_FB11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_F11R2_FB11                        CAN_F11R2_FB11_Mask
#define CAN_F11R2_FB12_Pos                    ((uint32_t)12)                    /* Filter bits */
#define CAN_F11R2_FB12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_F11R2_FB12                        CAN_F11R2_FB12_Mask
#define CAN_F11R2_FB13_Pos                    ((uint32_t)13)                    /* Filter bits */
#define CAN_F11R2_FB13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_F11R2_FB13                        CAN_F11R2_FB13_Mask
#define CAN_F11R2_FB14_Pos                    ((uint32_t)14)                    /* Filter bits */
#define CAN_F11R2_FB14_Mask                   (((uint32_t)0x01) << 14)
#define CAN_F11R2_FB14                        CAN_F11R2_FB14_Mask
#define CAN_F11R2_FB15_Pos                    ((uint32_t)15)                    /* Filter bits */
#define CAN_F11R2_FB15_Mask                   (((uint32_t)0x01) << 15)
#define CAN_F11R2_FB15                        CAN_F11R2_FB15_Mask
#define CAN_F11R2_FB16_Pos                    ((uint32_t)16)                    /* Filter bits */
#define CAN_F11R2_FB16_Mask                   (((uint32_t)0x01) << 16)
#define CAN_F11R2_FB16                        CAN_F11R2_FB16_Mask
#define CAN_F11R2_FB17_Pos                    ((uint32_t)17)                    /* Filter bits */
#define CAN_F11R2_FB17_Mask                   (((uint32_t)0x01) << 17)
#define CAN_F11R2_FB17                        CAN_F11R2_FB17_Mask
#define CAN_F11R2_FB18_Pos                    ((uint32_t)18)                    /* Filter bits */
#define CAN_F11R2_FB18_Mask                   (((uint32_t)0x01) << 18)
#define CAN_F11R2_FB18                        CAN_F11R2_FB18_Mask
#define CAN_F11R2_FB19_Pos                    ((uint32_t)19)                    /* Filter bits */
#define CAN_F11R2_FB19_Mask                   (((uint32_t)0x01) << 19)
#define CAN_F11R2_FB19                        CAN_F11R2_FB19_Mask
#define CAN_F11R2_FB20_Pos                    ((uint32_t)20)                    /* Filter bits */
#define CAN_F11R2_FB20_Mask                   (((uint32_t)0x01) << 20)
#define CAN_F11R2_FB20                        CAN_F11R2_FB20_Mask
#define CAN_F11R2_FB21_Pos                    ((uint32_t)21)                    /* Filter bits */
#define CAN_F11R2_FB21_Mask                   (((uint32_t)0x01) << 21)
#define CAN_F11R2_FB21                        CAN_F11R2_FB21_Mask
#define CAN_F11R2_FB22_Pos                    ((uint32_t)22)                    /* Filter bits */
#define CAN_F11R2_FB22_Mask                   (((uint32_t)0x01) << 22)
#define CAN_F11R2_FB22                        CAN_F11R2_FB22_Mask
#define CAN_F11R2_FB23_Pos                    ((uint32_t)23)                    /* Filter bits */
#define CAN_F11R2_FB23_Mask                   (((uint32_t)0x01) << 23)
#define CAN_F11R2_FB23                        CAN_F11R2_FB23_Mask
#define CAN_F11R2_FB24_Pos                    ((uint32_t)24)                    /* Filter bits */
#define CAN_F11R2_FB24_Mask                   (((uint32_t)0x01) << 24)
#define CAN_F11R2_FB24                        CAN_F11R2_FB24_Mask
#define CAN_F11R2_FB25_Pos                    ((uint32_t)25)                    /* Filter bits */
#define CAN_F11R2_FB25_Mask                   (((uint32_t)0x01) << 25)
#define CAN_F11R2_FB25                        CAN_F11R2_FB25_Mask
#define CAN_F11R2_FB26_Pos                    ((uint32_t)26)                    /* Filter bits */
#define CAN_F11R2_FB26_Mask                   (((uint32_t)0x01) << 26)
#define CAN_F11R2_FB26                        CAN_F11R2_FB26_Mask
#define CAN_F11R2_FB27_Pos                    ((uint32_t)27)                    /* Filter bits */
#define CAN_F11R2_FB27_Mask                   (((uint32_t)0x01) << 27)
#define CAN_F11R2_FB27                        CAN_F11R2_FB27_Mask
#define CAN_F11R2_FB28_Pos                    ((uint32_t)28)                    /* Filter bits */
#define CAN_F11R2_FB28_Mask                   (((uint32_t)0x01) << 28)
#define CAN_F11R2_FB28                        CAN_F11R2_FB28_Mask
#define CAN_F11R2_FB29_Pos                    ((uint32_t)29)                    /* Filter bits */
#define CAN_F11R2_FB29_Mask                   (((uint32_t)0x01) << 29)
#define CAN_F11R2_FB29                        CAN_F11R2_FB29_Mask
#define CAN_F11R2_FB30_Pos                    ((uint32_t)30)                    /* Filter bits */
#define CAN_F11R2_FB30_Mask                   (((uint32_t)0x01) << 30)
#define CAN_F11R2_FB30                        CAN_F11R2_FB30_Mask
#define CAN_F11R2_FB31_Pos                    ((uint32_t)31)                    /* Filter bits */
#define CAN_F11R2_FB31_Mask                   (((uint32_t)0x01) << 31)
#define CAN_F11R2_FB31                        CAN_F11R2_FB31_Mask

/************************************* CAN->F12R1  **************************************/
#define CAN_F12R1_FB0_Pos                     ((uint32_t)0)                     /* Filter bits */
#define CAN_F12R1_FB0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_F12R1_FB0                         CAN_F12R1_FB0_Mask
#define CAN_F12R1_FB1_Pos                     ((uint32_t)1)                     /* Filter bits */
#define CAN_F12R1_FB1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_F12R1_FB1                         CAN_F12R1_FB1_Mask
#define CAN_F12R1_FB2_Pos                     ((uint32_t)2)                     /* Filter bits */
#define CAN_F12R1_FB2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_F12R1_FB2                         CAN_F12R1_FB2_Mask
#define CAN_F12R1_FB3_Pos                     ((uint32_t)3)                     /* Filter bits */
#define CAN_F12R1_FB3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_F12R1_FB3                         CAN_F12R1_FB3_Mask
#define CAN_F12R1_FB4_Pos                     ((uint32_t)4)                     /* Filter bits */
#define CAN_F12R1_FB4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_F12R1_FB4                         CAN_F12R1_FB4_Mask
#define CAN_F12R1_FB5_Pos                     ((uint32_t)5)                     /* Filter bits */
#define CAN_F12R1_FB5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_F12R1_FB5                         CAN_F12R1_FB5_Mask
#define CAN_F12R1_FB6_Pos                     ((uint32_t)6)                     /* Filter bits */
#define CAN_F12R1_FB6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_F12R1_FB6                         CAN_F12R1_FB6_Mask
#define CAN_F12R1_FB7_Pos                     ((uint32_t)7)                     /* Filter bits */
#define CAN_F12R1_FB7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_F12R1_FB7                         CAN_F12R1_FB7_Mask
#define CAN_F12R1_FB8_Pos                     ((uint32_t)8)                     /* Filter bits */
#define CAN_F12R1_FB8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_F12R1_FB8                         CAN_F12R1_FB8_Mask
#define CAN_F12R1_FB9_Pos                     ((uint32_t)9)                     /* Filter bits */
#define CAN_F12R1_FB9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_F12R1_FB9                         CAN_F12R1_FB9_Mask
#define CAN_F12R1_FB10_Pos                    ((uint32_t)10)                    /* Filter bits */
#define CAN_F12R1_FB10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_F12R1_FB10                        CAN_F12R1_FB10_Mask
#define CAN_F12R1_FB11_Pos                    ((uint32_t)11)                    /* Filter bits */
#define CAN_F12R1_FB11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_F12R1_FB11                        CAN_F12R1_FB11_Mask
#define CAN_F12R1_FB12_Pos                    ((uint32_t)12)                    /* Filter bits */
#define CAN_F12R1_FB12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_F12R1_FB12                        CAN_F12R1_FB12_Mask
#define CAN_F12R1_FB13_Pos                    ((uint32_t)13)                    /* Filter bits */
#define CAN_F12R1_FB13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_F12R1_FB13                        CAN_F12R1_FB13_Mask
#define CAN_F12R1_FB14_Pos                    ((uint32_t)14)                    /* Filter bits */
#define CAN_F12R1_FB14_Mask                   (((uint32_t)0x01) << 14)
#define CAN_F12R1_FB14                        CAN_F12R1_FB14_Mask
#define CAN_F12R1_FB15_Pos                    ((uint32_t)15)                    /* Filter bits */
#define CAN_F12R1_FB15_Mask                   (((uint32_t)0x01) << 15)
#define CAN_F12R1_FB15                        CAN_F12R1_FB15_Mask
#define CAN_F12R1_FB16_Pos                    ((uint32_t)16)                    /* Filter bits */
#define CAN_F12R1_FB16_Mask                   (((uint32_t)0x01) << 16)
#define CAN_F12R1_FB16                        CAN_F12R1_FB16_Mask
#define CAN_F12R1_FB17_Pos                    ((uint32_t)17)                    /* Filter bits */
#define CAN_F12R1_FB17_Mask                   (((uint32_t)0x01) << 17)
#define CAN_F12R1_FB17                        CAN_F12R1_FB17_Mask
#define CAN_F12R1_FB18_Pos                    ((uint32_t)18)                    /* Filter bits */
#define CAN_F12R1_FB18_Mask                   (((uint32_t)0x01) << 18)
#define CAN_F12R1_FB18                        CAN_F12R1_FB18_Mask
#define CAN_F12R1_FB19_Pos                    ((uint32_t)19)                    /* Filter bits */
#define CAN_F12R1_FB19_Mask                   (((uint32_t)0x01) << 19)
#define CAN_F12R1_FB19                        CAN_F12R1_FB19_Mask
#define CAN_F12R1_FB20_Pos                    ((uint32_t)20)                    /* Filter bits */
#define CAN_F12R1_FB20_Mask                   (((uint32_t)0x01) << 20)
#define CAN_F12R1_FB20                        CAN_F12R1_FB20_Mask
#define CAN_F12R1_FB21_Pos                    ((uint32_t)21)                    /* Filter bits */
#define CAN_F12R1_FB21_Mask                   (((uint32_t)0x01) << 21)
#define CAN_F12R1_FB21                        CAN_F12R1_FB21_Mask
#define CAN_F12R1_FB22_Pos                    ((uint32_t)22)                    /* Filter bits */
#define CAN_F12R1_FB22_Mask                   (((uint32_t)0x01) << 22)
#define CAN_F12R1_FB22                        CAN_F12R1_FB22_Mask
#define CAN_F12R1_FB23_Pos                    ((uint32_t)23)                    /* Filter bits */
#define CAN_F12R1_FB23_Mask                   (((uint32_t)0x01) << 23)
#define CAN_F12R1_FB23                        CAN_F12R1_FB23_Mask
#define CAN_F12R1_FB24_Pos                    ((uint32_t)24)                    /* Filter bits */
#define CAN_F12R1_FB24_Mask                   (((uint32_t)0x01) << 24)
#define CAN_F12R1_FB24                        CAN_F12R1_FB24_Mask
#define CAN_F12R1_FB25_Pos                    ((uint32_t)25)                    /* Filter bits */
#define CAN_F12R1_FB25_Mask                   (((uint32_t)0x01) << 25)
#define CAN_F12R1_FB25                        CAN_F12R1_FB25_Mask
#define CAN_F12R1_FB26_Pos                    ((uint32_t)26)                    /* Filter bits */
#define CAN_F12R1_FB26_Mask                   (((uint32_t)0x01) << 26)
#define CAN_F12R1_FB26                        CAN_F12R1_FB26_Mask
#define CAN_F12R1_FB27_Pos                    ((uint32_t)27)                    /* Filter bits */
#define CAN_F12R1_FB27_Mask                   (((uint32_t)0x01) << 27)
#define CAN_F12R1_FB27                        CAN_F12R1_FB27_Mask
#define CAN_F12R1_FB28_Pos                    ((uint32_t)28)                    /* Filter bits */
#define CAN_F12R1_FB28_Mask                   (((uint32_t)0x01) << 28)
#define CAN_F12R1_FB28                        CAN_F12R1_FB28_Mask
#define CAN_F12R1_FB29_Pos                    ((uint32_t)29)                    /* Filter bits */
#define CAN_F12R1_FB29_Mask                   (((uint32_t)0x01) << 29)
#define CAN_F12R1_FB29                        CAN_F12R1_FB29_Mask
#define CAN_F12R1_FB30_Pos                    ((uint32_t)30)                    /* Filter bits */
#define CAN_F12R1_FB30_Mask                   (((uint32_t)0x01) << 30)
#define CAN_F12R1_FB30                        CAN_F12R1_FB30_Mask
#define CAN_F12R1_FB31_Pos                    ((uint32_t)31)                    /* Filter bits */
#define CAN_F12R1_FB31_Mask                   (((uint32_t)0x01) << 31)
#define CAN_F12R1_FB31                        CAN_F12R1_FB31_Mask

/************************************* CAN->F12R2  **************************************/
#define CAN_F12R2_FB0_Pos                     ((uint32_t)0)                     /* Filter bits */
#define CAN_F12R2_FB0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_F12R2_FB0                         CAN_F12R2_FB0_Mask
#define CAN_F12R2_FB1_Pos                     ((uint32_t)1)                     /* Filter bits */
#define CAN_F12R2_FB1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_F12R2_FB1                         CAN_F12R2_FB1_Mask
#define CAN_F12R2_FB2_Pos                     ((uint32_t)2)                     /* Filter bits */
#define CAN_F12R2_FB2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_F12R2_FB2                         CAN_F12R2_FB2_Mask
#define CAN_F12R2_FB3_Pos                     ((uint32_t)3)                     /* Filter bits */
#define CAN_F12R2_FB3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_F12R2_FB3                         CAN_F12R2_FB3_Mask
#define CAN_F12R2_FB4_Pos                     ((uint32_t)4)                     /* Filter bits */
#define CAN_F12R2_FB4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_F12R2_FB4                         CAN_F12R2_FB4_Mask
#define CAN_F12R2_FB5_Pos                     ((uint32_t)5)                     /* Filter bits */
#define CAN_F12R2_FB5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_F12R2_FB5                         CAN_F12R2_FB5_Mask
#define CAN_F12R2_FB6_Pos                     ((uint32_t)6)                     /* Filter bits */
#define CAN_F12R2_FB6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_F12R2_FB6                         CAN_F12R2_FB6_Mask
#define CAN_F12R2_FB7_Pos                     ((uint32_t)7)                     /* Filter bits */
#define CAN_F12R2_FB7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_F12R2_FB7                         CAN_F12R2_FB7_Mask
#define CAN_F12R2_FB8_Pos                     ((uint32_t)8)                     /* Filter bits */
#define CAN_F12R2_FB8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_F12R2_FB8                         CAN_F12R2_FB8_Mask
#define CAN_F12R2_FB9_Pos                     ((uint32_t)9)                     /* Filter bits */
#define CAN_F12R2_FB9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_F12R2_FB9                         CAN_F12R2_FB9_Mask
#define CAN_F12R2_FB10_Pos                    ((uint32_t)10)                    /* Filter bits */
#define CAN_F12R2_FB10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_F12R2_FB10                        CAN_F12R2_FB10_Mask
#define CAN_F12R2_FB11_Pos                    ((uint32_t)11)                    /* Filter bits */
#define CAN_F12R2_FB11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_F12R2_FB11                        CAN_F12R2_FB11_Mask
#define CAN_F12R2_FB12_Pos                    ((uint32_t)12)                    /* Filter bits */
#define CAN_F12R2_FB12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_F12R2_FB12                        CAN_F12R2_FB12_Mask
#define CAN_F12R2_FB13_Pos                    ((uint32_t)13)                    /* Filter bits */
#define CAN_F12R2_FB13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_F12R2_FB13                        CAN_F12R2_FB13_Mask
#define CAN_F12R2_FB14_Pos                    ((uint32_t)14)                    /* Filter bits */
#define CAN_F12R2_FB14_Mask                   (((uint32_t)0x01) << 14)
#define CAN_F12R2_FB14                        CAN_F12R2_FB14_Mask
#define CAN_F12R2_FB15_Pos                    ((uint32_t)15)                    /* Filter bits */
#define CAN_F12R2_FB15_Mask                   (((uint32_t)0x01) << 15)
#define CAN_F12R2_FB15                        CAN_F12R2_FB15_Mask
#define CAN_F12R2_FB16_Pos                    ((uint32_t)16)                    /* Filter bits */
#define CAN_F12R2_FB16_Mask                   (((uint32_t)0x01) << 16)
#define CAN_F12R2_FB16                        CAN_F12R2_FB16_Mask
#define CAN_F12R2_FB17_Pos                    ((uint32_t)17)                    /* Filter bits */
#define CAN_F12R2_FB17_Mask                   (((uint32_t)0x01) << 17)
#define CAN_F12R2_FB17                        CAN_F12R2_FB17_Mask
#define CAN_F12R2_FB18_Pos                    ((uint32_t)18)                    /* Filter bits */
#define CAN_F12R2_FB18_Mask                   (((uint32_t)0x01) << 18)
#define CAN_F12R2_FB18                        CAN_F12R2_FB18_Mask
#define CAN_F12R2_FB19_Pos                    ((uint32_t)19)                    /* Filter bits */
#define CAN_F12R2_FB19_Mask                   (((uint32_t)0x01) << 19)
#define CAN_F12R2_FB19                        CAN_F12R2_FB19_Mask
#define CAN_F12R2_FB20_Pos                    ((uint32_t)20)                    /* Filter bits */
#define CAN_F12R2_FB20_Mask                   (((uint32_t)0x01) << 20)
#define CAN_F12R2_FB20                        CAN_F12R2_FB20_Mask
#define CAN_F12R2_FB21_Pos                    ((uint32_t)21)                    /* Filter bits */
#define CAN_F12R2_FB21_Mask                   (((uint32_t)0x01) << 21)
#define CAN_F12R2_FB21                        CAN_F12R2_FB21_Mask
#define CAN_F12R2_FB22_Pos                    ((uint32_t)22)                    /* Filter bits */
#define CAN_F12R2_FB22_Mask                   (((uint32_t)0x01) << 22)
#define CAN_F12R2_FB22                        CAN_F12R2_FB22_Mask
#define CAN_F12R2_FB23_Pos                    ((uint32_t)23)                    /* Filter bits */
#define CAN_F12R2_FB23_Mask                   (((uint32_t)0x01) << 23)
#define CAN_F12R2_FB23                        CAN_F12R2_FB23_Mask
#define CAN_F12R2_FB24_Pos                    ((uint32_t)24)                    /* Filter bits */
#define CAN_F12R2_FB24_Mask                   (((uint32_t)0x01) << 24)
#define CAN_F12R2_FB24                        CAN_F12R2_FB24_Mask
#define CAN_F12R2_FB25_Pos                    ((uint32_t)25)                    /* Filter bits */
#define CAN_F12R2_FB25_Mask                   (((uint32_t)0x01) << 25)
#define CAN_F12R2_FB25                        CAN_F12R2_FB25_Mask
#define CAN_F12R2_FB26_Pos                    ((uint32_t)26)                    /* Filter bits */
#define CAN_F12R2_FB26_Mask                   (((uint32_t)0x01) << 26)
#define CAN_F12R2_FB26                        CAN_F12R2_FB26_Mask
#define CAN_F12R2_FB27_Pos                    ((uint32_t)27)                    /* Filter bits */
#define CAN_F12R2_FB27_Mask                   (((uint32_t)0x01) << 27)
#define CAN_F12R2_FB27                        CAN_F12R2_FB27_Mask
#define CAN_F12R2_FB28_Pos                    ((uint32_t)28)                    /* Filter bits */
#define CAN_F12R2_FB28_Mask                   (((uint32_t)0x01) << 28)
#define CAN_F12R2_FB28                        CAN_F12R2_FB28_Mask
#define CAN_F12R2_FB29_Pos                    ((uint32_t)29)                    /* Filter bits */
#define CAN_F12R2_FB29_Mask                   (((uint32_t)0x01) << 29)
#define CAN_F12R2_FB29                        CAN_F12R2_FB29_Mask
#define CAN_F12R2_FB30_Pos                    ((uint32_t)30)                    /* Filter bits */
#define CAN_F12R2_FB30_Mask                   (((uint32_t)0x01) << 30)
#define CAN_F12R2_FB30                        CAN_F12R2_FB30_Mask
#define CAN_F12R2_FB31_Pos                    ((uint32_t)31)                    /* Filter bits */
#define CAN_F12R2_FB31_Mask                   (((uint32_t)0x01) << 31)
#define CAN_F12R2_FB31                        CAN_F12R2_FB31_Mask

/************************************* CAN->F13R1  **************************************/
#define CAN_F13R1_FB0_Pos                     ((uint32_t)0)                     /* Filter bits */
#define CAN_F13R1_FB0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_F13R1_FB0                         CAN_F13R1_FB0_Mask
#define CAN_F13R1_FB1_Pos                     ((uint32_t)1)                     /* Filter bits */
#define CAN_F13R1_FB1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_F13R1_FB1                         CAN_F13R1_FB1_Mask
#define CAN_F13R1_FB2_Pos                     ((uint32_t)2)                     /* Filter bits */
#define CAN_F13R1_FB2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_F13R1_FB2                         CAN_F13R1_FB2_Mask
#define CAN_F13R1_FB3_Pos                     ((uint32_t)3)                     /* Filter bits */
#define CAN_F13R1_FB3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_F13R1_FB3                         CAN_F13R1_FB3_Mask
#define CAN_F13R1_FB4_Pos                     ((uint32_t)4)                     /* Filter bits */
#define CAN_F13R1_FB4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_F13R1_FB4                         CAN_F13R1_FB4_Mask
#define CAN_F13R1_FB5_Pos                     ((uint32_t)5)                     /* Filter bits */
#define CAN_F13R1_FB5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_F13R1_FB5                         CAN_F13R1_FB5_Mask
#define CAN_F13R1_FB6_Pos                     ((uint32_t)6)                     /* Filter bits */
#define CAN_F13R1_FB6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_F13R1_FB6                         CAN_F13R1_FB6_Mask
#define CAN_F13R1_FB7_Pos                     ((uint32_t)7)                     /* Filter bits */
#define CAN_F13R1_FB7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_F13R1_FB7                         CAN_F13R1_FB7_Mask
#define CAN_F13R1_FB8_Pos                     ((uint32_t)8)                     /* Filter bits */
#define CAN_F13R1_FB8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_F13R1_FB8                         CAN_F13R1_FB8_Mask
#define CAN_F13R1_FB9_Pos                     ((uint32_t)9)                     /* Filter bits */
#define CAN_F13R1_FB9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_F13R1_FB9                         CAN_F13R1_FB9_Mask
#define CAN_F13R1_FB10_Pos                    ((uint32_t)10)                    /* Filter bits */
#define CAN_F13R1_FB10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_F13R1_FB10                        CAN_F13R1_FB10_Mask
#define CAN_F13R1_FB11_Pos                    ((uint32_t)11)                    /* Filter bits */
#define CAN_F13R1_FB11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_F13R1_FB11                        CAN_F13R1_FB11_Mask
#define CAN_F13R1_FB12_Pos                    ((uint32_t)12)                    /* Filter bits */
#define CAN_F13R1_FB12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_F13R1_FB12                        CAN_F13R1_FB12_Mask
#define CAN_F13R1_FB13_Pos                    ((uint32_t)13)                    /* Filter bits */
#define CAN_F13R1_FB13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_F13R1_FB13                        CAN_F13R1_FB13_Mask
#define CAN_F13R1_FB14_Pos                    ((uint32_t)14)                    /* Filter bits */
#define CAN_F13R1_FB14_Mask                   (((uint32_t)0x01) << 14)
#define CAN_F13R1_FB14                        CAN_F13R1_FB14_Mask
#define CAN_F13R1_FB15_Pos                    ((uint32_t)15)                    /* Filter bits */
#define CAN_F13R1_FB15_Mask                   (((uint32_t)0x01) << 15)
#define CAN_F13R1_FB15                        CAN_F13R1_FB15_Mask
#define CAN_F13R1_FB16_Pos                    ((uint32_t)16)                    /* Filter bits */
#define CAN_F13R1_FB16_Mask                   (((uint32_t)0x01) << 16)
#define CAN_F13R1_FB16                        CAN_F13R1_FB16_Mask
#define CAN_F13R1_FB17_Pos                    ((uint32_t)17)                    /* Filter bits */
#define CAN_F13R1_FB17_Mask                   (((uint32_t)0x01) << 17)
#define CAN_F13R1_FB17                        CAN_F13R1_FB17_Mask
#define CAN_F13R1_FB18_Pos                    ((uint32_t)18)                    /* Filter bits */
#define CAN_F13R1_FB18_Mask                   (((uint32_t)0x01) << 18)
#define CAN_F13R1_FB18                        CAN_F13R1_FB18_Mask
#define CAN_F13R1_FB19_Pos                    ((uint32_t)19)                    /* Filter bits */
#define CAN_F13R1_FB19_Mask                   (((uint32_t)0x01) << 19)
#define CAN_F13R1_FB19                        CAN_F13R1_FB19_Mask
#define CAN_F13R1_FB20_Pos                    ((uint32_t)20)                    /* Filter bits */
#define CAN_F13R1_FB20_Mask                   (((uint32_t)0x01) << 20)
#define CAN_F13R1_FB20                        CAN_F13R1_FB20_Mask
#define CAN_F13R1_FB21_Pos                    ((uint32_t)21)                    /* Filter bits */
#define CAN_F13R1_FB21_Mask                   (((uint32_t)0x01) << 21)
#define CAN_F13R1_FB21                        CAN_F13R1_FB21_Mask
#define CAN_F13R1_FB22_Pos                    ((uint32_t)22)                    /* Filter bits */
#define CAN_F13R1_FB22_Mask                   (((uint32_t)0x01) << 22)
#define CAN_F13R1_FB22                        CAN_F13R1_FB22_Mask
#define CAN_F13R1_FB23_Pos                    ((uint32_t)23)                    /* Filter bits */
#define CAN_F13R1_FB23_Mask                   (((uint32_t)0x01) << 23)
#define CAN_F13R1_FB23                        CAN_F13R1_FB23_Mask
#define CAN_F13R1_FB24_Pos                    ((uint32_t)24)                    /* Filter bits */
#define CAN_F13R1_FB24_Mask                   (((uint32_t)0x01) << 24)
#define CAN_F13R1_FB24                        CAN_F13R1_FB24_Mask
#define CAN_F13R1_FB25_Pos                    ((uint32_t)25)                    /* Filter bits */
#define CAN_F13R1_FB25_Mask                   (((uint32_t)0x01) << 25)
#define CAN_F13R1_FB25                        CAN_F13R1_FB25_Mask
#define CAN_F13R1_FB26_Pos                    ((uint32_t)26)                    /* Filter bits */
#define CAN_F13R1_FB26_Mask                   (((uint32_t)0x01) << 26)
#define CAN_F13R1_FB26                        CAN_F13R1_FB26_Mask
#define CAN_F13R1_FB27_Pos                    ((uint32_t)27)                    /* Filter bits */
#define CAN_F13R1_FB27_Mask                   (((uint32_t)0x01) << 27)
#define CAN_F13R1_FB27                        CAN_F13R1_FB27_Mask
#define CAN_F13R1_FB28_Pos                    ((uint32_t)28)                    /* Filter bits */
#define CAN_F13R1_FB28_Mask                   (((uint32_t)0x01) << 28)
#define CAN_F13R1_FB28                        CAN_F13R1_FB28_Mask
#define CAN_F13R1_FB29_Pos                    ((uint32_t)29)                    /* Filter bits */
#define CAN_F13R1_FB29_Mask                   (((uint32_t)0x01) << 29)
#define CAN_F13R1_FB29                        CAN_F13R1_FB29_Mask
#define CAN_F13R1_FB30_Pos                    ((uint32_t)30)                    /* Filter bits */
#define CAN_F13R1_FB30_Mask                   (((uint32_t)0x01) << 30)
#define CAN_F13R1_FB30                        CAN_F13R1_FB30_Mask
#define CAN_F13R1_FB31_Pos                    ((uint32_t)31)                    /* Filter bits */
#define CAN_F13R1_FB31_Mask                   (((uint32_t)0x01) << 31)
#define CAN_F13R1_FB31                        CAN_F13R1_FB31_Mask

/************************************* CAN->F13R2  **************************************/
#define CAN_F13R2_FB0_Pos                     ((uint32_t)0)                     /* Filter bits */
#define CAN_F13R2_FB0_Mask                    (((uint32_t)0x01) << 0)
#define CAN_F13R2_FB0                         CAN_F13R2_FB0_Mask
#define CAN_F13R2_FB1_Pos                     ((uint32_t)1)                     /* Filter bits */
#define CAN_F13R2_FB1_Mask                    (((uint32_t)0x01) << 1)
#define CAN_F13R2_FB1                         CAN_F13R2_FB1_Mask
#define CAN_F13R2_FB2_Pos                     ((uint32_t)2)                     /* Filter bits */
#define CAN_F13R2_FB2_Mask                    (((uint32_t)0x01) << 2)
#define CAN_F13R2_FB2                         CAN_F13R2_FB2_Mask
#define CAN_F13R2_FB3_Pos                     ((uint32_t)3)                     /* Filter bits */
#define CAN_F13R2_FB3_Mask                    (((uint32_t)0x01) << 3)
#define CAN_F13R2_FB3                         CAN_F13R2_FB3_Mask
#define CAN_F13R2_FB4_Pos                     ((uint32_t)4)                     /* Filter bits */
#define CAN_F13R2_FB4_Mask                    (((uint32_t)0x01) << 4)
#define CAN_F13R2_FB4                         CAN_F13R2_FB4_Mask
#define CAN_F13R2_FB5_Pos                     ((uint32_t)5)                     /* Filter bits */
#define CAN_F13R2_FB5_Mask                    (((uint32_t)0x01) << 5)
#define CAN_F13R2_FB5                         CAN_F13R2_FB5_Mask
#define CAN_F13R2_FB6_Pos                     ((uint32_t)6)                     /* Filter bits */
#define CAN_F13R2_FB6_Mask                    (((uint32_t)0x01) << 6)
#define CAN_F13R2_FB6                         CAN_F13R2_FB6_Mask
#define CAN_F13R2_FB7_Pos                     ((uint32_t)7)                     /* Filter bits */
#define CAN_F13R2_FB7_Mask                    (((uint32_t)0x01) << 7)
#define CAN_F13R2_FB7                         CAN_F13R2_FB7_Mask
#define CAN_F13R2_FB8_Pos                     ((uint32_t)8)                     /* Filter bits */
#define CAN_F13R2_FB8_Mask                    (((uint32_t)0x01) << 8)
#define CAN_F13R2_FB8                         CAN_F13R2_FB8_Mask
#define CAN_F13R2_FB9_Pos                     ((uint32_t)9)                     /* Filter bits */
#define CAN_F13R2_FB9_Mask                    (((uint32_t)0x01) << 9)
#define CAN_F13R2_FB9                         CAN_F13R2_FB9_Mask
#define CAN_F13R2_FB10_Pos                    ((uint32_t)10)                    /* Filter bits */
#define CAN_F13R2_FB10_Mask                   (((uint32_t)0x01) << 10)
#define CAN_F13R2_FB10                        CAN_F13R2_FB10_Mask
#define CAN_F13R2_FB11_Pos                    ((uint32_t)11)                    /* Filter bits */
#define CAN_F13R2_FB11_Mask                   (((uint32_t)0x01) << 11)
#define CAN_F13R2_FB11                        CAN_F13R2_FB11_Mask
#define CAN_F13R2_FB12_Pos                    ((uint32_t)12)                    /* Filter bits */
#define CAN_F13R2_FB12_Mask                   (((uint32_t)0x01) << 12)
#define CAN_F13R2_FB12                        CAN_F13R2_FB12_Mask
#define CAN_F13R2_FB13_Pos                    ((uint32_t)13)                    /* Filter bits */
#define CAN_F13R2_FB13_Mask                   (((uint32_t)0x01) << 13)
#define CAN_F13R2_FB13                        CAN_F13R2_FB13_Mask
#define CAN_F13R2_FB14_Pos                    ((uint32_t)14)                    /* Filter bits */
#define CAN_F13R2_FB14_Mask                   (((uint32_t)0x01) << 14)
#define CAN_F13R2_FB14                        CAN_F13R2_FB14_Mask
#define CAN_F13R2_FB15_Pos                    ((uint32_t)15)                    /* Filter bits */
#define CAN_F13R2_FB15_Mask                   (((uint32_t)0x01) << 15)
#define CAN_F13R2_FB15                        CAN_F13R2_FB15_Mask
#define CAN_F13R2_FB16_Pos                    ((uint32_t)16)                    /* Filter bits */
#define CAN_F13R2_FB16_Mask                   (((uint32_t)0x01) << 16)
#define CAN_F13R2_FB16                        CAN_F13R2_FB16_Mask
#define CAN_F13R2_FB17_Pos                    ((uint32_t)17)                    /* Filter bits */
#define CAN_F13R2_FB17_Mask                   (((uint32_t)0x01) << 17)
#define CAN_F13R2_FB17                        CAN_F13R2_FB17_Mask
#define CAN_F13R2_FB18_Pos                    ((uint32_t)18)                    /* Filter bits */
#define CAN_F13R2_FB18_Mask                   (((uint32_t)0x01) << 18)
#define CAN_F13R2_FB18                        CAN_F13R2_FB18_Mask
#define CAN_F13R2_FB19_Pos                    ((uint32_t)19)                    /* Filter bits */
#define CAN_F13R2_FB19_Mask                   (((uint32_t)0x01) << 19)
#define CAN_F13R2_FB19                        CAN_F13R2_FB19_Mask
#define CAN_F13R2_FB20_Pos                    ((uint32_t)20)                    /* Filter bits */
#define CAN_F13R2_FB20_Mask                   (((uint32_t)0x01) << 20)
#define CAN_F13R2_FB20                        CAN_F13R2_FB20_Mask
#define CAN_F13R2_FB21_Pos                    ((uint32_t)21)                    /* Filter bits */
#define CAN_F13R2_FB21_Mask                   (((uint32_t)0x01) << 21)
#define CAN_F13R2_FB21                        CAN_F13R2_FB21_Mask
#define CAN_F13R2_FB22_Pos                    ((uint32_t)22)                    /* Filter bits */
#define CAN_F13R2_FB22_Mask                   (((uint32_t)0x01) << 22)
#define CAN_F13R2_FB22                        CAN_F13R2_FB22_Mask
#define CAN_F13R2_FB23_Pos                    ((uint32_t)23)                    /* Filter bits */
#define CAN_F13R2_FB23_Mask                   (((uint32_t)0x01) << 23)
#define CAN_F13R2_FB23                        CAN_F13R2_FB23_Mask
#define CAN_F13R2_FB24_Pos                    ((uint32_t)24)                    /* Filter bits */
#define CAN_F13R2_FB24_Mask                   (((uint32_t)0x01) << 24)
#define CAN_F13R2_FB24                        CAN_F13R2_FB24_Mask
#define CAN_F13R2_FB25_Pos                    ((uint32_t)25)                    /* Filter bits */
#define CAN_F13R2_FB25_Mask                   (((uint32_t)0x01) << 25)
#define CAN_F13R2_FB25                        CAN_F13R2_FB25_Mask
#define CAN_F13R2_FB26_Pos                    ((uint32_t)26)                    /* Filter bits */
#define CAN_F13R2_FB26_Mask                   (((uint32_t)0x01) << 26)
#define CAN_F13R2_FB26                        CAN_F13R2_FB26_Mask
#define CAN_F13R2_FB27_Pos                    ((uint32_t)27)                    /* Filter bits */
#define CAN_F13R2_FB27_Mask                   (((uint32_t)0x01) << 27)
#define CAN_F13R2_FB27                        CAN_F13R2_FB27_Mask
#define CAN_F13R2_FB28_Pos                    ((uint32_t)28)                    /* Filter bits */
#define CAN_F13R2_FB28_Mask                   (((uint32_t)0x01) << 28)
#define CAN_F13R2_FB28                        CAN_F13R2_FB28_Mask
#define CAN_F13R2_FB29_Pos                    ((uint32_t)29)                    /* Filter bits */
#define CAN_F13R2_FB29_Mask                   (((uint32_t)0x01) << 29)
#define CAN_F13R2_FB29                        CAN_F13R2_FB29_Mask
#define CAN_F13R2_FB30_Pos                    ((uint32_t)30)                    /* Filter bits */
#define CAN_F13R2_FB30_Mask                   (((uint32_t)0x01) << 30)
#define CAN_F13R2_FB30                        CAN_F13R2_FB30_Mask
#define CAN_F13R2_FB31_Pos                    ((uint32_t)31)                    /* Filter bits */
#define CAN_F13R2_FB31_Mask                   (((uint32_t)0x01) << 31)
#define CAN_F13R2_FB31                        CAN_F13R2_FB31_Mask

/*****************************************************************************************
*                                    Peripheral EMACC                                    *
*****************************************************************************************/
typedef struct
{
    __I  uint32_t CORDIC_OUT;             /* CORDIC_OUT */
    __I  uint32_t CLARKE_OUT;             /* CLARKE_OUT */
    __I  uint32_t PARK_OUT;               /* PARK_OUT */
    __I  uint32_t PID_OUT;                /* PID_OUT */
    __I  uint32_t REVPARK_OUT;            /* REVPARK_OUT */
    uint16_t RESERVED1[2];
    __O  uint32_t CLRSR;                  /* CLRSR */
    uint16_t RESERVED2[2];
    __IO uint32_t CR;                     /* CR */
    __I  uint32_t SR;                     /* SR */
    __IO uint32_t ANG_LDR;                /* ANG_LDR */
    __IO uint32_t CLARKE_LDR;             /* CLARKE_LDR */
    __O  uint32_t CIRCLELMT_CFG;          /* CIRCLELMT_CFG */
    uint16_t RESERVED3[2];
    __I  uint32_t READ_CIRCLELMT_CFG;     /* READ_CIRCLELMT_CFG */
    uint16_t RESERVED4[2];
    __O  uint32_t D_KPKI;                 /* D_KPKI */
    __O  uint32_t D_INTUPPER;             /* D_INTUPPER */
    __O  uint32_t D_INTLOWER;             /* D_INTLOWER */
    __O  uint32_t D_INTOUT;               /* D_INTOUT */
    __O  uint32_t D_PI_DIV;               /* D_PI_DIV */
    __O  uint32_t ID_REF;                 /* ID_REF */
    uint16_t RESERVED5[4];
    __O  uint32_t Q_KPKI;                 /* Q_KPKI */
    __O  uint32_t Q_INTUPPER;             /* Q_INTUPPER */
    __O  uint32_t Q_INTLOWER;             /* Q_INTLOWER */
    __O  uint32_t Q_INTOUT;               /* Q_INTOUT */
    __O  uint32_t Q_PI_DIV;               /* Q_PI_DIV */
    __O  uint32_t IQ_REF;                 /* IQ_REF */
    uint16_t RESERVED6[36];
    __I  uint32_t READ_KPKI;              /* READ_KPKI */
    __I  uint32_t READ_INTUPPER;          /* READ_INTUPPER */
    __I  uint32_t READ_INTLOWER;          /* READ_INTLOWER */
    __I  uint32_t READ_INTOUT;            /* READ_INTOUT */
    __I  uint32_t READ_PI_DIV;            /* READ_PI_DIV */
    __I  uint32_t READ_IDQ_REF;           /* READ_IDQ_REF */
    uint16_t RESERVED7[20];
    __IO uint32_t PID_RAM_SPACE0;         /* PID_RAM_SPACE0 */
    __IO uint32_t PID_RAM_SPACE1;         /* PID_RAM_SPACE1 */
    __IO uint32_t PID_RAM_SPACE2;         /* PID_RAM_SPACE2 */
    __IO uint32_t PID_RAM_SPACE3;         /* PID_RAM_SPACE3 */
    __IO uint32_t PID_RAM_SPACE4;         /* PID_RAM_SPACE4 */
    __IO uint32_t PID_RAM_SPACE5;         /* PID_RAM_SPACE5 */
    __IO uint32_t PID_RAM_SPACE6;         /* PID_RAM_SPACE6 */
    __IO uint32_t PID_RAM_SPACE7;         /* PID_RAM_SPACE7 */
    __IO uint32_t PID_RAM_SPACE8;         /* PID_RAM_SPACE8 */
    __IO uint32_t PID_RAM_SPACE9;         /* PID_RAM_SPACE9 */
    __IO uint32_t PID_RAM_SPACE10;        /* PID_RAM_SPACE10 */
    __IO uint32_t PID_RAM_SPACE11;        /* PID_RAM_SPACE11 */
    __IO uint32_t PID_RAM_SPACE12;        /* PID_RAM_SPACE12 */
    __IO uint32_t PID_RAM_SPACE13;        /* PID_RAM_SPACE13 */
    __IO uint32_t PID_RAM_SPACE14;        /* PID_RAM_SPACE14 */
    __IO uint32_t PID_RAM_SPACE15;        /* PID_RAM_SPACE15 */
    __IO uint32_t PID_RAM_SPACE16;        /* PID_RAM_SPACE16 */
    __IO uint32_t PID_RAM_SPACE17;        /* PID_RAM_SPACE17 */
    __IO uint32_t PID_RAM_SPACE18;        /* PID_RAM_SPACE18 */
    __IO uint32_t PID_RAM_SPACE19;        /* PID_RAM_SPACE19 */
    __IO uint32_t PID_RAM_SPACE20;        /* PID_RAM_SPACE20 */
    __IO uint32_t PID_RAM_SPACE21;        /* PID_RAM_SPACE21 */
    __IO uint32_t PID_RAM_SPACE22;        /* PID_RAM_SPACE22 */
    __IO uint32_t PID_RAM_SPACE23;        /* PID_RAM_SPACE23 */
    __IO uint32_t PID_RAM_SPACE24;        /* PID_RAM_SPACE24 */
    __IO uint32_t PID_RAM_SPACE25;        /* PID_RAM_SPACE25 */
    __IO uint32_t PID_RAM_SPACE26;        /* PID_RAM_SPACE26 */
    __IO uint32_t PID_RAM_SPACE27;        /* PID_RAM_SPACE27 */
    __IO uint32_t PID_RAM_SPACE28;        /* PID_RAM_SPACE28 */
    __IO uint32_t PID_RAM_SPACE29;        /* PID_RAM_SPACE29 */
    __IO uint32_t PID_RAM_SPACE30;        /* PID_RAM_SPACE30 */
    __IO uint32_t PID_RAM_SPACE31;        /* PID_RAM_SPACE31 */
    __IO uint32_t PID_RAM_SPACE32;        /* PID_RAM_SPACE32 */
    __IO uint32_t PID_RAM_SPACE33;        /* PID_RAM_SPACE33 */
    __IO uint32_t PID_RAM_SPACE34;        /* PID_RAM_SPACE34 */
    __IO uint32_t PID_RAM_SPACE35;        /* PID_RAM_SPACE35 */
    __IO uint32_t PID_RAM_SPACE36;        /* PID_RAM_SPACE36 */
    __IO uint32_t PID_RAM_SPACE37;        /* PID_RAM_SPACE37 */
    __IO uint32_t PID_RAM_SPACE38;        /* PID_RAM_SPACE38 */
    __IO uint32_t PID_RAM_SPACE39;        /* PID_RAM_SPACE39 */
    __IO uint32_t PID_RAM_SPACE40;        /* PID_RAM_SPACE40 */
    __IO uint32_t PID_RAM_SPACE41;        /* PID_RAM_SPACE41 */
    __IO uint32_t PID_RAM_SPACE42;        /* PID_RAM_SPACE42 */
    __IO uint32_t PID_RAM_SPACE43;        /* PID_RAM_SPACE43 */
    __IO uint32_t PID_RAM_SPACE44;        /* PID_RAM_SPACE44 */
    __IO uint32_t PID_RAM_SPACE45;        /* PID_RAM_SPACE45 */
    __IO uint32_t PID_RAM_SPACE46;        /* PID_RAM_SPACE46 */
    __IO uint32_t PID_RAM_SPACE47;        /* PID_RAM_SPACE47 */
    __IO uint32_t PID_RAM_SPACE48;        /* PID_RAM_SPACE48 */
    __IO uint32_t PID_RAM_SPACE49;        /* PID_RAM_SPACE49 */
    __IO uint32_t PID_RAM_SPACE50;        /* PID_RAM_SPACE50 */
    __IO uint32_t PID_RAM_SPACE51;        /* PID_RAM_SPACE51 */
    __IO uint32_t PID_RAM_SPACE52;        /* PID_RAM_SPACE52 */
    __IO uint32_t PID_RAM_SPACE53;        /* PID_RAM_SPACE53 */
    __IO uint32_t PID_RAM_SPACE54;        /* PID_RAM_SPACE54 */
    __IO uint32_t PID_RAM_SPACE55;        /* PID_RAM_SPACE55 */
    __IO uint32_t PID_RAM_SPACE56;        /* PID_RAM_SPACE56 */
    __IO uint32_t PID_RAM_SPACE57;        /* PID_RAM_SPACE57 */
    __IO uint32_t PID_RAM_SPACE58;        /* PID_RAM_SPACE58 */
    __IO uint32_t PID_RAM_SPACE59;        /* PID_RAM_SPACE59 */
    __IO uint32_t PID_RAM_SPACE60;        /* PID_RAM_SPACE60 */
    __IO uint32_t PID_RAM_SPACE61;        /* PID_RAM_SPACE61 */
    __IO uint32_t PID_RAM_SPACE62;        /* PID_RAM_SPACE62 */
    __IO uint32_t PID_RAM_SPACE63;        /* PID_RAM_SPACE63 */
} EMACC_TypeDef;

/********************************* EMACC->CORDIC_OUT  ***********************************/
#define EMACC_CORDIC_OUT_COSX_Pos             ((uint32_t)16)                    /* Cossine X value */
#define EMACC_CORDIC_OUT_COSX_Mask            (((uint32_t)0xFFFF) << 16)
#define EMACC_CORDIC_OUT_COSX                 EMACC_CORDIC_OUT_COSX_Mask
#define EMACC_CORDIC_OUT_SINX_Pos             ((uint32_t)0)                     /* Sinusoidal X value */
#define EMACC_CORDIC_OUT_SINX_Mask            (((uint32_t)0xFFFF) << 0)
#define EMACC_CORDIC_OUT_SINX                 EMACC_CORDIC_OUT_SINX_Mask

/********************************* EMACC->CLARKE_OUT  ***********************************/
#define EMACC_CLARKE_OUT_I_ALPHA_Pos          ((uint32_t)16)                    /* Output result, Alpha axis of clarke transformation */
#define EMACC_CLARKE_OUT_I_ALPHA_Mask         (((uint32_t)0xFFFF) << 16)
#define EMACC_CLARKE_OUT_I_ALPHA              EMACC_CLARKE_OUT_I_ALPHA_Mask
#define EMACC_CLARKE_OUT_I_BETA_Pos           ((uint32_t)0)                     /* Output result, Beta axis of clarke transformation */
#define EMACC_CLARKE_OUT_I_BETA_Mask          (((uint32_t)0xFFFF) << 0)
#define EMACC_CLARKE_OUT_I_BETA               EMACC_CLARKE_OUT_I_BETA_Mask

/********************************** EMACC->PARK_OUT  ************************************/
#define EMACC_PARK_OUT_ID_Pos                 ((uint32_t)16)                    /* Output result, D axis of park transform */
#define EMACC_PARK_OUT_ID_Mask                (((uint32_t)0xFFFF) << 16)
#define EMACC_PARK_OUT_ID                     EMACC_PARK_OUT_ID_Mask
#define EMACC_PARK_OUT_IQ_Pos                 ((uint32_t)0)                     /* Output result, Q axis of park transform */
#define EMACC_PARK_OUT_IQ_Mask                (((uint32_t)0xFFFF) << 0)
#define EMACC_PARK_OUT_IQ                     EMACC_PARK_OUT_IQ_Mask

/*********************************** EMACC->PID_OUT  ************************************/
#define EMACC_PID_OUT_VD_Pos                  ((uint32_t)16)                    /* Output result, D axis of pid module */
#define EMACC_PID_OUT_VD_Mask                 (((uint32_t)0xFFFF) << 16)
#define EMACC_PID_OUT_VD                      EMACC_PID_OUT_VD_Mask
#define EMACC_PID_OUT_VQ_Pos                  ((uint32_t)0)                     /* Output result, Q axis of pid module */
#define EMACC_PID_OUT_VQ_Mask                 (((uint32_t)0xFFFF) << 0)
#define EMACC_PID_OUT_VQ                      EMACC_PID_OUT_VQ_Mask

/********************************* EMACC->REVPARK_OUT  **********************************/
#define EMACC_REVPARK_OUT_V_ALPHA_Pos         ((uint32_t)16)                    /* Output VAlpha axis of Reverse park Transform Module */
#define EMACC_REVPARK_OUT_V_ALPHA_Mask        (((uint32_t)0xFFFF) << 16)
#define EMACC_REVPARK_OUT_V_ALPHA             EMACC_REVPARK_OUT_V_ALPHA_Mask
#define EMACC_REVPARK_OUT_V_BETA_Pos          ((uint32_t)0)                     /* Output VBeta axis of Reverse park Transform Module */
#define EMACC_REVPARK_OUT_V_BETA_Mask         (((uint32_t)0xFFFF) << 0)
#define EMACC_REVPARK_OUT_V_BETA              EMACC_REVPARK_OUT_V_BETA_Mask

/************************************ EMACC->CLRSR  *************************************/
#define EMACC_CLRSR_CLR_RPARK_Pos             ((uint32_t)4)                     /* Reverse-PARK data ready flag clear */
#define EMACC_CLRSR_CLR_RPARK_Mask            (((uint32_t)0x01) << 4)
#define EMACC_CLRSR_CLR_RPARK                 EMACC_CLRSR_CLR_RPARK_Mask
#define EMACC_CLRSR_CLR_PID_Pos               ((uint32_t)3)                     /* PID data ready flag clear */
#define EMACC_CLRSR_CLR_PID_Mask              (((uint32_t)0x01) << 3)
#define EMACC_CLRSR_CLR_PID                   EMACC_CLRSR_CLR_PID_Mask
#define EMACC_CLRSR_CLR_PARK_Pos              ((uint32_t)2)                     /* PARK data ready flag clear */
#define EMACC_CLRSR_CLR_PARK_Mask             (((uint32_t)0x01) << 2)
#define EMACC_CLRSR_CLR_PARK                  EMACC_CLRSR_CLR_PARK_Mask
#define EMACC_CLRSR_CLR_CLARKE_Pos            ((uint32_t)1)                     /* CLARKE data ready flag clear */
#define EMACC_CLRSR_CLR_CLARKE_Mask           (((uint32_t)0x01) << 1)
#define EMACC_CLRSR_CLR_CLARKE                EMACC_CLRSR_CLR_CLARKE_Mask
#define EMACC_CLRSR_CLR_CORDIC_Pos            ((uint32_t)0)                     /* CORDIC data ready flag clear */
#define EMACC_CLRSR_CLR_CORDIC_Mask           (((uint32_t)0x01) << 0)
#define EMACC_CLRSR_CLR_CORDIC                EMACC_CLRSR_CLR_CORDIC_Mask

/************************************* EMACC->CR  ***************************************/
#define EMACC_CR_RAMWR_EN_Pos                 ((uint32_t)12)                    /* SRAM write access from AHB interface */
#define EMACC_CR_RAMWR_EN_Mask                (((uint32_t)0x01) << 12)
#define EMACC_CR_RAMWR_EN                     EMACC_CR_RAMWR_EN_Mask
#define EMACC_CR_RAMRD_EN_Pos                 ((uint32_t)11)                    /* SRAM Read access from AHB interface */
#define EMACC_CR_RAMRD_EN_Mask                (((uint32_t)0x01) << 11)
#define EMACC_CR_RAMRD_EN                     EMACC_CR_RAMRD_EN_Mask
#define EMACC_CR_PARASEL_Pos                  ((uint32_t)8)                     /* Choose to read the PID parameters of d-axis or q-axis */
#define EMACC_CR_PARASEL_Mask                 (((uint32_t)0x03) << 8)
#define EMACC_CR_PARASEL                      EMACC_CR_PARASEL_Mask
#define EMACC_CR_PARASEL_0                    (((uint32_t)0x1 << EMACC_CR_PARASEL_Pos))
#define EMACC_CR_PARASEL_1                    (((uint32_t)0x2 << EMACC_CR_PARASEL_Pos))
#define EMACC_CR_RPARK_EN_Pos                 ((uint32_t)5)                     /* Reverse park transformation enable */
#define EMACC_CR_RPARK_EN_Mask                (((uint32_t)0x01) << 5)
#define EMACC_CR_RPARK_EN                     EMACC_CR_RPARK_EN_Mask
#define EMACC_CR_PID_EN_Pos                   ((uint32_t)4)                     /* PID module enable */
#define EMACC_CR_PID_EN_Mask                  (((uint32_t)0x01) << 4)
#define EMACC_CR_PID_EN                       EMACC_CR_PID_EN_Mask
#define EMACC_CR_PARK_EN_Pos                  ((uint32_t)3)                     /* Park transformation enable */
#define EMACC_CR_PARK_EN_Mask                 (((uint32_t)0x01) << 3)
#define EMACC_CR_PARK_EN                      EMACC_CR_PARK_EN_Mask
#define EMACC_CR_CLARKE_EN_Pos                ((uint32_t)2)                     /* Clarke transformation enable */
#define EMACC_CR_CLARKE_EN_Mask               (((uint32_t)0x01) << 2)
#define EMACC_CR_CLARKE_EN                    EMACC_CR_CLARKE_EN_Mask
#define EMACC_CR_CORDIC_EN_Pos                ((uint32_t)1)                     /* Cordic module enable */
#define EMACC_CR_CORDIC_EN_Mask               (((uint32_t)0x01) << 1)
#define EMACC_CR_CORDIC_EN                    EMACC_CR_CORDIC_EN_Mask
#define EMACC_CR_EMACC_EN_Pos                 ((uint32_t)0)                     /* Electric Motor acceleration module enable */
#define EMACC_CR_EMACC_EN_Mask                (((uint32_t)0x01) << 0)
#define EMACC_CR_EMACC_EN                     EMACC_CR_EMACC_EN_Mask

/************************************* EMACC->SR  ***************************************/
#define EMACC_SR_RPARK_CF_Pos                 ((uint32_t)4)                     /* Reverse-PARK transformation complete flag */
#define EMACC_SR_RPARK_CF_Mask                (((uint32_t)0x01) << 4)
#define EMACC_SR_RPARK_CF                     EMACC_SR_RPARK_CF_Mask
#define EMACC_SR_PID_CF_Pos                   ((uint32_t)3)                     /* PID transformation complete flag */
#define EMACC_SR_PID_CF_Mask                  (((uint32_t)0x01) << 3)
#define EMACC_SR_PID_CF                       EMACC_SR_PID_CF_Mask
#define EMACC_SR_PARK_CF_Pos                  ((uint32_t)2)                     /* PARK transformation complete flag */
#define EMACC_SR_PARK_CF_Mask                 (((uint32_t)0x01) << 2)
#define EMACC_SR_PARK_CF                      EMACC_SR_PARK_CF_Mask
#define EMACC_SR_CLARKE_CF_Pos                ((uint32_t)1)                     /* CLARKE transformation complete flag */
#define EMACC_SR_CLARKE_CF_Mask               (((uint32_t)0x01) << 1)
#define EMACC_SR_CLARKE_CF                    EMACC_SR_CLARKE_CF_Mask
#define EMACC_SR_CORDIC_CF_Pos                ((uint32_t)0)                     /* CORDIC transformation complete flag */
#define EMACC_SR_CORDIC_CF_Mask               (((uint32_t)0x01) << 0)
#define EMACC_SR_CORDIC_CF                    EMACC_SR_CORDIC_CF_Mask

/*********************************** EMACC->ANG_LDR  ************************************/
#define EMACC_ANG_LDR_ANGLE_IN_Pos            ((uint32_t)0)                     /* Angle input */
#define EMACC_ANG_LDR_ANGLE_IN_Mask           (((uint32_t)0xFFFF) << 0)
#define EMACC_ANG_LDR_ANGLE_IN                EMACC_ANG_LDR_ANGLE_IN_Mask

/********************************* EMACC->CLARKE_LDR  ***********************************/
#define EMACC_CLARKE_LDR_IA_Pos               ((uint32_t)16)                    /* IA phase A current value sampled by ADC */
#define EMACC_CLARKE_LDR_IA_Mask              (((uint32_t)0xFFFF) << 16)
#define EMACC_CLARKE_LDR_IA                   EMACC_CLARKE_LDR_IA_Mask
#define EMACC_CLARKE_LDR_IB_Pos               ((uint32_t)0)                     /* IB phase B current value sampled by ADC */
#define EMACC_CLARKE_LDR_IB_Mask              (((uint32_t)0xFFFF) << 0)
#define EMACC_CLARKE_LDR_IB                   EMACC_CLARKE_LDR_IB_Mask

/******************************** EMACC->CIRCLELMT_CFG  *********************************/
#define EMACC_CIRCLELMT_CFG_START_INDEX_Pos   ((uint32_t)16)                    /* Initiate index value of limit control array of group x */
#define EMACC_CIRCLELMT_CFG_START_INDEX_Mask  (((uint32_t)0xFF) << 16)
#define EMACC_CIRCLELMT_CFG_START_INDEX       EMACC_CIRCLELMT_CFG_START_INDEX_Mask
#define EMACC_CIRCLELMT_CFG_START_INDEX_0     (((uint32_t)0x1 << EMACC_CIRCLELMT_CFG_START_INDEX_Pos))
#define EMACC_CIRCLELMT_CFG_START_INDEX_1     (((uint32_t)0x2 << EMACC_CIRCLELMT_CFG_START_INDEX_Pos))
#define EMACC_CIRCLELMT_CFG_START_INDEX_2     (((uint32_t)0x4 << EMACC_CIRCLELMT_CFG_START_INDEX_Pos))
#define EMACC_CIRCLELMT_CFG_START_INDEX_3     (((uint32_t)0x8 << EMACC_CIRCLELMT_CFG_START_INDEX_Pos))
#define EMACC_CIRCLELMT_CFG_START_INDEX_4     (((uint32_t)0x10 << EMACC_CIRCLELMT_CFG_START_INDEX_Pos))
#define EMACC_CIRCLELMT_CFG_START_INDEX_5     (((uint32_t)0x20 << EMACC_CIRCLELMT_CFG_START_INDEX_Pos))
#define EMACC_CIRCLELMT_CFG_START_INDEX_6     (((uint32_t)0x40 << EMACC_CIRCLELMT_CFG_START_INDEX_Pos))
#define EMACC_CIRCLELMT_CFG_START_INDEX_7     (((uint32_t)0x80 << EMACC_CIRCLELMT_CFG_START_INDEX_Pos))
#define EMACC_CIRCLELMT_CFG_MAX_MODULE_Pos    ((uint32_t)0)                     /* Limit Ring Control Maximum  of group x */
#define EMACC_CIRCLELMT_CFG_MAX_MODULE_Mask   (((uint32_t)0xFFFF) << 0)
#define EMACC_CIRCLELMT_CFG_MAX_MODULE        EMACC_CIRCLELMT_CFG_MAX_MODULE_Mask

/***************************** EMACC->READ_CIRCLELMT_CFG  *******************************/
#define EMACC_READ_CIRCLELMT_CFG_START_INDEX_Pos  ((uint32_t)16)                /* Initiate index value of limit control array */
#define EMACC_READ_CIRCLELMT_CFG_START_INDEX_Mask  (((uint32_t)0xFF) << 16)
#define EMACC_READ_CIRCLELMT_CFG_START_INDEX  EMACC_READ_CIRCLELMT_CFG_START_INDEX_Mask
#define EMACC_READ_CIRCLELMT_CFG_START_INDEX_0  (((uint32_t)0x1 << EMACC_READ_CIRCLELMT_CFG_START_INDEX_Pos))
#define EMACC_READ_CIRCLELMT_CFG_START_INDEX_1  (((uint32_t)0x2 << EMACC_READ_CIRCLELMT_CFG_START_INDEX_Pos))
#define EMACC_READ_CIRCLELMT_CFG_START_INDEX_2  (((uint32_t)0x4 << EMACC_READ_CIRCLELMT_CFG_START_INDEX_Pos))
#define EMACC_READ_CIRCLELMT_CFG_START_INDEX_3  (((uint32_t)0x8 << EMACC_READ_CIRCLELMT_CFG_START_INDEX_Pos))
#define EMACC_READ_CIRCLELMT_CFG_START_INDEX_4  (((uint32_t)0x10 << EMACC_READ_CIRCLELMT_CFG_START_INDEX_Pos))
#define EMACC_READ_CIRCLELMT_CFG_START_INDEX_5  (((uint32_t)0x20 << EMACC_READ_CIRCLELMT_CFG_START_INDEX_Pos))
#define EMACC_READ_CIRCLELMT_CFG_START_INDEX_6  (((uint32_t)0x40 << EMACC_READ_CIRCLELMT_CFG_START_INDEX_Pos))
#define EMACC_READ_CIRCLELMT_CFG_START_INDEX_7  (((uint32_t)0x80 << EMACC_READ_CIRCLELMT_CFG_START_INDEX_Pos))
#define EMACC_READ_CIRCLELMT_CFG_MAX_MODULE_Pos  ((uint32_t)0)                  /* Limit Ring Control Maximum */
#define EMACC_READ_CIRCLELMT_CFG_MAX_MODULE_Mask  (((uint32_t)0xFFFF) << 0)
#define EMACC_READ_CIRCLELMT_CFG_MAX_MODULE   EMACC_READ_CIRCLELMT_CFG_MAX_MODULE_Mask

/*********************************** EMACC->D_KPKI  *************************************/
#define EMACC_D_KPKI_KP_Pos                   ((uint32_t)16)                    /* PID gain parameter for proportion computation of D axis */
#define EMACC_D_KPKI_KP_Mask                  (((uint32_t)0xFFFF) << 16)
#define EMACC_D_KPKI_KP                       EMACC_D_KPKI_KP_Mask
#define EMACC_D_KPKI_KI_Pos                   ((uint32_t)0)                     /* PID gain parameter for integration computation of D axis */
#define EMACC_D_KPKI_KI_Mask                  (((uint32_t)0xFFFF) << 0)
#define EMACC_D_KPKI_KI                       EMACC_D_KPKI_KI_Mask

/********************************* EMACC->D_INTUPPER  ***********************************/
#define EMACC_D_INTUPPER_LMT_Pos              ((uint32_t)0)                     /* PID integration part interation upper limit of D axis */
#define EMACC_D_INTUPPER_LMT_Mask             (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_D_INTUPPER_LMT                  EMACC_D_INTUPPER_LMT_Mask

/********************************* EMACC->D_INTLOWER  ***********************************/
#define EMACC_D_INTLOWER_LMT_Pos              ((uint32_t)0)                     /* PID integration part interation lower limit of D axis */
#define EMACC_D_INTLOWER_LMT_Mask             (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_D_INTLOWER_LMT                  EMACC_D_INTLOWER_LMT_Mask

/********************************** EMACC->D_INTOUT  ************************************/
#define EMACC_D_INTOUT_UPPERLMT_Pos           ((uint32_t)16)                    /* PID Group x PI module output data upper limit value of D axis */
#define EMACC_D_INTOUT_UPPERLMT_Mask          (((uint32_t)0xFFFF) << 16)
#define EMACC_D_INTOUT_UPPERLMT               EMACC_D_INTOUT_UPPERLMT_Mask
#define EMACC_D_INTOUT_LOWERLMT_Pos           ((uint32_t)0)                     /* PID Group x PI module output data lower limit value of D axis */
#define EMACC_D_INTOUT_LOWERLMT_Mask          (((uint32_t)0xFFFF) << 0)
#define EMACC_D_INTOUT_LOWERLMT               EMACC_D_INTOUT_LOWERLMT_Mask

/********************************** EMACC->D_PI_DIV  ************************************/
#define EMACC_D_PI_DIV_KPDIV_Pos              ((uint32_t)16)                    /* PID PI module production part divisor parameter, the number of bits shifted by right */
#define EMACC_D_PI_DIV_KPDIV_Mask             (((uint32_t)0xFFFF) << 16)
#define EMACC_D_PI_DIV_KPDIV                  EMACC_D_PI_DIV_KPDIV_Mask
#define EMACC_D_PI_DIV_KIDIV_Pos              ((uint32_t)0)                     /* PID PI module integration part divisor parameter, the number of bits shifted by right */
#define EMACC_D_PI_DIV_KIDIV_Mask             (((uint32_t)0xFFFF) << 0)
#define EMACC_D_PI_DIV_KIDIV                  EMACC_D_PI_DIV_KIDIV_Mask

/*********************************** EMACC->ID_REF  *************************************/
#define EMACC_ID_REF_IDREF_Pos                ((uint32_t)16)                    /* PID module D channel reference input */
#define EMACC_ID_REF_IDREF_Mask               (((uint32_t)0xFFFF) << 16)
#define EMACC_ID_REF_IDREF                    EMACC_ID_REF_IDREF_Mask

/*********************************** EMACC->Q_KPKI  *************************************/
#define EMACC_Q_KPKI_KP_Pos                   ((uint32_t)16)                    /* PID gain parameter for proportion computation of Q axis */
#define EMACC_Q_KPKI_KP_Mask                  (((uint32_t)0xFFFF) << 16)
#define EMACC_Q_KPKI_KP                       EMACC_Q_KPKI_KP_Mask
#define EMACC_Q_KPKI_KI_Pos                   ((uint32_t)0)                     /* PID gain parameter for integration computation of Q axis */
#define EMACC_Q_KPKI_KI_Mask                  (((uint32_t)0xFFFF) << 0)
#define EMACC_Q_KPKI_KI                       EMACC_Q_KPKI_KI_Mask

/********************************* EMACC->Q_INTUPPER  ***********************************/
#define EMACC_Q_INTUPPER_LMT_Pos              ((uint32_t)0)                     /* PID integration part interation upper limit of Q axis */
#define EMACC_Q_INTUPPER_LMT_Mask             (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_Q_INTUPPER_LMT                  EMACC_Q_INTUPPER_LMT_Mask

/********************************* EMACC->Q_INTLOWER  ***********************************/
#define EMACC_Q_INTLOWER_LMT_Pos              ((uint32_t)0)                     /* PID integration part interation lower limit of Q axis */
#define EMACC_Q_INTLOWER_LMT_Mask             (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_Q_INTLOWER_LMT                  EMACC_Q_INTLOWER_LMT_Mask

/********************************** EMACC->Q_INTOUT  ************************************/
#define EMACC_Q_INTOUT_UPPERLMT_Pos           ((uint32_t)16)                    /* PID Group x PI module output data upper limit value of Q axis */
#define EMACC_Q_INTOUT_UPPERLMT_Mask          (((uint32_t)0xFFFF) << 16)
#define EMACC_Q_INTOUT_UPPERLMT               EMACC_Q_INTOUT_UPPERLMT_Mask
#define EMACC_Q_INTOUT_LOWERLMT_Pos           ((uint32_t)0)                     /* PID Group x PI module output data lower limit value of Q axis */
#define EMACC_Q_INTOUT_LOWERLMT_Mask          (((uint32_t)0xFFFF) << 0)
#define EMACC_Q_INTOUT_LOWERLMT               EMACC_Q_INTOUT_LOWERLMT_Mask

/********************************** EMACC->Q_PI_DIV  ************************************/
#define EMACC_Q_PI_DIV_KPDIV_Pos              ((uint32_t)16)                    /* PID PI module production part divisor parameter, the number of bits shifted by right */
#define EMACC_Q_PI_DIV_KPDIV_Mask             (((uint32_t)0xFFFF) << 16)
#define EMACC_Q_PI_DIV_KPDIV                  EMACC_Q_PI_DIV_KPDIV_Mask
#define EMACC_Q_PI_DIV_KIDIV_Pos              ((uint32_t)0)                     /* PID PI module integration part divisor parameter, the number of bits shifted by right */
#define EMACC_Q_PI_DIV_KIDIV_Mask             (((uint32_t)0xFFFF) << 0)
#define EMACC_Q_PI_DIV_KIDIV                  EMACC_Q_PI_DIV_KIDIV_Mask

/*********************************** EMACC->IQ_REF  *************************************/
#define EMACC_IQ_REF_IQREF_Pos                ((uint32_t)0)                     /* PID module Q channel reference input */
#define EMACC_IQ_REF_IQREF_Mask               (((uint32_t)0xFFFF) << 0)
#define EMACC_IQ_REF_IQREF                    EMACC_IQ_REF_IQREF_Mask

/********************************** EMACC->READ_KPKI  ***********************************/
#define EMACC_READ_KPKI_KP_Pos                ((uint32_t)16)                    /* Current KP gain configuration */
#define EMACC_READ_KPKI_KP_Mask               (((uint32_t)0xFFFF) << 16)
#define EMACC_READ_KPKI_KP                    EMACC_READ_KPKI_KP_Mask
#define EMACC_READ_KPKI_KI_Pos                ((uint32_t)0)                     /* Current KI gain configuration */
#define EMACC_READ_KPKI_KI_Mask               (((uint32_t)0xFFFF) << 0)
#define EMACC_READ_KPKI_KI                    EMACC_READ_KPKI_KI_Mask

/******************************** EMACC->READ_INTUPPER  *********************************/
#define EMACC_READ_INTUPPER_LMT_Pos           ((uint32_t)0)                     /* Current integral upper limit value */
#define EMACC_READ_INTUPPER_LMT_Mask          (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_READ_INTUPPER_LMT               EMACC_READ_INTUPPER_LMT_Mask

/******************************** EMACC->READ_INTLOWER  *********************************/
#define EMACC_READ_INTLOWER_LMT_Pos           ((uint32_t)0)                     /* Current integral lower limit value */
#define EMACC_READ_INTLOWER_LMT_Mask          (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_READ_INTLOWER_LMT               EMACC_READ_INTLOWER_LMT_Mask

/********************************* EMACC->READ_INTOUT  **********************************/
#define EMACC_READ_INTOUT_UPPERLMT_Pos        ((uint32_t)16)                    /* Current dataout upper limit value */
#define EMACC_READ_INTOUT_UPPERLMT_Mask       (((uint32_t)0xFFFF) << 16)
#define EMACC_READ_INTOUT_UPPERLMT            EMACC_READ_INTOUT_UPPERLMT_Mask
#define EMACC_READ_INTOUT_LOWERLMT_Pos        ((uint32_t)0)                     /* Current dataout lower limit value */
#define EMACC_READ_INTOUT_LOWERLMT_Mask       (((uint32_t)0xFFFF) << 0)
#define EMACC_READ_INTOUT_LOWERLMT            EMACC_READ_INTOUT_LOWERLMT_Mask

/********************************* EMACC->READ_PI_DIV  **********************************/
#define EMACC_READ_PI_DIV_KPDIV_Pos           ((uint32_t)16)                    /* Current KP: the number of bits shifted by right */
#define EMACC_READ_PI_DIV_KPDIV_Mask          (((uint32_t)0xFFFF) << 16)
#define EMACC_READ_PI_DIV_KPDIV               EMACC_READ_PI_DIV_KPDIV_Mask
#define EMACC_READ_PI_DIV_KIDIV_Pos           ((uint32_t)0)                     /* Current KI: the number of bits shifted by right */
#define EMACC_READ_PI_DIV_KIDIV_Mask          (((uint32_t)0xFFFF) << 0)
#define EMACC_READ_PI_DIV_KIDIV               EMACC_READ_PI_DIV_KIDIV_Mask

/******************************** EMACC->READ_IDQ_REF  **********************************/
#define EMACC_READ_IDQ_REF_IDREF_Pos          ((uint32_t)16)                    /* D channel reference input */
#define EMACC_READ_IDQ_REF_IDREF_Mask         (((uint32_t)0xFFFF) << 16)
#define EMACC_READ_IDQ_REF_IDREF              EMACC_READ_IDQ_REF_IDREF_Mask
#define EMACC_READ_IDQ_REF_IQREF_Pos          ((uint32_t)0)                     /* Q channel reference input */
#define EMACC_READ_IDQ_REF_IQREF_Mask         (((uint32_t)0xFFFF) << 0)
#define EMACC_READ_IDQ_REF_IQREF              EMACC_READ_IDQ_REF_IQREF_Mask

/******************************* EMACC->PID_RAM_SPACE0  *********************************/
#define EMACC_PID_RAM_SPACE0_RAMDATA_Pos      ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE0_RAMDATA_Mask     (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE0_RAMDATA          EMACC_PID_RAM_SPACE0_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE1  *********************************/
#define EMACC_PID_RAM_SPACE1_RAMDATA_Pos      ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE1_RAMDATA_Mask     (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE1_RAMDATA          EMACC_PID_RAM_SPACE1_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE2  *********************************/
#define EMACC_PID_RAM_SPACE2_RAMDATA_Pos      ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE2_RAMDATA_Mask     (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE2_RAMDATA          EMACC_PID_RAM_SPACE2_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE3  *********************************/
#define EMACC_PID_RAM_SPACE3_RAMDATA_Pos      ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE3_RAMDATA_Mask     (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE3_RAMDATA          EMACC_PID_RAM_SPACE3_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE4  *********************************/
#define EMACC_PID_RAM_SPACE4_RAMDATA_Pos      ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE4_RAMDATA_Mask     (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE4_RAMDATA          EMACC_PID_RAM_SPACE4_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE5  *********************************/
#define EMACC_PID_RAM_SPACE5_RAMDATA_Pos      ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE5_RAMDATA_Mask     (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE5_RAMDATA          EMACC_PID_RAM_SPACE5_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE6  *********************************/
#define EMACC_PID_RAM_SPACE6_RAMDATA_Pos      ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE6_RAMDATA_Mask     (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE6_RAMDATA          EMACC_PID_RAM_SPACE6_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE7  *********************************/
#define EMACC_PID_RAM_SPACE7_RAMDATA_Pos      ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE7_RAMDATA_Mask     (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE7_RAMDATA          EMACC_PID_RAM_SPACE7_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE8  *********************************/
#define EMACC_PID_RAM_SPACE8_RAMDATA_Pos      ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE8_RAMDATA_Mask     (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE8_RAMDATA          EMACC_PID_RAM_SPACE8_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE9  *********************************/
#define EMACC_PID_RAM_SPACE9_RAMDATA_Pos      ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE9_RAMDATA_Mask     (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE9_RAMDATA          EMACC_PID_RAM_SPACE9_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE10  ********************************/
#define EMACC_PID_RAM_SPACE10_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE10_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE10_RAMDATA         EMACC_PID_RAM_SPACE10_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE11  ********************************/
#define EMACC_PID_RAM_SPACE11_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE11_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE11_RAMDATA         EMACC_PID_RAM_SPACE11_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE12  ********************************/
#define EMACC_PID_RAM_SPACE12_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE12_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE12_RAMDATA         EMACC_PID_RAM_SPACE12_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE13  ********************************/
#define EMACC_PID_RAM_SPACE13_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE13_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE13_RAMDATA         EMACC_PID_RAM_SPACE13_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE14  ********************************/
#define EMACC_PID_RAM_SPACE14_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE14_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE14_RAMDATA         EMACC_PID_RAM_SPACE14_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE15  ********************************/
#define EMACC_PID_RAM_SPACE15_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE15_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE15_RAMDATA         EMACC_PID_RAM_SPACE15_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE16  ********************************/
#define EMACC_PID_RAM_SPACE16_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE16_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE16_RAMDATA         EMACC_PID_RAM_SPACE16_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE17  ********************************/
#define EMACC_PID_RAM_SPACE17_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE17_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE17_RAMDATA         EMACC_PID_RAM_SPACE17_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE18  ********************************/
#define EMACC_PID_RAM_SPACE18_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE18_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE18_RAMDATA         EMACC_PID_RAM_SPACE18_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE19  ********************************/
#define EMACC_PID_RAM_SPACE19_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE19_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE19_RAMDATA         EMACC_PID_RAM_SPACE19_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE20  ********************************/
#define EMACC_PID_RAM_SPACE20_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE20_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE20_RAMDATA         EMACC_PID_RAM_SPACE20_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE21  ********************************/
#define EMACC_PID_RAM_SPACE21_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE21_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE21_RAMDATA         EMACC_PID_RAM_SPACE21_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE22  ********************************/
#define EMACC_PID_RAM_SPACE22_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE22_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE22_RAMDATA         EMACC_PID_RAM_SPACE22_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE23  ********************************/
#define EMACC_PID_RAM_SPACE23_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE23_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE23_RAMDATA         EMACC_PID_RAM_SPACE23_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE24  ********************************/
#define EMACC_PID_RAM_SPACE24_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE24_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE24_RAMDATA         EMACC_PID_RAM_SPACE24_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE25  ********************************/
#define EMACC_PID_RAM_SPACE25_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE25_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE25_RAMDATA         EMACC_PID_RAM_SPACE25_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE26  ********************************/
#define EMACC_PID_RAM_SPACE26_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE26_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE26_RAMDATA         EMACC_PID_RAM_SPACE26_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE27  ********************************/
#define EMACC_PID_RAM_SPACE27_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE27_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE27_RAMDATA         EMACC_PID_RAM_SPACE27_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE28  ********************************/
#define EMACC_PID_RAM_SPACE28_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE28_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE28_RAMDATA         EMACC_PID_RAM_SPACE28_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE29  ********************************/
#define EMACC_PID_RAM_SPACE29_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE29_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE29_RAMDATA         EMACC_PID_RAM_SPACE29_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE30  ********************************/
#define EMACC_PID_RAM_SPACE30_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE30_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE30_RAMDATA         EMACC_PID_RAM_SPACE30_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE31  ********************************/
#define EMACC_PID_RAM_SPACE31_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE31_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE31_RAMDATA         EMACC_PID_RAM_SPACE31_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE32  ********************************/
#define EMACC_PID_RAM_SPACE32_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE32_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE32_RAMDATA         EMACC_PID_RAM_SPACE32_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE33  ********************************/
#define EMACC_PID_RAM_SPACE33_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE33_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE33_RAMDATA         EMACC_PID_RAM_SPACE33_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE34  ********************************/
#define EMACC_PID_RAM_SPACE34_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE34_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE34_RAMDATA         EMACC_PID_RAM_SPACE34_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE35  ********************************/
#define EMACC_PID_RAM_SPACE35_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE35_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE35_RAMDATA         EMACC_PID_RAM_SPACE35_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE36  ********************************/
#define EMACC_PID_RAM_SPACE36_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE36_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE36_RAMDATA         EMACC_PID_RAM_SPACE36_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE37  ********************************/
#define EMACC_PID_RAM_SPACE37_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE37_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE37_RAMDATA         EMACC_PID_RAM_SPACE37_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE38  ********************************/
#define EMACC_PID_RAM_SPACE38_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE38_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE38_RAMDATA         EMACC_PID_RAM_SPACE38_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE39  ********************************/
#define EMACC_PID_RAM_SPACE39_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE39_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE39_RAMDATA         EMACC_PID_RAM_SPACE39_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE40  ********************************/
#define EMACC_PID_RAM_SPACE40_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE40_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE40_RAMDATA         EMACC_PID_RAM_SPACE40_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE41  ********************************/
#define EMACC_PID_RAM_SPACE41_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE41_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE41_RAMDATA         EMACC_PID_RAM_SPACE41_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE42  ********************************/
#define EMACC_PID_RAM_SPACE42_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE42_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE42_RAMDATA         EMACC_PID_RAM_SPACE42_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE43  ********************************/
#define EMACC_PID_RAM_SPACE43_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE43_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE43_RAMDATA         EMACC_PID_RAM_SPACE43_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE44  ********************************/
#define EMACC_PID_RAM_SPACE44_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE44_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE44_RAMDATA         EMACC_PID_RAM_SPACE44_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE45  ********************************/
#define EMACC_PID_RAM_SPACE45_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE45_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE45_RAMDATA         EMACC_PID_RAM_SPACE45_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE46  ********************************/
#define EMACC_PID_RAM_SPACE46_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE46_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE46_RAMDATA         EMACC_PID_RAM_SPACE46_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE47  ********************************/
#define EMACC_PID_RAM_SPACE47_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE47_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE47_RAMDATA         EMACC_PID_RAM_SPACE47_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE48  ********************************/
#define EMACC_PID_RAM_SPACE48_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE48_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE48_RAMDATA         EMACC_PID_RAM_SPACE48_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE49  ********************************/
#define EMACC_PID_RAM_SPACE49_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE49_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE49_RAMDATA         EMACC_PID_RAM_SPACE49_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE50  ********************************/
#define EMACC_PID_RAM_SPACE50_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE50_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE50_RAMDATA         EMACC_PID_RAM_SPACE50_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE51  ********************************/
#define EMACC_PID_RAM_SPACE51_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE51_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE51_RAMDATA         EMACC_PID_RAM_SPACE51_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE52  ********************************/
#define EMACC_PID_RAM_SPACE52_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE52_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE52_RAMDATA         EMACC_PID_RAM_SPACE52_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE53  ********************************/
#define EMACC_PID_RAM_SPACE53_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE53_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE53_RAMDATA         EMACC_PID_RAM_SPACE53_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE54  ********************************/
#define EMACC_PID_RAM_SPACE54_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE54_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE54_RAMDATA         EMACC_PID_RAM_SPACE54_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE55  ********************************/
#define EMACC_PID_RAM_SPACE55_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE55_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE55_RAMDATA         EMACC_PID_RAM_SPACE55_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE56  ********************************/
#define EMACC_PID_RAM_SPACE56_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE56_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE56_RAMDATA         EMACC_PID_RAM_SPACE56_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE57  ********************************/
#define EMACC_PID_RAM_SPACE57_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE57_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE57_RAMDATA         EMACC_PID_RAM_SPACE57_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE58  ********************************/
#define EMACC_PID_RAM_SPACE58_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE58_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE58_RAMDATA         EMACC_PID_RAM_SPACE58_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE59  ********************************/
#define EMACC_PID_RAM_SPACE59_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE59_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE59_RAMDATA         EMACC_PID_RAM_SPACE59_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE60  ********************************/
#define EMACC_PID_RAM_SPACE60_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE60_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE60_RAMDATA         EMACC_PID_RAM_SPACE60_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE61  ********************************/
#define EMACC_PID_RAM_SPACE61_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE61_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE61_RAMDATA         EMACC_PID_RAM_SPACE61_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE62  ********************************/
#define EMACC_PID_RAM_SPACE62_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE62_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE62_RAMDATA         EMACC_PID_RAM_SPACE62_RAMDATA_Mask

/******************************* EMACC->PID_RAM_SPACE63  ********************************/
#define EMACC_PID_RAM_SPACE63_RAMDATA_Pos     ((uint32_t)0)                     /* MMITABLE data load to EMACC */
#define EMACC_PID_RAM_SPACE63_RAMDATA_Mask    (((uint32_t)0xFFFFFFFF) << 0)
#define EMACC_PID_RAM_SPACE63_RAMDATA         EMACC_PID_RAM_SPACE63_RAMDATA_Mask

/*****************************************************************************************
*                                     Peripheral ADC                                     *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t ISR;                    /* ISR */
    __IO uint32_t IER;                    /* IER */
    __IO uint32_t CR;                     /* CR */
    __IO uint32_t CFGR1;                  /* CFGR1 */
    __IO uint32_t CFGR2;                  /* CFGR2 */
    __IO uint32_t SMPR;                   /* SMPR */
    uint16_t RESERVED1[4];
    __IO uint32_t TR;                     /* TR */
    uint16_t RESERVED2[2];
    __IO uint32_t CHSELR;                 /* CHSELR */
    uint16_t RESERVED3[10];
    __I  uint32_t DR;                     /* DR */
    uint16_t RESERVED4[354];
    __IO uint32_t CCR;                    /* CCR */
    uint16_t RESERVED5[114];
    __IO uint32_t CFGR3;                  /* CFGR3 */
    uint16_t RESERVED6[2];
    __IO uint32_t GAIN;                   /* GAIN */
} ADC_TypeDef;

/************************************** ADC->ISR  ***************************************/
#define ADC_ISR_EOCAL_Pos                     ((uint32_t)11)                    /* End of calibration flag */
#define ADC_ISR_EOCAL_Mask                    (((uint32_t)0x01) << 11)
#define ADC_ISR_EOCAL                         ADC_ISR_EOCAL_Mask
#define ADC_ISR_AWD_Pos                       ((uint32_t)7)                     /* Analog watchdog flag */
#define ADC_ISR_AWD_Mask                      (((uint32_t)0x01) << 7)
#define ADC_ISR_AWD                           ADC_ISR_AWD_Mask
#define ADC_ISR_OVR_Pos                       ((uint32_t)4)                     /* ADC overrun */
#define ADC_ISR_OVR_Mask                      (((uint32_t)0x01) << 4)
#define ADC_ISR_OVR                           ADC_ISR_OVR_Mask
#define ADC_ISR_EOSEQ_Pos                     ((uint32_t)3)                     /* End of sequence flag */
#define ADC_ISR_EOSEQ_Mask                    (((uint32_t)0x01) << 3)
#define ADC_ISR_EOSEQ                         ADC_ISR_EOSEQ_Mask
#define ADC_ISR_EOC_Pos                       ((uint32_t)2)                     /* End of conversion flag */
#define ADC_ISR_EOC_Mask                      (((uint32_t)0x01) << 2)
#define ADC_ISR_EOC                           ADC_ISR_EOC_Mask
#define ADC_ISR_EOSMP_Pos                     ((uint32_t)1)                     /* End of sampling flag */
#define ADC_ISR_EOSMP_Mask                    (((uint32_t)0x01) << 1)
#define ADC_ISR_EOSMP                         ADC_ISR_EOSMP_Mask
#define ADC_ISR_ADRDY_Pos                     ((uint32_t)0)                     /* ADC ready */
#define ADC_ISR_ADRDY_Mask                    (((uint32_t)0x01) << 0)
#define ADC_ISR_ADRDY                         ADC_ISR_ADRDY_Mask

/************************************** ADC->IER  ***************************************/
#define ADC_IER_EOCALIE_Pos                   ((uint32_t)11)                    /* End of calibration interrupt enable */
#define ADC_IER_EOCALIE_Mask                  (((uint32_t)0x01) << 11)
#define ADC_IER_EOCALIE                       ADC_IER_EOCALIE_Mask
#define ADC_IER_AWDIE_Pos                     ((uint32_t)7)                     /* Analog watchdog interrupt enable */
#define ADC_IER_AWDIE_Mask                    (((uint32_t)0x01) << 7)
#define ADC_IER_AWDIE                         ADC_IER_AWDIE_Mask
#define ADC_IER_OVRIE_Pos                     ((uint32_t)4)                     /* Overrun interrupt enable */
#define ADC_IER_OVRIE_Mask                    (((uint32_t)0x01) << 4)
#define ADC_IER_OVRIE                         ADC_IER_OVRIE_Mask
#define ADC_IER_EOSEQIE_Pos                   ((uint32_t)3)                     /* End of conversion sequence interrupt enable */
#define ADC_IER_EOSEQIE_Mask                  (((uint32_t)0x01) << 3)
#define ADC_IER_EOSEQIE                       ADC_IER_EOSEQIE_Mask
#define ADC_IER_EOCIE_Pos                     ((uint32_t)2)                     /* End of conversion interrupt enable */
#define ADC_IER_EOCIE_Mask                    (((uint32_t)0x01) << 2)
#define ADC_IER_EOCIE                         ADC_IER_EOCIE_Mask
#define ADC_IER_EOSMPIE_Pos                   ((uint32_t)1)                     /* End of sampling interrupt enable */
#define ADC_IER_EOSMPIE_Mask                  (((uint32_t)0x01) << 1)
#define ADC_IER_EOSMPIE                       ADC_IER_EOSMPIE_Mask
#define ADC_IER_ADRDYIE_Pos                   ((uint32_t)0)                     /* ADC ready interrupt enable */
#define ADC_IER_ADRDYIE_Mask                  (((uint32_t)0x01) << 0)
#define ADC_IER_ADRDYIE                       ADC_IER_ADRDYIE_Mask

/************************************** ADC->CR  ****************************************/
#define ADC_CR_ADCAL_Pos                      ((uint32_t)31)                    /* ADC calibration */
#define ADC_CR_ADCAL_Mask                     (((uint32_t)0x01) << 31)
#define ADC_CR_ADCAL                          ADC_CR_ADCAL_Mask
#define ADC_CR_ADSTP_Pos                      ((uint32_t)4)                     /* ADC stop conversion command */
#define ADC_CR_ADSTP_Mask                     (((uint32_t)0x01) << 4)
#define ADC_CR_ADSTP                          ADC_CR_ADSTP_Mask
#define ADC_CR_ADSTART_Pos                    ((uint32_t)2)                     /* ADC start conversion command */
#define ADC_CR_ADSTART_Mask                   (((uint32_t)0x01) << 2)
#define ADC_CR_ADSTART                        ADC_CR_ADSTART_Mask
#define ADC_CR_ADDIS_Pos                      ((uint32_t)1)                     /* ADC disable command */
#define ADC_CR_ADDIS_Mask                     (((uint32_t)0x01) << 1)
#define ADC_CR_ADDIS                          ADC_CR_ADDIS_Mask
#define ADC_CR_ADEN_Pos                       ((uint32_t)0)                     /* ADC enable command */
#define ADC_CR_ADEN_Mask                      (((uint32_t)0x01) << 0)
#define ADC_CR_ADEN                           ADC_CR_ADEN_Mask

/************************************* ADC->CFGR1  **************************************/
#define ADC_CFGR1_AWDCH_Pos                   ((uint32_t)26)                    /* Analog watchdog channel selection */
#define ADC_CFGR1_AWDCH_Mask                  (((uint32_t)0x1F) << 26)
#define ADC_CFGR1_AWDCH                       ADC_CFGR1_AWDCH_Mask
#define ADC_CFGR1_AWDCH_0                     (((uint32_t)0x1 << ADC_CFGR1_AWDCH_Pos))
#define ADC_CFGR1_AWDCH_1                     (((uint32_t)0x2 << ADC_CFGR1_AWDCH_Pos))
#define ADC_CFGR1_AWDCH_2                     (((uint32_t)0x4 << ADC_CFGR1_AWDCH_Pos))
#define ADC_CFGR1_AWDCH_3                     (((uint32_t)0x8 << ADC_CFGR1_AWDCH_Pos))
#define ADC_CFGR1_AWDCH_4                     (((uint32_t)0x10 << ADC_CFGR1_AWDCH_Pos))
#define ADC_CFGR1_AWDEN_Pos                   ((uint32_t)23)                    /* Analog watchdog enable */
#define ADC_CFGR1_AWDEN_Mask                  (((uint32_t)0x01) << 23)
#define ADC_CFGR1_AWDEN                       ADC_CFGR1_AWDEN_Mask
#define ADC_CFGR1_AWDSGL_Pos                  ((uint32_t)22)                    /* Enable the watchdog on a single channel or on all channels */
#define ADC_CFGR1_AWDSGL_Mask                 (((uint32_t)0x01) << 22)
#define ADC_CFGR1_AWDSGL                      ADC_CFGR1_AWDSGL_Mask
#define ADC_CFGR1_DISCEN_Pos                  ((uint32_t)16)                    /* Discontinuous mode */
#define ADC_CFGR1_DISCEN_Mask                 (((uint32_t)0x01) << 16)
#define ADC_CFGR1_DISCEN                      ADC_CFGR1_DISCEN_Mask
#define ADC_CFGR1_AUTOFF_Pos                  ((uint32_t)15)                    /* Auto-off mode */
#define ADC_CFGR1_AUTOFF_Mask                 (((uint32_t)0x01) << 15)
#define ADC_CFGR1_AUTOFF                      ADC_CFGR1_AUTOFF_Mask
#define ADC_CFGR1_WAIT_Pos                    ((uint32_t)14)                    /* Wait conversion mode */
#define ADC_CFGR1_WAIT_Mask                   (((uint32_t)0x01) << 14)
#define ADC_CFGR1_WAIT                        ADC_CFGR1_WAIT_Mask
#define ADC_CFGR1_CONT_Pos                    ((uint32_t)13)                    /* Single/continuous conversion mode */
#define ADC_CFGR1_CONT_Mask                   (((uint32_t)0x01) << 13)
#define ADC_CFGR1_CONT                        ADC_CFGR1_CONT_Mask
#define ADC_CFGR1_OVRMOD_Pos                  ((uint32_t)12)                    /* Overrun management mode */
#define ADC_CFGR1_OVRMOD_Mask                 (((uint32_t)0x01) << 12)
#define ADC_CFGR1_OVRMOD                      ADC_CFGR1_OVRMOD_Mask
#define ADC_CFGR1_EXTEN_Pos                   ((uint32_t)10)                    /* External trigger enable and polarity selection */
#define ADC_CFGR1_EXTEN_Mask                  (((uint32_t)0x03) << 10)
#define ADC_CFGR1_EXTEN                       ADC_CFGR1_EXTEN_Mask
#define ADC_CFGR1_EXTEN_0                     (((uint32_t)0x1 << ADC_CFGR1_EXTEN_Pos))
#define ADC_CFGR1_EXTEN_1                     (((uint32_t)0x2 << ADC_CFGR1_EXTEN_Pos))
#define ADC_CFGR1_EXTSEL_Pos                  ((uint32_t)6)                     /* External trigger selection */
#define ADC_CFGR1_EXTSEL_Mask                 (((uint32_t)0x0F) << 6)
#define ADC_CFGR1_EXTSEL                      ADC_CFGR1_EXTSEL_Mask
#define ADC_CFGR1_EXTSEL_0                    (((uint32_t)0x1 << ADC_CFGR1_EXTSEL_Pos))
#define ADC_CFGR1_EXTSEL_1                    (((uint32_t)0x2 << ADC_CFGR1_EXTSEL_Pos))
#define ADC_CFGR1_EXTSEL_2                    (((uint32_t)0x4 << ADC_CFGR1_EXTSEL_Pos))
#define ADC_CFGR1_EXTSEL_3                    (((uint32_t)0x8 << ADC_CFGR1_EXTSEL_Pos))
#define ADC_CFGR1_ALIGN_Pos                   ((uint32_t)5)                     /* Data alignment */
#define ADC_CFGR1_ALIGN_Mask                  (((uint32_t)0x01) << 5)
#define ADC_CFGR1_ALIGN                       ADC_CFGR1_ALIGN_Mask
#define ADC_CFGR1_RES_Pos                     ((uint32_t)3)                     /* Data resolution */
#define ADC_CFGR1_RES_Mask                    (((uint32_t)0x03) << 3)
#define ADC_CFGR1_RES                         ADC_CFGR1_RES_Mask
#define ADC_CFGR1_RES_0                       (((uint32_t)0x1 << ADC_CFGR1_RES_Pos))
#define ADC_CFGR1_RES_1                       (((uint32_t)0x2 << ADC_CFGR1_RES_Pos))
#define ADC_CFGR1_SCANDIR_Pos                 ((uint32_t)2)                     /* Scan sequence direction */
#define ADC_CFGR1_SCANDIR_Mask                (((uint32_t)0x01) << 2)
#define ADC_CFGR1_SCANDIR                     ADC_CFGR1_SCANDIR_Mask
#define ADC_CFGR1_DMACFG_Pos                  ((uint32_t)1)                     /* Direct memory access configuration */
#define ADC_CFGR1_DMACFG_Mask                 (((uint32_t)0x01) << 1)
#define ADC_CFGR1_DMACFG                      ADC_CFGR1_DMACFG_Mask
#define ADC_CFGR1_DMAEN_Pos                   ((uint32_t)0)                     /* Direct memory access enable */
#define ADC_CFGR1_DMAEN_Mask                  (((uint32_t)0x01) << 0)
#define ADC_CFGR1_DMAEN                       ADC_CFGR1_DMAEN_Mask

/************************************* ADC->CFGR2  **************************************/
#define ADC_CFGR2_CKMODE_Pos                  ((uint32_t)30)                    /* ADC clock mode */
#define ADC_CFGR2_CKMODE_Mask                 (((uint32_t)0x03) << 30)
#define ADC_CFGR2_CKMODE                      ADC_CFGR2_CKMODE_Mask
#define ADC_CFGR2_CKMODE_0                    (((uint32_t)0x1 << ADC_CFGR2_CKMODE_Pos))
#define ADC_CFGR2_CKMODE_1                    (((uint32_t)0x2 << ADC_CFGR2_CKMODE_Pos))
#define ADC_CFGR2_TOVS_Pos                    ((uint32_t)9)                     /* Triggered Oversampling */
#define ADC_CFGR2_TOVS_Mask                   (((uint32_t)0x01) << 9)
#define ADC_CFGR2_TOVS                        ADC_CFGR2_TOVS_Mask
#define ADC_CFGR2_OVSS_Pos                    ((uint32_t)5)                     /* Oversampling shift */
#define ADC_CFGR2_OVSS_Mask                   (((uint32_t)0x0F) << 5)
#define ADC_CFGR2_OVSS                        ADC_CFGR2_OVSS_Mask
#define ADC_CFGR2_OVSS_0                      (((uint32_t)0x1 << ADC_CFGR2_OVSS_Pos))
#define ADC_CFGR2_OVSS_1                      (((uint32_t)0x2 << ADC_CFGR2_OVSS_Pos))
#define ADC_CFGR2_OVSS_2                      (((uint32_t)0x4 << ADC_CFGR2_OVSS_Pos))
#define ADC_CFGR2_OVSS_3                      (((uint32_t)0x8 << ADC_CFGR2_OVSS_Pos))
#define ADC_CFGR2_OVSR_Pos                    ((uint32_t)2)                     /* Oversampling ratio */
#define ADC_CFGR2_OVSR_Mask                   (((uint32_t)0x07) << 2)
#define ADC_CFGR2_OVSR                        ADC_CFGR2_OVSR_Mask
#define ADC_CFGR2_OVSR_0                      (((uint32_t)0x1 << ADC_CFGR2_OVSR_Pos))
#define ADC_CFGR2_OVSR_1                      (((uint32_t)0x2 << ADC_CFGR2_OVSR_Pos))
#define ADC_CFGR2_OVSR_2                      (((uint32_t)0x4 << ADC_CFGR2_OVSR_Pos))
#define ADC_CFGR2_OVSE_Pos                    ((uint32_t)0)                     /* Oversampler Enable */
#define ADC_CFGR2_OVSE_Mask                   (((uint32_t)0x01) << 0)
#define ADC_CFGR2_OVSE                        ADC_CFGR2_OVSE_Mask

/************************************* ADC->CFGR3  **************************************/
#define ADC_CFGR3_WAKE_EN_Pos                 ((uint32_t)31)                    /* Analog watchdog weak up enable */
#define ADC_CFGR3_WAKE_EN_Mask                (((uint32_t)0x01) << 31)
#define ADC_CFGR3_WAKE_EN                     ADC_CFGR3_WAKE_EN_Mask
#define ADC_CFGR3_OVSEN_Pos                   ((uint32_t)2)                     /* Oversampling  function enable */
#define ADC_CFGR3_OVSEN_Mask                  (((uint32_t)0x01) << 2)
#define ADC_CFGR3_OVSEN                       ADC_CFGR3_OVSEN_Mask
#define ADC_CFGR3_SDIF_Pos                    ((uint32_t)1)                     /* The differential input enable */
#define ADC_CFGR3_SDIF_Mask                   (((uint32_t)0x01) << 1)
#define ADC_CFGR3_SDIF                        ADC_CFGR3_SDIF_Mask

/************************************* ADC->SMPR  ***************************************/
#define ADC_SMPR_SMP_Pos                      ((uint32_t)0)                     /* Sampling time selection */
#define ADC_SMPR_SMP_Mask                     (((uint32_t)0x07) << 0)
#define ADC_SMPR_SMP                          ADC_SMPR_SMP_Mask
#define ADC_SMPR_SMP_0                        (((uint32_t)0x1))
#define ADC_SMPR_SMP_1                        (((uint32_t)0x2))
#define ADC_SMPR_SMP_2                        (((uint32_t)0x4))

/************************************** ADC->TR  ****************************************/
#define ADC_TR_HT_Pos                         ((uint32_t)16)                    /* Analog watchdog higher threshold */
#define ADC_TR_HT_Mask                        (((uint32_t)0x0FFF) << 16)
#define ADC_TR_HT                             ADC_TR_HT_Mask
#define ADC_TR_HT_0                           (((uint32_t)0x1 << ADC_TR_HT_Pos))
#define ADC_TR_HT_1                           (((uint32_t)0x2 << ADC_TR_HT_Pos))
#define ADC_TR_HT_2                           (((uint32_t)0x4 << ADC_TR_HT_Pos))
#define ADC_TR_HT_3                           (((uint32_t)0x8 << ADC_TR_HT_Pos))
#define ADC_TR_HT_4                           (((uint32_t)0x10 << ADC_TR_HT_Pos))
#define ADC_TR_HT_5                           (((uint32_t)0x20 << ADC_TR_HT_Pos))
#define ADC_TR_HT_6                           (((uint32_t)0x40 << ADC_TR_HT_Pos))
#define ADC_TR_HT_7                           (((uint32_t)0x80 << ADC_TR_HT_Pos))
#define ADC_TR_HT_8                           (((uint32_t)0x100 << ADC_TR_HT_Pos))
#define ADC_TR_HT_9                           (((uint32_t)0x200 << ADC_TR_HT_Pos))
#define ADC_TR_HT_10                          (((uint32_t)0x400 << ADC_TR_HT_Pos))
#define ADC_TR_HT_11                          (((uint32_t)0x800 << ADC_TR_HT_Pos))
#define ADC_TR_LT_Pos                         ((uint32_t)0)                     /* Analog watchdog lower threshold */
#define ADC_TR_LT_Mask                        (((uint32_t)0x0FFF) << 0)
#define ADC_TR_LT                             ADC_TR_LT_Mask
#define ADC_TR_LT_0                           (((uint32_t)0x1))
#define ADC_TR_LT_1                           (((uint32_t)0x2))
#define ADC_TR_LT_2                           (((uint32_t)0x4))
#define ADC_TR_LT_3                           (((uint32_t)0x8))
#define ADC_TR_LT_4                           (((uint32_t)0x10))
#define ADC_TR_LT_5                           (((uint32_t)0x20))
#define ADC_TR_LT_6                           (((uint32_t)0x40))
#define ADC_TR_LT_7                           (((uint32_t)0x80))
#define ADC_TR_LT_8                           (((uint32_t)0x100))
#define ADC_TR_LT_9                           (((uint32_t)0x200))
#define ADC_TR_LT_10                          (((uint32_t)0x400))
#define ADC_TR_LT_11                          (((uint32_t)0x800))

/************************************ ADC->CHSELR  **************************************/
#define ADC_CHSELR_CHSEL0_Pos                 ((uint32_t)0)                     /* Channel-x selection */
#define ADC_CHSELR_CHSEL0_Mask                (((uint32_t)0x01) << 0)
#define ADC_CHSELR_CHSEL0                     ADC_CHSELR_CHSEL0_Mask
#define ADC_CHSELR_CHSEL1_Pos                 ((uint32_t)1)                     /* Channel-x selection */
#define ADC_CHSELR_CHSEL1_Mask                (((uint32_t)0x01) << 1)
#define ADC_CHSELR_CHSEL1                     ADC_CHSELR_CHSEL1_Mask
#define ADC_CHSELR_CHSEL2_Pos                 ((uint32_t)2)                     /* Channel-x selection */
#define ADC_CHSELR_CHSEL2_Mask                (((uint32_t)0x01) << 2)
#define ADC_CHSELR_CHSEL2                     ADC_CHSELR_CHSEL2_Mask
#define ADC_CHSELR_CHSEL3_Pos                 ((uint32_t)3)                     /* Channel-x selection */
#define ADC_CHSELR_CHSEL3_Mask                (((uint32_t)0x01) << 3)
#define ADC_CHSELR_CHSEL3                     ADC_CHSELR_CHSEL3_Mask
#define ADC_CHSELR_CHSEL4_Pos                 ((uint32_t)4)                     /* Channel-x selection */
#define ADC_CHSELR_CHSEL4_Mask                (((uint32_t)0x01) << 4)
#define ADC_CHSELR_CHSEL4                     ADC_CHSELR_CHSEL4_Mask
#define ADC_CHSELR_CHSEL5_Pos                 ((uint32_t)5)                     /* Channel-x selection */
#define ADC_CHSELR_CHSEL5_Mask                (((uint32_t)0x01) << 5)
#define ADC_CHSELR_CHSEL5                     ADC_CHSELR_CHSEL5_Mask
#define ADC_CHSELR_CHSEL6_Pos                 ((uint32_t)6)                     /* Channel-x selection */
#define ADC_CHSELR_CHSEL6_Mask                (((uint32_t)0x01) << 6)
#define ADC_CHSELR_CHSEL6                     ADC_CHSELR_CHSEL6_Mask
#define ADC_CHSELR_CHSEL7_Pos                 ((uint32_t)7)                     /* Channel-x selection */
#define ADC_CHSELR_CHSEL7_Mask                (((uint32_t)0x01) << 7)
#define ADC_CHSELR_CHSEL7                     ADC_CHSELR_CHSEL7_Mask
#define ADC_CHSELR_CHSEL8_Pos                 ((uint32_t)8)                     /* Channel-x selection */
#define ADC_CHSELR_CHSEL8_Mask                (((uint32_t)0x01) << 8)
#define ADC_CHSELR_CHSEL8                     ADC_CHSELR_CHSEL8_Mask
#define ADC_CHSELR_CHSEL9_Pos                 ((uint32_t)9)                     /* Channel-x selection */
#define ADC_CHSELR_CHSEL9_Mask                (((uint32_t)0x01) << 9)
#define ADC_CHSELR_CHSEL9                     ADC_CHSELR_CHSEL9_Mask
#define ADC_CHSELR_CHSEL10_Pos                ((uint32_t)10)                    /* Channel-x selection */
#define ADC_CHSELR_CHSEL10_Mask               (((uint32_t)0x01) << 10)
#define ADC_CHSELR_CHSEL10                    ADC_CHSELR_CHSEL10_Mask
#define ADC_CHSELR_CHSEL11_Pos                ((uint32_t)11)                    /* Channel-x selection */
#define ADC_CHSELR_CHSEL11_Mask               (((uint32_t)0x01) << 11)
#define ADC_CHSELR_CHSEL11                    ADC_CHSELR_CHSEL11_Mask
#define ADC_CHSELR_CHSEL12_Pos                ((uint32_t)12)                    /* Channel-x selection */
#define ADC_CHSELR_CHSEL12_Mask               (((uint32_t)0x01) << 12)
#define ADC_CHSELR_CHSEL12                    ADC_CHSELR_CHSEL12_Mask
#define ADC_CHSELR_CHSEL13_Pos                ((uint32_t)13)                    /* Channel-x selection */
#define ADC_CHSELR_CHSEL13_Mask               (((uint32_t)0x01) << 13)
#define ADC_CHSELR_CHSEL13                    ADC_CHSELR_CHSEL13_Mask
#define ADC_CHSELR_CHSEL14_Pos                ((uint32_t)14)                    /* Channel-x selection */
#define ADC_CHSELR_CHSEL14_Mask               (((uint32_t)0x01) << 14)
#define ADC_CHSELR_CHSEL14                    ADC_CHSELR_CHSEL14_Mask
#define ADC_CHSELR_CHSEL15_Pos                ((uint32_t)15)                    /* Channel-x selection */
#define ADC_CHSELR_CHSEL15_Mask               (((uint32_t)0x01) << 15)
#define ADC_CHSELR_CHSEL15                    ADC_CHSELR_CHSEL15_Mask
#define ADC_CHSELR_CHSEL16_Pos                ((uint32_t)16)                    /* Channel-x selection */
#define ADC_CHSELR_CHSEL16_Mask               (((uint32_t)0x01) << 16)
#define ADC_CHSELR_CHSEL16                    ADC_CHSELR_CHSEL16_Mask
#define ADC_CHSELR_CHSEL17_Pos                ((uint32_t)17)                    /* Channel-x selection */
#define ADC_CHSELR_CHSEL17_Mask               (((uint32_t)0x01) << 17)
#define ADC_CHSELR_CHSEL17                    ADC_CHSELR_CHSEL17_Mask
#define ADC_CHSELR_CHSEL18_Pos                ((uint32_t)18)                    /* Channel-x selection */
#define ADC_CHSELR_CHSEL18_Mask               (((uint32_t)0x01) << 18)
#define ADC_CHSELR_CHSEL18                    ADC_CHSELR_CHSEL18_Mask
#define ADC_CHSELR_CHSEL19_Pos                ((uint32_t)19)                    /* Channel-x selection */
#define ADC_CHSELR_CHSEL19_Mask               (((uint32_t)0x01) << 19)
#define ADC_CHSELR_CHSEL19                    ADC_CHSELR_CHSEL19_Mask

/************************************** ADC->DR  ****************************************/
#define ADC_DR_DATA_Pos                       ((uint32_t)0)                     /* Converted data */
#define ADC_DR_DATA_Mask                      (((uint32_t)0xFFFF) << 0)
#define ADC_DR_DATA                           ADC_DR_DATA_Mask

/************************************** ADC->CCR  ***************************************/
#define ADC_CCR_VLCDEN_Pos                    ((uint32_t)24)                    /* VLCD enable */
#define ADC_CCR_VLCDEN_Mask                   (((uint32_t)0x01) << 24)
#define ADC_CCR_VLCDEN                        ADC_CCR_VLCDEN_Mask
#define ADC_CCR_TSEN_Pos                      ((uint32_t)23)                    /* Temperature sensor enable */
#define ADC_CCR_TSEN_Mask                     (((uint32_t)0x01) << 23)
#define ADC_CCR_TSEN                          ADC_CCR_TSEN_Mask
#define ADC_CCR_VREFEN_Pos                    ((uint32_t)22)                    /* VREFINT enable */
#define ADC_CCR_VREFEN_Mask                   (((uint32_t)0x01) << 22)
#define ADC_CCR_VREFEN                        ADC_CCR_VREFEN_Mask
#define ADC_CCR_PRESC_Pos                     ((uint32_t)18)                    /* ADC prescaler */
#define ADC_CCR_PRESC_Mask                    (((uint32_t)0x0F) << 18)
#define ADC_CCR_PRESC                         ADC_CCR_PRESC_Mask
#define ADC_CCR_PRESC_0                       (((uint32_t)0x1 << ADC_CCR_PRESC_Pos))
#define ADC_CCR_PRESC_1                       (((uint32_t)0x2 << ADC_CCR_PRESC_Pos))
#define ADC_CCR_PRESC_2                       (((uint32_t)0x4 << ADC_CCR_PRESC_Pos))
#define ADC_CCR_PRESC_3                       (((uint32_t)0x8 << ADC_CCR_PRESC_Pos))

/************************************* ADC->GAIN  ***************************************/
#define ADC_GAIN_GAIN_SEL2_Pos                ((uint32_t)3)                     /* Gain Factor 2 configuration */
#define ADC_GAIN_GAIN_SEL2_Mask               (((uint32_t)0x07) << 3)
#define ADC_GAIN_GAIN_SEL2                    ADC_GAIN_GAIN_SEL2_Mask
#define ADC_GAIN_GAIN_SEL2_0                  (((uint32_t)0x1 << ADC_GAIN_GAIN_SEL2_Pos))
#define ADC_GAIN_GAIN_SEL2_1                  (((uint32_t)0x2 << ADC_GAIN_GAIN_SEL2_Pos))
#define ADC_GAIN_GAIN_SEL2_2                  (((uint32_t)0x4 << ADC_GAIN_GAIN_SEL2_Pos))
#define ADC_GAIN_GAIN_SEL1_Pos                ((uint32_t)0)                     /* Gain Factor 1 configuration */
#define ADC_GAIN_GAIN_SEL1_Mask               (((uint32_t)0x07) << 0)
#define ADC_GAIN_GAIN_SEL1                    ADC_GAIN_GAIN_SEL1_Mask
#define ADC_GAIN_GAIN_SEL1_0                  (((uint32_t)0x1))
#define ADC_GAIN_GAIN_SEL1_1                  (((uint32_t)0x2))
#define ADC_GAIN_GAIN_SEL1_2                  (((uint32_t)0x4))

/*****************************************************************************************
*                                     Peripheral DAC                                     *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t CR;                     /* CR */
    __O  uint32_t SWTRIGR;                /* SWTRIGR */
    __IO uint32_t DHR12R;                 /* DHR12R */
    __IO uint32_t DHR12L;                 /* DHR12L */
    __IO uint32_t DHR8R;                  /* DHR8R */
    uint16_t RESERVED1[12];
    __I  uint32_t DOR;                    /* DOR */
    uint16_t RESERVED2[2];
    __IO uint32_t SR;                     /* SR */
} DAC_TypeDef;

/************************************** DAC->CR  ****************************************/
#define DAC_CR_TSEL_H_Pos                     ((uint32_t)15)                    /* DAC trigger channel selection high bit */
#define DAC_CR_TSEL_H_Mask                    (((uint32_t)0x01) << 15)
#define DAC_CR_TSEL_H                         DAC_CR_TSEL_H_Mask
#define DAC_CR_DMAUDRIE_Pos                   ((uint32_t)13)                    /* DAC channel DMA underrun interrupt enable */
#define DAC_CR_DMAUDRIE_Mask                  (((uint32_t)0x01) << 13)
#define DAC_CR_DMAUDRIE                       DAC_CR_DMAUDRIE_Mask
#define DAC_CR_DMAEN_Pos                      ((uint32_t)12)                    /* DAC channel DMA enable */
#define DAC_CR_DMAEN_Mask                     (((uint32_t)0x01) << 12)
#define DAC_CR_DMAEN                          DAC_CR_DMAEN_Mask
#define DAC_CR_MAMP_Pos                       ((uint32_t)8)                     /* DAC channel mask/amplitude selector */
#define DAC_CR_MAMP_Mask                      (((uint32_t)0x0F) << 8)
#define DAC_CR_MAMP                           DAC_CR_MAMP_Mask
#define DAC_CR_MAMP_0                         (((uint32_t)0x1 << DAC_CR_MAMP_Pos))
#define DAC_CR_MAMP_1                         (((uint32_t)0x2 << DAC_CR_MAMP_Pos))
#define DAC_CR_MAMP_2                         (((uint32_t)0x4 << DAC_CR_MAMP_Pos))
#define DAC_CR_MAMP_3                         (((uint32_t)0x8 << DAC_CR_MAMP_Pos))
#define DAC_CR_WAVE_Pos                       ((uint32_t)6)                     /* DAC channel noise/triangle wave generation enable */
#define DAC_CR_WAVE_Mask                      (((uint32_t)0x03) << 6)
#define DAC_CR_WAVE                           DAC_CR_WAVE_Mask
#define DAC_CR_WAVE_0                         (((uint32_t)0x1 << DAC_CR_WAVE_Pos))
#define DAC_CR_WAVE_1                         (((uint32_t)0x2 << DAC_CR_WAVE_Pos))
#define DAC_CR_TSEL_L_Pos                     ((uint32_t)3)                     /* DAC trigger channel selection low bit */
#define DAC_CR_TSEL_L_Mask                    (((uint32_t)0x07) << 3)
#define DAC_CR_TSEL_L                         DAC_CR_TSEL_L_Mask
#define DAC_CR_TSEL_L_0                       (((uint32_t)0x1 << DAC_CR_TSEL_L_Pos))
#define DAC_CR_TSEL_L_1                       (((uint32_t)0x2 << DAC_CR_TSEL_L_Pos))
#define DAC_CR_TSEL_L_2                       (((uint32_t)0x4 << DAC_CR_TSEL_L_Pos))
#define DAC_CR_TEN_Pos                        ((uint32_t)2)                     /* DAC channel trigger enable */
#define DAC_CR_TEN_Mask                       (((uint32_t)0x01) << 2)
#define DAC_CR_TEN                            DAC_CR_TEN_Mask
#define DAC_CR_BOFF_Pos                       ((uint32_t)1)                     /* DAC channel output buffer disable */
#define DAC_CR_BOFF_Mask                      (((uint32_t)0x01) << 1)
#define DAC_CR_BOFF                           DAC_CR_BOFF_Mask
#define DAC_CR_EN_Pos                         ((uint32_t)0)                     /* DAC channel enable */
#define DAC_CR_EN_Mask                        (((uint32_t)0x01) << 0)
#define DAC_CR_EN                             DAC_CR_EN_Mask

/************************************ DAC->SWTRIGR  *************************************/
#define DAC_SWTRIGR_SWTRIG_Pos                ((uint32_t)0)                     /* DAC channel software trigger */
#define DAC_SWTRIGR_SWTRIG_Mask               (((uint32_t)0x01) << 0)
#define DAC_SWTRIGR_SWTRIG                    DAC_SWTRIGR_SWTRIG_Mask

/************************************ DAC->DHR12R  **************************************/
#define DAC_DHR12R_DACDHR12R_Pos              ((uint32_t)0)                     /* DAC channel 12-bit right-aligned data */
#define DAC_DHR12R_DACDHR12R_Mask             (((uint32_t)0x0FFF) << 0)
#define DAC_DHR12R_DACDHR12R                  DAC_DHR12R_DACDHR12R_Mask
#define DAC_DHR12R_DACDHR12R_0                (((uint32_t)0x1))
#define DAC_DHR12R_DACDHR12R_1                (((uint32_t)0x2))
#define DAC_DHR12R_DACDHR12R_2                (((uint32_t)0x4))
#define DAC_DHR12R_DACDHR12R_3                (((uint32_t)0x8))
#define DAC_DHR12R_DACDHR12R_4                (((uint32_t)0x10))
#define DAC_DHR12R_DACDHR12R_5                (((uint32_t)0x20))
#define DAC_DHR12R_DACDHR12R_6                (((uint32_t)0x40))
#define DAC_DHR12R_DACDHR12R_7                (((uint32_t)0x80))
#define DAC_DHR12R_DACDHR12R_8                (((uint32_t)0x100))
#define DAC_DHR12R_DACDHR12R_9                (((uint32_t)0x200))
#define DAC_DHR12R_DACDHR12R_10               (((uint32_t)0x400))
#define DAC_DHR12R_DACDHR12R_11               (((uint32_t)0x800))

/************************************ DAC->DHR12L  **************************************/
#define DAC_DHR12L_DACDHR12L_Pos              ((uint32_t)4)                     /* DAC channel 12-bit right-aligned data */
#define DAC_DHR12L_DACDHR12L_Mask             (((uint32_t)0x0FFF) << 4)
#define DAC_DHR12L_DACDHR12L                  DAC_DHR12L_DACDHR12L_Mask
#define DAC_DHR12L_DACDHR12L_0                (((uint32_t)0x1 << DAC_DHR12L_DACDHR12L_Pos))
#define DAC_DHR12L_DACDHR12L_1                (((uint32_t)0x2 << DAC_DHR12L_DACDHR12L_Pos))
#define DAC_DHR12L_DACDHR12L_2                (((uint32_t)0x4 << DAC_DHR12L_DACDHR12L_Pos))
#define DAC_DHR12L_DACDHR12L_3                (((uint32_t)0x8 << DAC_DHR12L_DACDHR12L_Pos))
#define DAC_DHR12L_DACDHR12L_4                (((uint32_t)0x10 << DAC_DHR12L_DACDHR12L_Pos))
#define DAC_DHR12L_DACDHR12L_5                (((uint32_t)0x20 << DAC_DHR12L_DACDHR12L_Pos))
#define DAC_DHR12L_DACDHR12L_6                (((uint32_t)0x40 << DAC_DHR12L_DACDHR12L_Pos))
#define DAC_DHR12L_DACDHR12L_7                (((uint32_t)0x80 << DAC_DHR12L_DACDHR12L_Pos))
#define DAC_DHR12L_DACDHR12L_8                (((uint32_t)0x100 << DAC_DHR12L_DACDHR12L_Pos))
#define DAC_DHR12L_DACDHR12L_9                (((uint32_t)0x200 << DAC_DHR12L_DACDHR12L_Pos))
#define DAC_DHR12L_DACDHR12L_10               (((uint32_t)0x400 << DAC_DHR12L_DACDHR12L_Pos))
#define DAC_DHR12L_DACDHR12L_11               (((uint32_t)0x800 << DAC_DHR12L_DACDHR12L_Pos))

/************************************* DAC->DHR8R  **************************************/
#define DAC_DHR8R_DACDHR8R_Pos                ((uint32_t)0)                     /* DAC channel 8-bit right-aligned data */
#define DAC_DHR8R_DACDHR8R_Mask               (((uint32_t)0xFF) << 0)
#define DAC_DHR8R_DACDHR8R                    DAC_DHR8R_DACDHR8R_Mask
#define DAC_DHR8R_DACDHR8R_0                  (((uint32_t)0x1))
#define DAC_DHR8R_DACDHR8R_1                  (((uint32_t)0x2))
#define DAC_DHR8R_DACDHR8R_2                  (((uint32_t)0x4))
#define DAC_DHR8R_DACDHR8R_3                  (((uint32_t)0x8))
#define DAC_DHR8R_DACDHR8R_4                  (((uint32_t)0x10))
#define DAC_DHR8R_DACDHR8R_5                  (((uint32_t)0x20))
#define DAC_DHR8R_DACDHR8R_6                  (((uint32_t)0x40))
#define DAC_DHR8R_DACDHR8R_7                  (((uint32_t)0x80))

/************************************** DAC->DOR  ***************************************/
#define DAC_DOR_DACDOR_Pos                    ((uint32_t)0)                     /* DAC channel data output */
#define DAC_DOR_DACDOR_Mask                   (((uint32_t)0x0FFF) << 0)
#define DAC_DOR_DACDOR                        DAC_DOR_DACDOR_Mask
#define DAC_DOR_DACDOR_0                      (((uint32_t)0x1))
#define DAC_DOR_DACDOR_1                      (((uint32_t)0x2))
#define DAC_DOR_DACDOR_2                      (((uint32_t)0x4))
#define DAC_DOR_DACDOR_3                      (((uint32_t)0x8))
#define DAC_DOR_DACDOR_4                      (((uint32_t)0x10))
#define DAC_DOR_DACDOR_5                      (((uint32_t)0x20))
#define DAC_DOR_DACDOR_6                      (((uint32_t)0x40))
#define DAC_DOR_DACDOR_7                      (((uint32_t)0x80))
#define DAC_DOR_DACDOR_8                      (((uint32_t)0x100))
#define DAC_DOR_DACDOR_9                      (((uint32_t)0x200))
#define DAC_DOR_DACDOR_10                     (((uint32_t)0x400))
#define DAC_DOR_DACDOR_11                     (((uint32_t)0x800))

/************************************** DAC->SR  ****************************************/
#define DAC_SR_DMAUDR_Pos                     ((uint32_t)13)                    /* DAC channel DMA underrun flag */
#define DAC_SR_DMAUDR_Mask                    (((uint32_t)0x01) << 13)
#define DAC_SR_DMAUDR                         DAC_SR_DMAUDR_Mask

/*****************************************************************************************
*                                     Peripheral LCD                                     *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t CR;                     /* CR */
    __IO uint32_t FCR;                    /* FCR */
    __IO uint32_t SR;                     /* SR */
    __O  uint32_t CLR;                    /* CLR */
    uint16_t RESERVED1[2];
    __IO uint32_t RAM0;                   /* RAM0 */
    __IO uint32_t RAM1;                   /* RAM1 */
    __IO uint32_t RAM2;                   /* RAM2 */
    __IO uint32_t RAM3;                   /* RAM3 */
    __IO uint32_t RAM4;                   /* RAM4 */
    __IO uint32_t RAM5;                   /* RAM5 */
    __IO uint32_t RAM6;                   /* RAM6 */
    __IO uint32_t RAM7;                   /* RAM7 */
    __IO uint32_t RAM8;                   /* RAM8 */
    __IO uint32_t RAM9;                   /* RAM9 */
    __IO uint32_t RAM10;                  /* RAM10 */
    __IO uint32_t RAM11;                  /* RAM11 */
    __IO uint32_t RAM12;                  /* RAM12 */
    __IO uint32_t RAM13;                  /* RAM13 */
    __IO uint32_t RAM14;                  /* RAM14 */
    __IO uint32_t RAM15;                  /* RAM15 */
    uint16_t RESERVED2[22];
    __IO uint32_t COMENR;                 /* COMENR */
    __IO uint32_t SEGENR0;                /* SEGENR0 */
} LCD_TypeDef;

/************************************** LCD->CR  ****************************************/
#define LCD_CR_MUX_SEG_Pos                    ((uint32_t)7)                     /* Mux segment enable */
#define LCD_CR_MUX_SEG_Mask                   (((uint32_t)0x01) << 7)
#define LCD_CR_MUX_SEG                        LCD_CR_MUX_SEG_Mask
#define LCD_CR_BIAS_Pos                       ((uint32_t)5)                     /* Bias selector */
#define LCD_CR_BIAS_Mask                      (((uint32_t)0x03) << 5)
#define LCD_CR_BIAS                           LCD_CR_BIAS_Mask
#define LCD_CR_BIAS_0                         (((uint32_t)0x1 << LCD_CR_BIAS_Pos))
#define LCD_CR_BIAS_1                         (((uint32_t)0x2 << LCD_CR_BIAS_Pos))
#define LCD_CR_DUTY_Pos                       ((uint32_t)2)                     /* Duty selection */
#define LCD_CR_DUTY_Mask                      (((uint32_t)0x07) << 2)
#define LCD_CR_DUTY                           LCD_CR_DUTY_Mask
#define LCD_CR_DUTY_0                         (((uint32_t)0x1 << LCD_CR_DUTY_Pos))
#define LCD_CR_DUTY_1                         (((uint32_t)0x2 << LCD_CR_DUTY_Pos))
#define LCD_CR_DUTY_2                         (((uint32_t)0x4 << LCD_CR_DUTY_Pos))
#define LCD_CR_VSEL_Pos                       ((uint32_t)1)                     /* Voltage source selection */
#define LCD_CR_VSEL_Mask                      (((uint32_t)0x01) << 1)
#define LCD_CR_VSEL                           LCD_CR_VSEL_Mask
#define LCD_CR_LCDEN_Pos                      ((uint32_t)0)                     /* LCD controller enable */
#define LCD_CR_LCDEN_Mask                     (((uint32_t)0x01) << 0)
#define LCD_CR_LCDEN                          LCD_CR_LCDEN_Mask

/************************************** LCD->FCR  ***************************************/
#define LCD_FCR_PS_Pos                        ((uint32_t)22)                    /* PS 16-bit prescaler */
#define LCD_FCR_PS_Mask                       (((uint32_t)0x0F) << 22)
#define LCD_FCR_PS                            LCD_FCR_PS_Mask
#define LCD_FCR_PS_0                          (((uint32_t)0x1 << LCD_FCR_PS_Pos))
#define LCD_FCR_PS_1                          (((uint32_t)0x2 << LCD_FCR_PS_Pos))
#define LCD_FCR_PS_2                          (((uint32_t)0x4 << LCD_FCR_PS_Pos))
#define LCD_FCR_PS_3                          (((uint32_t)0x8 << LCD_FCR_PS_Pos))
#define LCD_FCR_DIV_Pos                       ((uint32_t)18)                    /* DIV clock divider */
#define LCD_FCR_DIV_Mask                      (((uint32_t)0x0F) << 18)
#define LCD_FCR_DIV                           LCD_FCR_DIV_Mask
#define LCD_FCR_DIV_0                         (((uint32_t)0x1 << LCD_FCR_DIV_Pos))
#define LCD_FCR_DIV_1                         (((uint32_t)0x2 << LCD_FCR_DIV_Pos))
#define LCD_FCR_DIV_2                         (((uint32_t)0x4 << LCD_FCR_DIV_Pos))
#define LCD_FCR_DIV_3                         (((uint32_t)0x8 << LCD_FCR_DIV_Pos))
#define LCD_FCR_BLINK_Pos                     ((uint32_t)16)                    /* Blink mode selection */
#define LCD_FCR_BLINK_Mask                    (((uint32_t)0x03) << 16)
#define LCD_FCR_BLINK                         LCD_FCR_BLINK_Mask
#define LCD_FCR_BLINK_0                       (((uint32_t)0x1 << LCD_FCR_BLINK_Pos))
#define LCD_FCR_BLINK_1                       (((uint32_t)0x2 << LCD_FCR_BLINK_Pos))
#define LCD_FCR_BLINKF_Pos                    ((uint32_t)13)                    /* Blink frequency selection */
#define LCD_FCR_BLINKF_Mask                   (((uint32_t)0x07) << 13)
#define LCD_FCR_BLINKF                        LCD_FCR_BLINKF_Mask
#define LCD_FCR_BLINKF_0                      (((uint32_t)0x1 << LCD_FCR_BLINKF_Pos))
#define LCD_FCR_BLINKF_1                      (((uint32_t)0x2 << LCD_FCR_BLINKF_Pos))
#define LCD_FCR_BLINKF_2                      (((uint32_t)0x4 << LCD_FCR_BLINKF_Pos))
#define LCD_FCR_CC_Pos                        ((uint32_t)10)                    /* Contrast control */
#define LCD_FCR_CC_Mask                       (((uint32_t)0x07) << 10)
#define LCD_FCR_CC                            LCD_FCR_CC_Mask
#define LCD_FCR_CC_0                          (((uint32_t)0x1 << LCD_FCR_CC_Pos))
#define LCD_FCR_CC_1                          (((uint32_t)0x2 << LCD_FCR_CC_Pos))
#define LCD_FCR_CC_2                          (((uint32_t)0x4 << LCD_FCR_CC_Pos))
#define LCD_FCR_DEAD_Pos                      ((uint32_t)7)                     /* Dead time duration */
#define LCD_FCR_DEAD_Mask                     (((uint32_t)0x07) << 7)
#define LCD_FCR_DEAD                          LCD_FCR_DEAD_Mask
#define LCD_FCR_DEAD_0                        (((uint32_t)0x1 << LCD_FCR_DEAD_Pos))
#define LCD_FCR_DEAD_1                        (((uint32_t)0x2 << LCD_FCR_DEAD_Pos))
#define LCD_FCR_DEAD_2                        (((uint32_t)0x4 << LCD_FCR_DEAD_Pos))
#define LCD_FCR_PON_Pos                       ((uint32_t)4)                     /* Pulse ON duration */
#define LCD_FCR_PON_Mask                      (((uint32_t)0x07) << 4)
#define LCD_FCR_PON                           LCD_FCR_PON_Mask
#define LCD_FCR_PON_0                         (((uint32_t)0x1 << LCD_FCR_PON_Pos))
#define LCD_FCR_PON_1                         (((uint32_t)0x2 << LCD_FCR_PON_Pos))
#define LCD_FCR_PON_2                         (((uint32_t)0x4 << LCD_FCR_PON_Pos))
#define LCD_FCR_UDDIE_Pos                     ((uint32_t)3)                     /* Update display done interrupt enable */
#define LCD_FCR_UDDIE_Mask                    (((uint32_t)0x01) << 3)
#define LCD_FCR_UDDIE                         LCD_FCR_UDDIE_Mask
#define LCD_FCR_MD_Pos                        ((uint32_t)2)                     /* Middle drive enable */
#define LCD_FCR_MD_Mask                       (((uint32_t)0x01) << 2)
#define LCD_FCR_MD                            LCD_FCR_MD_Mask
#define LCD_FCR_SOFIE_Pos                     ((uint32_t)1)                     /* Start of frame interrupt enable */
#define LCD_FCR_SOFIE_Mask                    (((uint32_t)0x01) << 1)
#define LCD_FCR_SOFIE                         LCD_FCR_SOFIE_Mask
#define LCD_FCR_HD_Pos                        ((uint32_t)0)                     /* High drive enable */
#define LCD_FCR_HD_Mask                       (((uint32_t)0x01) << 0)
#define LCD_FCR_HD                            LCD_FCR_HD_Mask

/************************************** LCD->SR  ****************************************/
#define LCD_SR_FCRSF_Pos                      ((uint32_t)5)                     /* LCD Frame Control Register Synchronization flag */
#define LCD_SR_FCRSF_Mask                     (((uint32_t)0x01) << 5)
#define LCD_SR_FCRSF                          LCD_SR_FCRSF_Mask
#define LCD_SR_RDY_Pos                        ((uint32_t)4)                     /* Ready flag */
#define LCD_SR_RDY_Mask                       (((uint32_t)0x01) << 4)
#define LCD_SR_RDY                            LCD_SR_RDY_Mask
#define LCD_SR_UDD_Pos                        ((uint32_t)3)                     /* Update Display Done */
#define LCD_SR_UDD_Mask                       (((uint32_t)0x01) << 3)
#define LCD_SR_UDD                            LCD_SR_UDD_Mask
#define LCD_SR_UDR_Pos                        ((uint32_t)2)                     /* Update display request */
#define LCD_SR_UDR_Mask                       (((uint32_t)0x01) << 2)
#define LCD_SR_UDR                            LCD_SR_UDR_Mask
#define LCD_SR_SOF_Pos                        ((uint32_t)1)                     /* Start of frame flag */
#define LCD_SR_SOF_Mask                       (((uint32_t)0x01) << 1)
#define LCD_SR_SOF                            LCD_SR_SOF_Mask
#define LCD_SR_ENS_Pos                        ((uint32_t)0)                     /* LCD enabled status */
#define LCD_SR_ENS_Mask                       (((uint32_t)0x01) << 0)
#define LCD_SR_ENS                            LCD_SR_ENS_Mask

/************************************** LCD->CLR  ***************************************/
#define LCD_CLR_UDDC_Pos                      ((uint32_t)3)                     /* Update display done clear */
#define LCD_CLR_UDDC_Mask                     (((uint32_t)0x01) << 3)
#define LCD_CLR_UDDC                          LCD_CLR_UDDC_Mask
#define LCD_CLR_SOFC_Pos                      ((uint32_t)1)                     /* Start of frame flag clear */
#define LCD_CLR_SOFC_Mask                     (((uint32_t)0x01) << 1)
#define LCD_CLR_SOFC                          LCD_CLR_SOFC_Mask

/************************************* LCD->RAM0  ***************************************/
#define LCD_RAM0_SEGMENT_Pos                  ((uint32_t)0)                     /* The Value write to RAM */
#define LCD_RAM0_SEGMENT_Mask                 (((uint32_t)0xFFFFFFFF) << 0)
#define LCD_RAM0_SEGMENT                      LCD_RAM0_SEGMENT_Mask

/************************************* LCD->RAM1  ***************************************/
#define LCD_RAM1_SEGMENT_Pos                  ((uint32_t)0)                     /* The Value write to RAM */
#define LCD_RAM1_SEGMENT_Mask                 (((uint32_t)0xFFFFFFFF) << 0)
#define LCD_RAM1_SEGMENT                      LCD_RAM1_SEGMENT_Mask

/************************************* LCD->RAM2  ***************************************/
#define LCD_RAM2_SEGMENT_Pos                  ((uint32_t)0)                     /* The Value write to RAM */
#define LCD_RAM2_SEGMENT_Mask                 (((uint32_t)0xFFFFFFFF) << 0)
#define LCD_RAM2_SEGMENT                      LCD_RAM2_SEGMENT_Mask

/************************************* LCD->RAM3  ***************************************/
#define LCD_RAM3_SEGMENT_Pos                  ((uint32_t)0)                     /* The Value write to RAM */
#define LCD_RAM3_SEGMENT_Mask                 (((uint32_t)0xFFFFFFFF) << 0)
#define LCD_RAM3_SEGMENT                      LCD_RAM3_SEGMENT_Mask

/************************************* LCD->RAM4  ***************************************/
#define LCD_RAM4_SEGMENT_Pos                  ((uint32_t)0)                     /* The Value write to RAM */
#define LCD_RAM4_SEGMENT_Mask                 (((uint32_t)0xFFFFFFFF) << 0)
#define LCD_RAM4_SEGMENT                      LCD_RAM4_SEGMENT_Mask

/************************************* LCD->RAM5  ***************************************/
#define LCD_RAM5_SEGMENT_Pos                  ((uint32_t)0)                     /* The Value write to RAM */
#define LCD_RAM5_SEGMENT_Mask                 (((uint32_t)0xFFFFFFFF) << 0)
#define LCD_RAM5_SEGMENT                      LCD_RAM5_SEGMENT_Mask

/************************************* LCD->RAM6  ***************************************/
#define LCD_RAM6_SEGMENT_Pos                  ((uint32_t)0)                     /* The Value write to RAM */
#define LCD_RAM6_SEGMENT_Mask                 (((uint32_t)0xFFFFFFFF) << 0)
#define LCD_RAM6_SEGMENT                      LCD_RAM6_SEGMENT_Mask

/************************************* LCD->RAM7  ***************************************/
#define LCD_RAM7_SEGMENT_Pos                  ((uint32_t)0)                     /* The Value write to RAM */
#define LCD_RAM7_SEGMENT_Mask                 (((uint32_t)0xFFFFFFFF) << 0)
#define LCD_RAM7_SEGMENT                      LCD_RAM7_SEGMENT_Mask

/************************************* LCD->RAM8  ***************************************/
#define LCD_RAM8_SEGMENT_Pos                  ((uint32_t)0)                     /* The Value write to RAM */
#define LCD_RAM8_SEGMENT_Mask                 (((uint32_t)0xFFFFFFFF) << 0)
#define LCD_RAM8_SEGMENT                      LCD_RAM8_SEGMENT_Mask

/************************************* LCD->RAM9  ***************************************/
#define LCD_RAM9_SEGMENT_Pos                  ((uint32_t)0)                     /* The Value write to RAM */
#define LCD_RAM9_SEGMENT_Mask                 (((uint32_t)0xFFFFFFFF) << 0)
#define LCD_RAM9_SEGMENT                      LCD_RAM9_SEGMENT_Mask

/************************************* LCD->RAM10  **************************************/
#define LCD_RAM10_SEGMENT_Pos                 ((uint32_t)0)                     /* The Value write to RAM */
#define LCD_RAM10_SEGMENT_Mask                (((uint32_t)0xFFFFFFFF) << 0)
#define LCD_RAM10_SEGMENT                     LCD_RAM10_SEGMENT_Mask

/************************************* LCD->RAM11  **************************************/
#define LCD_RAM11_SEGMENT_Pos                 ((uint32_t)0)                     /* The Value write to RAM */
#define LCD_RAM11_SEGMENT_Mask                (((uint32_t)0xFFFFFFFF) << 0)
#define LCD_RAM11_SEGMENT                     LCD_RAM11_SEGMENT_Mask

/************************************* LCD->RAM12  **************************************/
#define LCD_RAM12_SEGMENT_Pos                 ((uint32_t)0)                     /* The Value write to RAM */
#define LCD_RAM12_SEGMENT_Mask                (((uint32_t)0xFFFFFFFF) << 0)
#define LCD_RAM12_SEGMENT                     LCD_RAM12_SEGMENT_Mask

/************************************* LCD->RAM13  **************************************/
#define LCD_RAM13_SEGMENT_Pos                 ((uint32_t)0)                     /* The Value write to RAM */
#define LCD_RAM13_SEGMENT_Mask                (((uint32_t)0xFFFFFFFF) << 0)
#define LCD_RAM13_SEGMENT                     LCD_RAM13_SEGMENT_Mask

/************************************* LCD->RAM14  **************************************/
#define LCD_RAM14_SEGMENT_Pos                 ((uint32_t)0)                     /* The Value write to RAM */
#define LCD_RAM14_SEGMENT_Mask                (((uint32_t)0xFFFFFFFF) << 0)
#define LCD_RAM14_SEGMENT                     LCD_RAM14_SEGMENT_Mask

/************************************* LCD->RAM15  **************************************/
#define LCD_RAM15_SEGMENT_Pos                 ((uint32_t)0)                     /* The Value write to RAM */
#define LCD_RAM15_SEGMENT_Mask                (((uint32_t)0xFFFFFFFF) << 0)
#define LCD_RAM15_SEGMENT                     LCD_RAM15_SEGMENT_Mask

/************************************ LCD->COMENR  **************************************/
#define LCD_COMENR_COMEN_Pos                  ((uint32_t)0)                     /* COM Enable */
#define LCD_COMENR_COMEN_Mask                 (((uint32_t)0xFF) << 0)
#define LCD_COMENR_COMEN                      LCD_COMENR_COMEN_Mask
#define LCD_COMENR_COMEN_0                    (((uint32_t)0x1))
#define LCD_COMENR_COMEN_1                    (((uint32_t)0x2))
#define LCD_COMENR_COMEN_2                    (((uint32_t)0x4))
#define LCD_COMENR_COMEN_3                    (((uint32_t)0x8))
#define LCD_COMENR_COMEN_4                    (((uint32_t)0x10))
#define LCD_COMENR_COMEN_5                    (((uint32_t)0x20))
#define LCD_COMENR_COMEN_6                    (((uint32_t)0x40))
#define LCD_COMENR_COMEN_7                    (((uint32_t)0x80))

/************************************ LCD->SEGENR0  *************************************/
#define LCD_SEGENR0_SEGEN_Pos                 ((uint32_t)0)                     /* SEG Enable */
#define LCD_SEGENR0_SEGEN_Mask                (((uint32_t)0xFFFFFFFF) << 0)
#define LCD_SEGENR0_SEGEN                     LCD_SEGENR0_SEGEN_Mask

/*****************************************************************************************
*                                    Peripheral COMP1                                    *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t CSR;                    /* CSR */
} COMP1_TypeDef;

/************************************* COMP1->CSR  **************************************/
#define COMP1_CSR_COMP1LOCK_Pos               ((uint32_t)31)                    /* COMP1_CSR register lock bit */
#define COMP1_CSR_COMP1LOCK_Mask              (((uint32_t)0x01) << 31)
#define COMP1_CSR_COMP1LOCK                   COMP1_CSR_COMP1LOCK_Mask
#define COMP1_CSR_COMP1VALUE_Pos              ((uint32_t)30)                    /* Comparator 1 output status bit */
#define COMP1_CSR_COMP1VALUE_Mask             (((uint32_t)0x01) << 30)
#define COMP1_CSR_COMP1VALUE                  COMP1_CSR_COMP1VALUE_Mask
#define COMP1_CSR_COMP1VALID_Pos              ((uint32_t)19)                    /* Comparator 1 valid output selection */
#define COMP1_CSR_COMP1VALID_Mask             (((uint32_t)0x01) << 19)
#define COMP1_CSR_COMP1VALID                  COMP1_CSR_COMP1VALID_Mask
#define COMP1_CSR_COMP1PWRMD_Pos              ((uint32_t)18)                    /* Comparator 1 power mode selection */
#define COMP1_CSR_COMP1PWRMD_Mask             (((uint32_t)0x01) << 18)
#define COMP1_CSR_COMP1PWRMD                  COMP1_CSR_COMP1PWRMD_Mask
#define COMP1_CSR_COMP1HYST_Pos               ((uint32_t)16)                    /* Comparator 1 hysteresis */
#define COMP1_CSR_COMP1HYST_Mask              (((uint32_t)0x03) << 16)
#define COMP1_CSR_COMP1HYST                   COMP1_CSR_COMP1HYST_Mask
#define COMP1_CSR_COMP1HYST_0                 (((uint32_t)0x1 << COMP1_CSR_COMP1HYST_Pos))
#define COMP1_CSR_COMP1HYST_1                 (((uint32_t)0x2 << COMP1_CSR_COMP1HYST_Pos))
#define COMP1_CSR_COMP1POLARITY_Pos           ((uint32_t)15)                    /* Comparator 1 polarity selection bit */
#define COMP1_CSR_COMP1POLARITY_Mask          (((uint32_t)0x01) << 15)
#define COMP1_CSR_COMP1POLARITY               COMP1_CSR_COMP1POLARITY_Mask
#define COMP1_CSR_COMP1WINOUT_Pos             ((uint32_t)14)                    /* Comparator 1 output selection */
#define COMP1_CSR_COMP1WINOUT_Mask            (((uint32_t)0x01) << 14)
#define COMP1_CSR_COMP1WINOUT                 COMP1_CSR_COMP1WINOUT_Mask
#define COMP1_CSR_COMP1WM_Pos                 ((uint32_t)8)                     /* Comparator 1 window mode selection bit */
#define COMP1_CSR_COMP1WM_Mask                (((uint32_t)0x01) << 8)
#define COMP1_CSR_COMP1WM                     COMP1_CSR_COMP1WM_Mask
#define COMP1_CSR_COMP1INNSEL_Pos             ((uint32_t)4)                     /* Comparator 1 inverting input selection */
#define COMP1_CSR_COMP1INNSEL_Mask            (((uint32_t)0x07) << 4)
#define COMP1_CSR_COMP1INNSEL                 COMP1_CSR_COMP1INNSEL_Mask
#define COMP1_CSR_COMP1INNSEL_0               (((uint32_t)0x1 << COMP1_CSR_COMP1INNSEL_Pos))
#define COMP1_CSR_COMP1INNSEL_1               (((uint32_t)0x2 << COMP1_CSR_COMP1INNSEL_Pos))
#define COMP1_CSR_COMP1INNSEL_2               (((uint32_t)0x4 << COMP1_CSR_COMP1INNSEL_Pos))
#define COMP1_CSR_COMP1EN_Pos                 ((uint32_t)0)                     /* Comparator 1 enable bit */
#define COMP1_CSR_COMP1EN_Mask                (((uint32_t)0x01) << 0)
#define COMP1_CSR_COMP1EN                     COMP1_CSR_COMP1EN_Mask

/*****************************************************************************************
*                                    Peripheral COMP2                                    *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t CSR;                    /* CSR */
} COMP2_TypeDef;

/************************************* COMP2->CSR  **************************************/
#define COMP2_CSR_COMP2LOCK_Pos               ((uint32_t)31)                    /* COMP2_CSR register lock bit */
#define COMP2_CSR_COMP2LOCK_Mask              (((uint32_t)0x01) << 31)
#define COMP2_CSR_COMP2LOCK                   COMP2_CSR_COMP2LOCK_Mask
#define COMP2_CSR_COMP2VALUE_Pos              ((uint32_t)30)                    /* Comparator 2 output status bit */
#define COMP2_CSR_COMP2VALUE_Mask             (((uint32_t)0x01) << 30)
#define COMP2_CSR_COMP2VALUE                  COMP2_CSR_COMP2VALUE_Mask
#define COMP2_CSR_COMP2VALID_Pos              ((uint32_t)19)                    /* Comparator 2 valid output selection */
#define COMP2_CSR_COMP2VALID_Mask             (((uint32_t)0x01) << 19)
#define COMP2_CSR_COMP2VALID                  COMP2_CSR_COMP2VALID_Mask
#define COMP2_CSR_COMP2PWRMD_Pos              ((uint32_t)18)                    /* Comparator 2 power mode selection */
#define COMP2_CSR_COMP2PWRMD_Mask             (((uint32_t)0x01) << 18)
#define COMP2_CSR_COMP2PWRMD                  COMP2_CSR_COMP2PWRMD_Mask
#define COMP2_CSR_COMP2HYST_Pos               ((uint32_t)16)                    /* Comparator 2 hysteresis */
#define COMP2_CSR_COMP2HYST_Mask              (((uint32_t)0x03) << 16)
#define COMP2_CSR_COMP2HYST                   COMP2_CSR_COMP2HYST_Mask
#define COMP2_CSR_COMP2HYST_0                 (((uint32_t)0x1 << COMP2_CSR_COMP2HYST_Pos))
#define COMP2_CSR_COMP2HYST_1                 (((uint32_t)0x2 << COMP2_CSR_COMP2HYST_Pos))
#define COMP2_CSR_COMP2POLARITY_Pos           ((uint32_t)15)                    /* Comparator 2 polarity selection bit */
#define COMP2_CSR_COMP2POLARITY_Mask          (((uint32_t)0x01) << 15)
#define COMP2_CSR_COMP2POLARITY               COMP2_CSR_COMP2POLARITY_Mask
#define COMP2_CSR_COMP2WINOUT_Pos             ((uint32_t)14)                    /* Comparator 2 output selection */
#define COMP2_CSR_COMP2WINOUT_Mask            (((uint32_t)0x01) << 14)
#define COMP2_CSR_COMP2WINOUT                 COMP2_CSR_COMP2WINOUT_Mask
#define COMP2_CSR_COMP2INPSEL_Pos             ((uint32_t)8)                     /* Comparator 2 non inverting input selection */
#define COMP2_CSR_COMP2INPSEL_Mask            (((uint32_t)0x07) << 8)
#define COMP2_CSR_COMP2INPSEL                 COMP2_CSR_COMP2INPSEL_Mask
#define COMP2_CSR_COMP2INPSEL_0               (((uint32_t)0x1 << COMP2_CSR_COMP2INPSEL_Pos))
#define COMP2_CSR_COMP2INPSEL_1               (((uint32_t)0x2 << COMP2_CSR_COMP2INPSEL_Pos))
#define COMP2_CSR_COMP2INPSEL_2               (((uint32_t)0x4 << COMP2_CSR_COMP2INPSEL_Pos))
#define COMP2_CSR_COMP2INNSEL_Pos             ((uint32_t)4)                     /* Comparator 2 inverting input selection */
#define COMP2_CSR_COMP2INNSEL_Mask            (((uint32_t)0x07) << 4)
#define COMP2_CSR_COMP2INNSEL                 COMP2_CSR_COMP2INNSEL_Mask
#define COMP2_CSR_COMP2INNSEL_0               (((uint32_t)0x1 << COMP2_CSR_COMP2INNSEL_Pos))
#define COMP2_CSR_COMP2INNSEL_1               (((uint32_t)0x2 << COMP2_CSR_COMP2INNSEL_Pos))
#define COMP2_CSR_COMP2INNSEL_2               (((uint32_t)0x4 << COMP2_CSR_COMP2INNSEL_Pos))
#define COMP2_CSR_COMP2EN_Pos                 ((uint32_t)0)                     /* Comparator 2 enable bit */
#define COMP2_CSR_COMP2EN_Mask                (((uint32_t)0x01) << 0)
#define COMP2_CSR_COMP2EN                     COMP2_CSR_COMP2EN_Mask

/*****************************************************************************************
*                                    Peripheral OPAMP                                    *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t CSR;                    /* CSR */
} OPAMP_TypeDef;

/************************************* OPAMP->CSR  **************************************/
#define OPAMP_CSR_LOCK_Pos                    ((uint32_t)31)                    /* OPAMPx_CSR register lock bit */
#define OPAMP_CSR_LOCK_Mask                   (((uint32_t)0x01) << 31)
#define OPAMP_CSR_LOCK                        OPAMP_CSR_LOCK_Mask
#define OPAMP_CSR_OUTCAL_Pos                  ((uint32_t)30)                    /* OPAx output status flag */
#define OPAMP_CSR_OUTCAL_Mask                 (((uint32_t)0x01) << 30)
#define OPAMP_CSR_OUTCAL                      OPAMP_CSR_OUTCAL_Mask
#define OPAMP_CSR_TSTREF_Pos                  ((uint32_t)29)                    /* OPA1 output to ADC enable */
#define OPAMP_CSR_TSTREF_Mask                 (((uint32_t)0x01) << 29)
#define OPAMP_CSR_TSTREF                      OPAMP_CSR_TSTREF_Mask
#define OPAMP_CSR_TRIMOFFSETN_Pos             ((uint32_t)24)                    /* NMOS */
#define OPAMP_CSR_TRIMOFFSETN_Mask            (((uint32_t)0x1F) << 24)
#define OPAMP_CSR_TRIMOFFSETN                 OPAMP_CSR_TRIMOFFSETN_Mask
#define OPAMP_CSR_TRIMOFFSETN_0               (((uint32_t)0x1 << OPAMP_CSR_TRIMOFFSETN_Pos))
#define OPAMP_CSR_TRIMOFFSETN_1               (((uint32_t)0x2 << OPAMP_CSR_TRIMOFFSETN_Pos))
#define OPAMP_CSR_TRIMOFFSETN_2               (((uint32_t)0x4 << OPAMP_CSR_TRIMOFFSETN_Pos))
#define OPAMP_CSR_TRIMOFFSETN_3               (((uint32_t)0x8 << OPAMP_CSR_TRIMOFFSETN_Pos))
#define OPAMP_CSR_TRIMOFFSETN_4               (((uint32_t)0x10 << OPAMP_CSR_TRIMOFFSETN_Pos))
#define OPAMP_CSR_TRIMOFFSETP_Pos             ((uint32_t)19)                    /* PMOS */
#define OPAMP_CSR_TRIMOFFSETP_Mask            (((uint32_t)0x1F) << 19)
#define OPAMP_CSR_TRIMOFFSETP                 OPAMP_CSR_TRIMOFFSETP_Mask
#define OPAMP_CSR_TRIMOFFSETP_0               (((uint32_t)0x1 << OPAMP_CSR_TRIMOFFSETP_Pos))
#define OPAMP_CSR_TRIMOFFSETP_1               (((uint32_t)0x2 << OPAMP_CSR_TRIMOFFSETP_Pos))
#define OPAMP_CSR_TRIMOFFSETP_2               (((uint32_t)0x4 << OPAMP_CSR_TRIMOFFSETP_Pos))
#define OPAMP_CSR_TRIMOFFSETP_3               (((uint32_t)0x8 << OPAMP_CSR_TRIMOFFSETP_Pos))
#define OPAMP_CSR_TRIMOFFSETP_4               (((uint32_t)0x10 << OPAMP_CSR_TRIMOFFSETP_Pos))
#define OPAMP_CSR_USER_TRIM_Pos               ((uint32_t)18)                    /* User trimming enable */
#define OPAMP_CSR_USER_TRIM_Mask              (((uint32_t)0x01) << 18)
#define OPAMP_CSR_USER_TRIM                   OPAMP_CSR_USER_TRIM_Mask
#define OPAMP_CSR_PGA_GAIN_Pos                ((uint32_t)14)                    /* Gain in PGA mode configuration */
#define OPAMP_CSR_PGA_GAIN_Mask               (((uint32_t)0x0F) << 14)
#define OPAMP_CSR_PGA_GAIN                    OPAMP_CSR_PGA_GAIN_Mask
#define OPAMP_CSR_PGA_GAIN_0                  (((uint32_t)0x1 << OPAMP_CSR_PGA_GAIN_Pos))
#define OPAMP_CSR_PGA_GAIN_1                  (((uint32_t)0x2 << OPAMP_CSR_PGA_GAIN_Pos))
#define OPAMP_CSR_PGA_GAIN_2                  (((uint32_t)0x4 << OPAMP_CSR_PGA_GAIN_Pos))
#define OPAMP_CSR_PGA_GAIN_3                  (((uint32_t)0x8 << OPAMP_CSR_PGA_GAIN_Pos))
#define OPAMP_CSR_CALSEL_Pos                  ((uint32_t)12)                    /* Calibration selection */
#define OPAMP_CSR_CALSEL_Mask                 (((uint32_t)0x03) << 12)
#define OPAMP_CSR_CALSEL                      OPAMP_CSR_CALSEL_Mask
#define OPAMP_CSR_CALSEL_0                    (((uint32_t)0x1 << OPAMP_CSR_CALSEL_Pos))
#define OPAMP_CSR_CALSEL_1                    (((uint32_t)0x2 << OPAMP_CSR_CALSEL_Pos))
#define OPAMP_CSR_CALON_Pos                   ((uint32_t)11)                    /* Calibration mode enable */
#define OPAMP_CSR_CALON_Mask                  (((uint32_t)0x01) << 11)
#define OPAMP_CSR_CALON                       OPAMP_CSR_CALON_Mask
#define OPAMP_CSR_VPS_SEL_Pos                 ((uint32_t)9)                     /* OPAx Second Non inverting input selection */
#define OPAMP_CSR_VPS_SEL_Mask                (((uint32_t)0x03) << 9)
#define OPAMP_CSR_VPS_SEL                     OPAMP_CSR_VPS_SEL_Mask
#define OPAMP_CSR_VPS_SEL_0                   (((uint32_t)0x1 << OPAMP_CSR_VPS_SEL_Pos))
#define OPAMP_CSR_VPS_SEL_1                   (((uint32_t)0x2 << OPAMP_CSR_VPS_SEL_Pos))
#define OPAMP_CSR_VMS_SEL_Pos                 ((uint32_t)8)                     /* OPAx Second inverting input selection */
#define OPAMP_CSR_VMS_SEL_Mask                (((uint32_t)0x01) << 8)
#define OPAMP_CSR_VMS_SEL                     OPAMP_CSR_VMS_SEL_Mask
#define OPAMP_CSR_TCM_EN_Pos                  ((uint32_t)7)                     /* OPAx Default and Second Enable */
#define OPAMP_CSR_TCM_EN_Mask                 (((uint32_t)0x01) << 7)
#define OPAMP_CSR_TCM_EN                      OPAMP_CSR_TCM_EN_Mask
#define OPAMP_CSR_VM_SEL_Pos                  ((uint32_t)5)                     /* OPAx inverting input selection */
#define OPAMP_CSR_VM_SEL_Mask                 (((uint32_t)0x03) << 5)
#define OPAMP_CSR_VM_SEL                      OPAMP_CSR_VM_SEL_Mask
#define OPAMP_CSR_VM_SEL_0                    (((uint32_t)0x1 << OPAMP_CSR_VM_SEL_Pos))
#define OPAMP_CSR_VM_SEL_1                    (((uint32_t)0x2 << OPAMP_CSR_VM_SEL_Pos))
#define OPAMP_CSR_VP_SEL_Pos                  ((uint32_t)2)                     /* OPAx Non inverting input selection */
#define OPAMP_CSR_VP_SEL_Mask                 (((uint32_t)0x03) << 2)
#define OPAMP_CSR_VP_SEL                      OPAMP_CSR_VP_SEL_Mask
#define OPAMP_CSR_VP_SEL_0                    (((uint32_t)0x1 << OPAMP_CSR_VP_SEL_Pos))
#define OPAMP_CSR_VP_SEL_1                    (((uint32_t)0x2 << OPAMP_CSR_VP_SEL_Pos))
#define OPAMP_CSR_FORCE_VP_Pos                ((uint32_t)1)                     /* Forces calibration */
#define OPAMP_CSR_FORCE_VP_Mask               (((uint32_t)0x01) << 1)
#define OPAMP_CSR_FORCE_VP                    OPAMP_CSR_FORCE_VP_Mask
#define OPAMP_CSR_OPAEN_Pos                   ((uint32_t)0)                     /* OPAx enable */
#define OPAMP_CSR_OPAEN_Mask                  (((uint32_t)0x01) << 0)
#define OPAMP_CSR_OPAEN                       OPAMP_CSR_OPAEN_Mask

/*****************************************************************************************
*                                    Peripheral BEEPER                                   *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t CFGR;                   /* CFGR */
    __IO uint32_t CR;                     /* CR */
} BEEPER_TypeDef;

/************************************ BEEPER->CFGR  *************************************/
#define BEEPER_CFGR_BEEP_FREQ_Pos             ((uint32_t)1)                     /* Beep clock source divider */
#define BEEPER_CFGR_BEEP_FREQ_Mask            (((uint32_t)0x03) << 1)
#define BEEPER_CFGR_BEEP_FREQ                 BEEPER_CFGR_BEEP_FREQ_Mask
#define BEEPER_CFGR_BEEP_FREQ_0               (((uint32_t)0x1 << BEEPER_CFGR_BEEP_FREQ_Pos))
#define BEEPER_CFGR_BEEP_FREQ_1               (((uint32_t)0x2 << BEEPER_CFGR_BEEP_FREQ_Pos))
#define BEEPER_CFGR_BEEP_CKSEL_Pos            ((uint32_t)0)                     /* Beep elapsed time clock select */
#define BEEPER_CFGR_BEEP_CKSEL_Mask           (((uint32_t)0x01) << 0)
#define BEEPER_CFGR_BEEP_CKSEL                BEEPER_CFGR_BEEP_CKSEL_Mask

/************************************* BEEPER->CR  **************************************/
#define BEEPER_CR_CR_WBUSY_Pos                ((uint32_t)31)                    /* CR write busy */
#define BEEPER_CR_CR_WBUSY_Mask               (((uint32_t)0x01) << 31)
#define BEEPER_CR_CR_WBUSY                    BEEPER_CR_CR_WBUSY_Mask
#define BEEPER_CR_BEEPER_EN_Pos               ((uint32_t)0)                     /* Beeper enable */
#define BEEPER_CR_BEEPER_EN_Mask              (((uint32_t)0x01) << 0)
#define BEEPER_CR_BEEPER_EN                   BEEPER_CR_BEEPER_EN_Mask

/*****************************************************************************************
*                                     Peripheral AES                                     *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t CR1;                    /* CR1 */
    __I  uint32_t SR1;                    /* SR1 */
    __IO uint32_t DINR;                   /* DINR */
    __IO uint32_t DOUTR;                  /* DOUTR */
    __IO uint32_t KEYR0;                  /* KEYR0 */
    __IO uint32_t KEYR1;                  /* KEYR1 */
    __IO uint32_t KEYR2;                  /* KEYR2 */
    __IO uint32_t KEYR3;                  /* KEYR3 */
    uint16_t RESERVED1[48];
    __IO uint32_t CR2;                    /* CR2 */
    __IO uint32_t KEYR4;                  /* KEYR4 */
    __IO uint32_t KEYR5;                  /* KEYR5 */
    __IO uint32_t KEYR6;                  /* KEYR6 */
    __IO uint32_t KEYR7;                  /* KEYR7 */
    __I  uint32_t SR2;                    /* SR2 */
} AES_TypeDef;

/************************************** AES->CR1  ***************************************/
#define AES_CR1_DMAOUTEN_Pos                  ((uint32_t)12)                    /* Enable DMA management of data output phase */
#define AES_CR1_DMAOUTEN_Mask                 (((uint32_t)0x01) << 12)
#define AES_CR1_DMAOUTEN                      AES_CR1_DMAOUTEN_Mask
#define AES_CR1_DMAINEN_Pos                   ((uint32_t)11)                    /* Enable DMA management of data input phase */
#define AES_CR1_DMAINEN_Mask                  (((uint32_t)0x01) << 11)
#define AES_CR1_DMAINEN                       AES_CR1_DMAINEN_Mask
#define AES_CR1_ERRIE_Pos                     ((uint32_t)10)                    /* Error interrupt enable */
#define AES_CR1_ERRIE_Mask                    (((uint32_t)0x01) << 10)
#define AES_CR1_ERRIE                         AES_CR1_ERRIE_Mask
#define AES_CR1_CCFIE_Pos                     ((uint32_t)9)                     /* CCF flag interrupt enable */
#define AES_CR1_CCFIE_Mask                    (((uint32_t)0x01) << 9)
#define AES_CR1_CCFIE                         AES_CR1_CCFIE_Mask
#define AES_CR1_ERRC_Pos                      ((uint32_t)8)                     /* Error clear */
#define AES_CR1_ERRC_Mask                     (((uint32_t)0x01) << 8)
#define AES_CR1_ERRC                          AES_CR1_ERRC_Mask
#define AES_CR1_CCFC_Pos                      ((uint32_t)7)                     /* Computation complete flag clear */
#define AES_CR1_CCFC_Mask                     (((uint32_t)0x01) << 7)
#define AES_CR1_CCFC                          AES_CR1_CCFC_Mask
#define AES_CR1_MODE_Pos                      ((uint32_t)3)                     /* AES operating mode selection */
#define AES_CR1_MODE_Mask                     (((uint32_t)0x03) << 3)
#define AES_CR1_MODE                          AES_CR1_MODE_Mask
#define AES_CR1_MODE_0                        (((uint32_t)0x1 << AES_CR1_MODE_Pos))
#define AES_CR1_MODE_1                        (((uint32_t)0x2 << AES_CR1_MODE_Pos))
#define AES_CR1_EN_Pos                        ((uint32_t)0)                     /* AES enable */
#define AES_CR1_EN_Mask                       (((uint32_t)0x01) << 0)
#define AES_CR1_EN                            AES_CR1_EN_Mask

/************************************** AES->CR2  ***************************************/
#define AES_CR2_CCF_SET_Pos                   ((uint32_t)6)                     /* Force to set bit AES_SR.CCF */
#define AES_CR2_CCF_SET_Mask                  (((uint32_t)0x01) << 6)
#define AES_CR2_CCF_SET                       AES_CR2_CCF_SET_Mask
#define AES_CR2_INT_RESUME_Pos                ((uint32_t)5)                     /* Indicate the AES to resume from the interrupt service program */
#define AES_CR2_INT_RESUME_Mask               (((uint32_t)0x01) << 5)
#define AES_CR2_INT_RESUME                    AES_CR2_INT_RESUME_Mask
#define AES_CR2_RANDOM_CLK_EN_Pos             ((uint32_t)4)                     /* Random number of TRNG output to randomize the AES clock */
#define AES_CR2_RANDOM_CLK_EN_Mask            (((uint32_t)0x01) << 4)
#define AES_CR2_RANDOM_CLK_EN                 AES_CR2_RANDOM_CLK_EN_Mask
#define AES_CR2_KEY_SIZE_Pos                  ((uint32_t)0)                     /* Key size */
#define AES_CR2_KEY_SIZE_Mask                 (((uint32_t)0x03) << 0)
#define AES_CR2_KEY_SIZE                      AES_CR2_KEY_SIZE_Mask
#define AES_CR2_KEY_SIZE_0                    (((uint32_t)0x1))
#define AES_CR2_KEY_SIZE_1                    (((uint32_t)0x2))

/************************************** AES->SR1  ***************************************/
#define AES_SR1_WRERR_Pos                     ((uint32_t)2)                     /* Write error flag */
#define AES_SR1_WRERR_Mask                    (((uint32_t)0x01) << 2)
#define AES_SR1_WRERR                         AES_SR1_WRERR_Mask
#define AES_SR1_RDERR_Pos                     ((uint32_t)1)                     /* Read error flag */
#define AES_SR1_RDERR_Mask                    (((uint32_t)0x01) << 1)
#define AES_SR1_RDERR                         AES_SR1_RDERR_Mask
#define AES_SR1_CCF_Pos                       ((uint32_t)0)                     /* Computation complete flag */
#define AES_SR1_CCF_Mask                      (((uint32_t)0x01) << 0)
#define AES_SR1_CCF                           AES_SR1_CCF_Mask

/************************************** AES->SR2  ***************************************/
#define AES_SR2_FST_CAL_Pos                   ((uint32_t)4)                     /* The state of the first operation after the AES_CR1.EN enable */
#define AES_SR2_FST_CAL_Mask                  (((uint32_t)0x01) << 4)
#define AES_SR2_FST_CAL                       AES_SR2_FST_CAL_Mask
#define AES_SR2_INPUT_CN_Pos                  ((uint32_t)2)                     /* The Number of words already entered into the DINR register */
#define AES_SR2_INPUT_CN_Mask                 (((uint32_t)0x03) << 2)
#define AES_SR2_INPUT_CN                      AES_SR2_INPUT_CN_Mask
#define AES_SR2_INPUT_CN_0                    (((uint32_t)0x1 << AES_SR2_INPUT_CN_Pos))
#define AES_SR2_INPUT_CN_1                    (((uint32_t)0x2 << AES_SR2_INPUT_CN_Pos))

/************************************* AES->DINR  ***************************************/
#define AES_DINR_DINR_Pos                     ((uint32_t)0)                     /* Data input register */
#define AES_DINR_DINR_Mask                    (((uint32_t)0xFFFFFFFF) << 0)
#define AES_DINR_DINR                         AES_DINR_DINR_Mask

/************************************* AES->DOUTR  **************************************/
#define AES_DOUTR_DOUTR_Pos                   ((uint32_t)0)                     /* Data output register */
#define AES_DOUTR_DOUTR_Mask                  (((uint32_t)0xFFFFFFFF) << 0)
#define AES_DOUTR_DOUTR                       AES_DOUTR_DOUTR_Mask

/************************************* AES->KEYR0  **************************************/
#define AES_KEYR0_KEYR0_Pos                   ((uint32_t)0)                     /* LSB of AES key register */
#define AES_KEYR0_KEYR0_Mask                  (((uint32_t)0xFFFFFFFF) << 0)
#define AES_KEYR0_KEYR0                       AES_KEYR0_KEYR0_Mask

/************************************* AES->KEYR1  **************************************/
#define AES_KEYR1_KEYR1_Pos                   ((uint32_t)0)                     /* AES key register */
#define AES_KEYR1_KEYR1_Mask                  (((uint32_t)0xFFFFFFFF) << 0)
#define AES_KEYR1_KEYR1                       AES_KEYR1_KEYR1_Mask

/************************************* AES->KEYR2  **************************************/
#define AES_KEYR2_KEYR2_Pos                   ((uint32_t)0)                     /* AES key register */
#define AES_KEYR2_KEYR2_Mask                  (((uint32_t)0xFFFFFFFF) << 0)
#define AES_KEYR2_KEYR2                       AES_KEYR2_KEYR2_Mask

/************************************* AES->KEYR3  **************************************/
#define AES_KEYR3_KEYR3_Pos                   ((uint32_t)0)                     /* AES key register */
#define AES_KEYR3_KEYR3_Mask                  (((uint32_t)0xFFFFFFFF) << 0)
#define AES_KEYR3_KEYR3                       AES_KEYR3_KEYR3_Mask

/************************************* AES->KEYR4  **************************************/
#define AES_KEYR4_KEYR4_Pos                   ((uint32_t)0)                     /* AES key register */
#define AES_KEYR4_KEYR4_Mask                  (((uint32_t)0xFFFFFFFF) << 0)
#define AES_KEYR4_KEYR4                       AES_KEYR4_KEYR4_Mask

/************************************* AES->KEYR5  **************************************/
#define AES_KEYR5_KEYR5_Pos                   ((uint32_t)0)                     /* AES key register */
#define AES_KEYR5_KEYR5_Mask                  (((uint32_t)0xFFFFFFFF) << 0)
#define AES_KEYR5_KEYR5                       AES_KEYR5_KEYR5_Mask

/************************************* AES->KEYR6  **************************************/
#define AES_KEYR6_KEYR6_Pos                   ((uint32_t)0)                     /* AES key register */
#define AES_KEYR6_KEYR6_Mask                  (((uint32_t)0xFFFFFFFF) << 0)
#define AES_KEYR6_KEYR6                       AES_KEYR6_KEYR6_Mask

/************************************* AES->KEYR7  **************************************/
#define AES_KEYR7_KEYR7_Pos                   ((uint32_t)0)                     /* MSB of AES key register */
#define AES_KEYR7_KEYR7_Mask                  (((uint32_t)0xFFFFFFFF) << 0)
#define AES_KEYR7_KEYR7                       AES_KEYR7_KEYR7_Mask

/*****************************************************************************************
*                                     Peripheral TRNG                                    *
*****************************************************************************************/
typedef struct
{
    __IO uint32_t CR;                     /* CR */
    __IO uint32_t SR;                     /* SR */
    __I  uint32_t DR;                     /* DR */
} TRNG_TypeDef;

/************************************** TRNG->CR  ***************************************/
#define TRNG_CR_OP_CYCLE_Pos                  ((uint32_t)9)                     /* Operation cycle */
#define TRNG_CR_OP_CYCLE_Mask                 (((uint32_t)0x7F) << 9)
#define TRNG_CR_OP_CYCLE                      TRNG_CR_OP_CYCLE_Mask
#define TRNG_CR_OP_CYCLE_0                    (((uint32_t)0x1 << TRNG_CR_OP_CYCLE_Pos))
#define TRNG_CR_OP_CYCLE_1                    (((uint32_t)0x2 << TRNG_CR_OP_CYCLE_Pos))
#define TRNG_CR_OP_CYCLE_2                    (((uint32_t)0x4 << TRNG_CR_OP_CYCLE_Pos))
#define TRNG_CR_OP_CYCLE_3                    (((uint32_t)0x8 << TRNG_CR_OP_CYCLE_Pos))
#define TRNG_CR_OP_CYCLE_4                    (((uint32_t)0x10 << TRNG_CR_OP_CYCLE_Pos))
#define TRNG_CR_OP_CYCLE_5                    (((uint32_t)0x20 << TRNG_CR_OP_CYCLE_Pos))
#define TRNG_CR_OP_CYCLE_6                    (((uint32_t)0x40 << TRNG_CR_OP_CYCLE_Pos))
#define TRNG_CR_MODE_Pos                      ((uint32_t)4)                     /* Mode */
#define TRNG_CR_MODE_Mask                     (((uint32_t)0x01) << 4)
#define TRNG_CR_MODE                          TRNG_CR_MODE_Mask
#define TRNG_CR_IE_Pos                        ((uint32_t)3)                     /* Interrupt enable */
#define TRNG_CR_IE_Mask                       (((uint32_t)0x01) << 3)
#define TRNG_CR_IE                            TRNG_CR_IE_Mask
#define TRNG_CR_RNGEN_Pos                     ((uint32_t)2)                     /* Random number generator enable */
#define TRNG_CR_RNGEN_Mask                    (((uint32_t)0x01) << 2)
#define TRNG_CR_RNGEN                         TRNG_CR_RNGEN_Mask

/************************************** TRNG->SR  ***************************************/
#define TRNG_SR_SEIS_Pos                      ((uint32_t)6)                     /* Seed error interrupt status */
#define TRNG_SR_SEIS_Mask                     (((uint32_t)0x01) << 6)
#define TRNG_SR_SEIS                          TRNG_SR_SEIS_Mask
#define TRNG_SR_SECS_Pos                      ((uint32_t)2)                     /* Seed error current status */
#define TRNG_SR_SECS_Mask                     (((uint32_t)0x01) << 2)
#define TRNG_SR_SECS                          TRNG_SR_SECS_Mask
#define TRNG_SR_DRDY_Pos                      ((uint32_t)0)                     /* Data ready */
#define TRNG_SR_DRDY_Mask                     (((uint32_t)0x01) << 0)
#define TRNG_SR_DRDY                          TRNG_SR_DRDY_Mask

/************************************** TRNG->DR  ***************************************/
#define TRNG_DR_RNDATA_Pos                    ((uint32_t)0)                     /* Random data */
#define TRNG_DR_RNDATA_Mask                   (((uint32_t)0xFFFFFFFF) << 0)
#define TRNG_DR_RNDATA                        TRNG_DR_RNDATA_Mask

/*****************************************************************************************
*                                    Peripheral DBGMCU                                   *
*****************************************************************************************/
typedef struct
{
    __I  uint32_t IDCODE;                 /* IDCODE */
    __IO uint32_t CR;                     /* CR */
    __IO uint32_t APB1_FZ;                /* APB1_FZ */
    __IO uint32_t APB2_FZ;                /* APB2_FZ */
} DBGMCU_TypeDef;

/*********************************** DBGMCU->IDCODE  ************************************/
#define DBGMCU_IDCODE_REV_ID_Pos              ((uint32_t)16)                    /* Revision identifier */
#define DBGMCU_IDCODE_REV_ID_Mask             (((uint32_t)0xFFFF) << 16)
#define DBGMCU_IDCODE_REV_ID                  DBGMCU_IDCODE_REV_ID_Mask
#define DBGMCU_IDCODE_DEV_ID_Pos              ((uint32_t)0)                     /* Device identifier */
#define DBGMCU_IDCODE_DEV_ID_Mask             (((uint32_t)0x0FFF) << 0)
#define DBGMCU_IDCODE_DEV_ID                  DBGMCU_IDCODE_DEV_ID_Mask
#define DBGMCU_IDCODE_DEV_ID_0                (((uint32_t)0x1))
#define DBGMCU_IDCODE_DEV_ID_1                (((uint32_t)0x2))
#define DBGMCU_IDCODE_DEV_ID_2                (((uint32_t)0x4))
#define DBGMCU_IDCODE_DEV_ID_3                (((uint32_t)0x8))
#define DBGMCU_IDCODE_DEV_ID_4                (((uint32_t)0x10))
#define DBGMCU_IDCODE_DEV_ID_5                (((uint32_t)0x20))
#define DBGMCU_IDCODE_DEV_ID_6                (((uint32_t)0x40))
#define DBGMCU_IDCODE_DEV_ID_7                (((uint32_t)0x80))
#define DBGMCU_IDCODE_DEV_ID_8                (((uint32_t)0x100))
#define DBGMCU_IDCODE_DEV_ID_9                (((uint32_t)0x200))
#define DBGMCU_IDCODE_DEV_ID_10               (((uint32_t)0x400))
#define DBGMCU_IDCODE_DEV_ID_11               (((uint32_t)0x800))

/************************************* DBGMCU->CR  **************************************/
#define DBGMCU_CR_DBG_STANDBY_Pos             ((uint32_t)2)                     /* Debug Standby mode */
#define DBGMCU_CR_DBG_STANDBY_Mask            (((uint32_t)0x01) << 2)
#define DBGMCU_CR_DBG_STANDBY                 DBGMCU_CR_DBG_STANDBY_Mask
#define DBGMCU_CR_DBG_STOP_Pos                ((uint32_t)1)                     /* Debug Stop mode */
#define DBGMCU_CR_DBG_STOP_Mask               (((uint32_t)0x01) << 1)
#define DBGMCU_CR_DBG_STOP                    DBGMCU_CR_DBG_STOP_Mask
#define DBGMCU_CR_DBG_SLEEP_Pos               ((uint32_t)0)                     /* Debug Sleep mode */
#define DBGMCU_CR_DBG_SLEEP_Mask              (((uint32_t)0x01) << 0)
#define DBGMCU_CR_DBG_SLEEP                   DBGMCU_CR_DBG_SLEEP_Mask

/********************************** DBGMCU->APB1_FZ  ************************************/
#define DBGMCU_APB1_FZ_DBG_CAN_STOP_Pos       ((uint32_t)25)                    /* Debug CAN stopped when core is halted */
#define DBGMCU_APB1_FZ_DBG_CAN_STOP_Mask      (((uint32_t)0x01) << 25)
#define DBGMCU_APB1_FZ_DBG_CAN_STOP           DBGMCU_APB1_FZ_DBG_CAN_STOP_Mask
#define DBGMCU_APB1_FZ_DBG_I2C2_SMBus_TIMEOUT_Pos  ((uint32_t)22)               /* I2C2 SMBUS timeout mode stopped when core is halted */
#define DBGMCU_APB1_FZ_DBG_I2C2_SMBus_TIMEOUT_Mask  (((uint32_t)0x01) << 22)
#define DBGMCU_APB1_FZ_DBG_I2C2_SMBus_TIMEOUT  DBGMCU_APB1_FZ_DBG_I2C2_SMBus_TIMEOUT_Mask
#define DBGMCU_APB1_FZ_DBG_I2C1_SMBus_TIMEOUT_Pos  ((uint32_t)21)               /* I2C1 SMBUS timeout mode stopped when core is halted */
#define DBGMCU_APB1_FZ_DBG_I2C1_SMBus_TIMEOUT_Mask  (((uint32_t)0x01) << 21)
#define DBGMCU_APB1_FZ_DBG_I2C1_SMBus_TIMEOUT  DBGMCU_APB1_FZ_DBG_I2C1_SMBus_TIMEOUT_Mask
#define DBGMCU_APB1_FZ_DBG_IWDG_STOP_Pos      ((uint32_t)12)                    /* Debug independent watchdog stopped when core is halted */
#define DBGMCU_APB1_FZ_DBG_IWDG_STOP_Mask     (((uint32_t)0x01) << 12)
#define DBGMCU_APB1_FZ_DBG_IWDG_STOP          DBGMCU_APB1_FZ_DBG_IWDG_STOP_Mask
#define DBGMCU_APB1_FZ_DBG_WWDG_STOP_Pos      ((uint32_t)11)                    /* Debug window watchdog stopped when core is halted */
#define DBGMCU_APB1_FZ_DBG_WWDG_STOP_Mask     (((uint32_t)0x01) << 11)
#define DBGMCU_APB1_FZ_DBG_WWDG_STOP          DBGMCU_APB1_FZ_DBG_WWDG_STOP_Mask
#define DBGMCU_APB1_FZ_DBG_RTC_STOP_Pos       ((uint32_t)10)                    /* Debug RTC stopped when core is halted */
#define DBGMCU_APB1_FZ_DBG_RTC_STOP_Mask      (((uint32_t)0x01) << 10)
#define DBGMCU_APB1_FZ_DBG_RTC_STOP           DBGMCU_APB1_FZ_DBG_RTC_STOP_Mask
#define DBGMCU_APB1_FZ_DBG_TIM14_STOP_Pos     ((uint32_t)8)                     /* Debug TIM14 stopped when core is halted */
#define DBGMCU_APB1_FZ_DBG_TIM14_STOP_Mask    (((uint32_t)0x01) << 8)
#define DBGMCU_APB1_FZ_DBG_TIM14_STOP         DBGMCU_APB1_FZ_DBG_TIM14_STOP_Mask
#define DBGMCU_APB1_FZ_DBG_TIM3_STOP_Pos      ((uint32_t)1)                     /* Debug TIM3 stopped when core is halted */
#define DBGMCU_APB1_FZ_DBG_TIM3_STOP_Mask     (((uint32_t)0x01) << 1)
#define DBGMCU_APB1_FZ_DBG_TIM3_STOP          DBGMCU_APB1_FZ_DBG_TIM3_STOP_Mask
#define DBGMCU_APB1_FZ_DBG_TIM2_STOP_Pos      ((uint32_t)0)                     /* Debug TIM2 stopped when core is halted */
#define DBGMCU_APB1_FZ_DBG_TIM2_STOP_Mask     (((uint32_t)0x01) << 0)
#define DBGMCU_APB1_FZ_DBG_TIM2_STOP          DBGMCU_APB1_FZ_DBG_TIM2_STOP_Mask

/********************************** DBGMCU->APB2_FZ  ************************************/
#define DBGMCU_APB2_FZ_DBG_TIM17_STOP_Pos     ((uint32_t)18)                    /* Debug TIM17 stopped when core is halted */
#define DBGMCU_APB2_FZ_DBG_TIM17_STOP_Mask    (((uint32_t)0x01) << 18)
#define DBGMCU_APB2_FZ_DBG_TIM17_STOP         DBGMCU_APB2_FZ_DBG_TIM17_STOP_Mask
#define DBGMCU_APB2_FZ_DBG_TIM16_STOP_Pos     ((uint32_t)17)                    /* Debug TIM16 stopped when core is halted */
#define DBGMCU_APB2_FZ_DBG_TIM16_STOP_Mask    (((uint32_t)0x01) << 17)
#define DBGMCU_APB2_FZ_DBG_TIM16_STOP         DBGMCU_APB2_FZ_DBG_TIM16_STOP_Mask
#define DBGMCU_APB2_FZ_DBG_TIM15_STOP_Pos     ((uint32_t)16)                    /* Debug TIM15 stopped when core is halted */
#define DBGMCU_APB2_FZ_DBG_TIM15_STOP_Mask    (((uint32_t)0x01) << 16)
#define DBGMCU_APB2_FZ_DBG_TIM15_STOP         DBGMCU_APB2_FZ_DBG_TIM15_STOP_Mask
#define DBGMCU_APB2_FZ_DBG_TIM1_STOP_Pos      ((uint32_t)11)                    /* Debug TIM1 stopped when core is halted */
#define DBGMCU_APB2_FZ_DBG_TIM1_STOP_Mask     (((uint32_t)0x01) << 11)
#define DBGMCU_APB2_FZ_DBG_TIM1_STOP          DBGMCU_APB2_FZ_DBG_TIM1_STOP_Mask

/*****************************************************************************************
*                     Peripheral Base Address and Peripheral Define                      *
*****************************************************************************************/
#define FLASH_RBASE                           ((uint32_t)0x40022000)
#define FLASH                                 ((FLASH_TypeDef *)FLASH_RBASE)

#define CRC_BASE                              ((uint32_t)0x40023000)
#define CRC                                   ((CRC_TypeDef *)CRC_BASE)

#define PWR_BASE                              ((uint32_t)0x40007000)
#define PWR                                   ((PWR_TypeDef *)PWR_BASE)

#define RCC_BASE                              ((uint32_t)0x40021000)
#define RCC                                   ((RCC_TypeDef *)RCC_BASE)

#define SYSCFG_BASE                           ((uint32_t)0x40010000)
#define SYSCFG                                ((SYSCFG_TypeDef *)SYSCFG_BASE)

#define GPIOA_BASE                            ((uint32_t)0x48000000)
#define GPIOA                                 ((GPIO_TypeDef *)GPIOA_BASE)

#define GPIOB_BASE                            ((uint32_t)0x48000400)
#define GPIOB                                 ((GPIO_TypeDef *)GPIOB_BASE)

#define GPIOC_BASE                            ((uint32_t)0x48000800)
#define GPIOC                                 ((GPIO_TypeDef *)GPIOC_BASE)

#define GPIOD_BASE                            ((uint32_t)0x48000C00)
#define GPIOD                                 ((GPIO_TypeDef *)GPIOD_BASE)

#define GPIOF_BASE                            ((uint32_t)0x48001400)
#define GPIOF                                 ((GPIO_TypeDef *)GPIOF_BASE)

#define DMA_BASE                              ((uint32_t)0x40020000)
#define DMA                                   ((DMA_TypeDef *)DMA_BASE)

#define DMA_Channel1_BASE                     ((uint32_t)0x40020008)
#define DMA_Channel1                          ((DMA_Channel_TypeDef *)DMA_Channel1_BASE)

#define DMA_Channel2_BASE                     ((uint32_t)0x4002001C)
#define DMA_Channel2                          ((DMA_Channel_TypeDef *)DMA_Channel2_BASE)

#define DMA_Channel3_BASE                     ((uint32_t)0x40020030)
#define DMA_Channel3                          ((DMA_Channel_TypeDef *)DMA_Channel3_BASE)

#define DMA_Channel4_BASE                     ((uint32_t)0x40020044)
#define DMA_Channel4                          ((DMA_Channel_TypeDef *)DMA_Channel4_BASE)

#define DMA_Channel5_BASE                     ((uint32_t)0x40020058)
#define DMA_Channel5                          ((DMA_Channel_TypeDef *)DMA_Channel5_BASE)

#define DMA_Channel6_BASE                     ((uint32_t)0x4002006C)
#define DMA_Channel6                          ((DMA_Channel_TypeDef *)DMA_Channel6_BASE)

#define DMA_Channel7_BASE                     ((uint32_t)0x40020080)
#define DMA_Channel7                          ((DMA_Channel_TypeDef *)DMA_Channel7_BASE)

#define EXTI_BASE                             ((uint32_t)0x40010400)
#define EXTI                                  ((EXTI_TypeDef *)EXTI_BASE)

#define TIM1_BASE                             ((uint32_t)0x40012C00)
#define TIM1                                  ((TIM_TypeDef *)TIM1_BASE)

#define TIM2_BASE                             ((uint32_t)0x40000000)
#define TIM2                                  ((TIM_TypeDef *)TIM2_BASE)

#define TIM3_BASE                             ((uint32_t)0x40000400)
#define TIM3                                  ((TIM_TypeDef *)TIM3_BASE)

#define TIM14_BASE                            ((uint32_t)0x40002000)
#define TIM14                                 ((TIM_TypeDef *)TIM14_BASE)

#define TIM15_BASE                            ((uint32_t)0x40014000)
#define TIM15                                 ((TIM_TypeDef *)TIM15_BASE)

#define TIM16_BASE                            ((uint32_t)0x40014400)
#define TIM16                                 ((TIM_TypeDef *)TIM16_BASE)

#define TIM17_BASE                            ((uint32_t)0x40014800)
#define TIM17                                 ((TIM_TypeDef *)TIM17_BASE)

#define IWDG_BASE                             ((uint32_t)0x40003000)
#define IWDG                                  ((IWDG_TypeDef *)IWDG_BASE)

#define WWDG_BASE                             ((uint32_t)0x40002C00)
#define WWDG                                  ((WWDG_TypeDef *)WWDG_BASE)

#define RTC_BASE                              ((uint32_t)0x40002800)
#define RTC                                   ((RTC_TypeDef *)RTC_BASE)

#define I2C1_BASE                             ((uint32_t)0x40005400)
#define I2C1                                  ((I2C_TypeDef *)I2C1_BASE)

#define I2C2_BASE                             ((uint32_t)0x40005800)
#define I2C2                                  ((I2C_TypeDef *)I2C2_BASE)

#define USART1_BASE                           ((uint32_t)0x40013800)
#define USART1                                ((USART_TypeDef *)USART1_BASE)

#define USART2_BASE                           ((uint32_t)0x40004400)
#define USART2                                ((USART_TypeDef *)USART2_BASE)

#define UART3_BASE                            ((uint32_t)0x40004800)
#define UART3                                 ((USART_TypeDef *)UART3_BASE)

#define UART4_BASE                            ((uint32_t)0x40004C00)
#define UART4                                 ((USART_TypeDef *)UART4_BASE)

#define LPUART_BASE                           ((uint32_t)0x40004000)
#define LPUART                                ((LPUART_TypeDef *)LPUART_BASE)

#define SPI1_BASE                             ((uint32_t)0x40013000)
#define SPI1                                  ((SPI_TypeDef *)SPI1_BASE)

#define SPI2_BASE                             ((uint32_t)0x40003800)
#define SPI2                                  ((SPI_TypeDef *)SPI2_BASE)

#define DVSQ_BASE                             ((uint32_t)0x40030000)
#define DVSQ                                  ((DVSQ_TypeDef *)DVSQ_BASE)

#define USB_BASE                              ((uint32_t)0x40005C00)
#define USB                                   ((USB_TypeDef *)USB_BASE)

#define CLU_BASE                              ((uint32_t)0x40006800)
#define CLU                                   ((CLU_TypeDef *)CLU_BASE)

#define CAN_BASE                              ((uint32_t)0x40006400)
#define CAN                                   ((CAN_TypeDef *)CAN_BASE)

#define EMACC_BASE                            ((uint32_t)0x40028000)
#define EMACC                                 ((EMACC_TypeDef *)EMACC_BASE)

#define ADC_BASE                              ((uint32_t)0x40012400)
#define ADC                                   ((ADC_TypeDef *)ADC_BASE)

#define DAC_BASE                              ((uint32_t)0x40007400)
#define DAC                                   ((DAC_TypeDef *)DAC_BASE)

#define LCD_BASE                              ((uint32_t)0x40002400)
#define LCD                                   ((LCD_TypeDef *)LCD_BASE)

#define COMP1_BASE                            ((uint32_t)0x40010118)
#define COMP1                                 ((COMP1_TypeDef *)COMP1_BASE)

#define COMP2_BASE                            ((uint32_t)0x4001011C)
#define COMP2                                 ((COMP2_TypeDef *)COMP2_BASE)

#define OPA1_BASE                             ((uint32_t)0x40010238)
#define OPA1                                  ((OPAMP_TypeDef *)OPA1_BASE)

#define OPA2_BASE                             ((uint32_t)0x4001023C)
#define OPA2                                  ((OPAMP_TypeDef *)OPA2_BASE)

#define OPA3_BASE                             ((uint32_t)0x40010240)
#define OPA3                                  ((OPAMP_TypeDef *)OPA3_BASE)

#define BEEPER_BASE                           ((uint32_t)0x40012000)
#define BEEPER                                ((BEEPER_TypeDef *)BEEPER_BASE)

#define AES_BASE                              ((uint32_t)0x40026000)
#define AES                                   ((AES_TypeDef *)AES_BASE)

#define TRNG_BASE                             ((uint32_t)0x40025000)
#define TRNG                                  ((TRNG_TypeDef *)TRNG_BASE)

#define DBGMCU_BASE                           ((uint32_t)0x40015800)
#define DBGMCU                                ((DBGMCU_TypeDef *)DBGMCU_BASE)

/*****************************************************************************************
*                         End of section using anonymous unions                          *
*****************************************************************************************/
#if defined (__CC_ARM)
#pragma pop
#elif defined (__ICCARM__)
/* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
#pragma clang diagnostic pop
#elif defined (__GNUC__)
/* anonymous unions are enabled by default */
#elif defined (__TMS470__)
/* anonymous unions are enabled by default */
#elif defined (__TASKING__)
#pragma warning restore
#elif defined (__CSMC__)
/* anonymous unions are enabled by default */
#endif
/*****************************************************************************************
*                                     Exported macro                                     *
*****************************************************************************************/
#define SET_BIT(REG, BIT)     ((REG) |= (BIT))
#define CLEAR_BIT(REG, BIT)   ((REG) &= ~(BIT))
#define READ_BIT(REG, BIT)    ((REG) & (BIT))
#define CLEAR_REG(REG)        ((REG) = (0x0))
#define WRITE_REG(REG, VAL)   ((REG) = (VAL))
#define READ_REG(REG)         ((REG))
#define POSITION_VAL(VAL)     (__CLZ(__RBIT(VAL)))
#define MODIFY_REG(REG, CLEARMASK, SETMASK)  WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))


#include "hk32l0xx_def.h"
#include "hk32l0xx_conf.h"

#ifdef __cplusplus
}
#endif  /* End of __cplusplus */

#endif  /* End of __HK32L0xx__ */

/***************************** (C) COPYRIGHT HKMicroChip  *******************************/
